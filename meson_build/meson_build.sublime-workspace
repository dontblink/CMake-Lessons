{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"libc_test_",
				"libc_test_flags"
			],
			[
				"test",
				"test_output_dir"
			],
			[
				"openlib",
				"openlibm_subproject"
			],
			[
				"DRDY",
				"DRDY_PIN"
			],
			[
				"DRDY_",
				"DRDY_DIR_PORT"
			],
			[
				"HT_C",
				"HT_CS_DIR_PORT"
			],
			[
				"intrin",
				"intrinsics.h\""
			],
			[
				"mb_re",
				"mb_file_records.h\""
			],
			[
				"proximi",
				"proximity_i2c.h\""
			],
			[
				"temphum",
				"temphumadc.h\""
			],
			[
				"calen",
				"calendar_i2c.h\""
			],
			[
				"msp430",
				"msp430_adc.h\""
			],
			[
				"mock_in",
				"mock_intrinsics.h\""
			],
			[
				"msp",
				"msp430_adc.h\""
			],
			[
				"ads",
				"SPI_ADS1256.h\""
			],
			[
				"temphu",
				"temphumadc.h\""
			],
			[
				"relay",
				"relay_timer.h\""
			],
			[
				"proxi",
				"proximity_i2c.h\""
			],
			[
				"calendar",
				"calendar_i2c.h\""
			],
			[
				"msp43",
				"msp430_adc.h\""
			],
			[
				"proxim",
				"proximity_i2c"
			],
			[
				"UART_DE",
				"uart_de"
			],
			[
				"FRAM_PROX",
				"FRAM_PROXIMITY_LIMIT"
			],
			[
				"calend",
				"calendar_types.h\""
			],
			[
				"HUMIDITY",
				"HUMIDITY_OUT_L"
			],
			[
				"read_i2c_data_mn",
				"read_i2c_data_mnack_end"
			],
			[
				"I2C_Mst",
				"I2C_Mst_NACK"
			],
			[
				"FAULT_TEMP",
				"FAULT_TEMP_PROXIMITY"
			],
			[
				"FAULT_MULT",
				"FAULT_MULTIPLE_ERR_START"
			],
			[
				"FAULT_MULTIPLE",
				"FAULT_MULTIPLE_ERR_END"
			],
			[
				"FAULT_MULTI",
				"FAULT_MULTIPLE_ERR_END"
			],
			[
				"FAULT_MU",
				"FAULT_MULTIPLE_ERR_START"
			],
			[
				"gIR_Pre",
				"gIR_PreTest_27um_mV"
			],
			[
				"gFire",
				"gFireDiagram_Index"
			],
			[
				"get_ir",
				"get_ir_sensor_enabled"
			],
			[
				"START_",
				"START_OFFSET_CALC"
			],
			[
				"std_",
				"std_offset_idx"
			],
			[
				"get_all",
				"get_all_avg_signals"
			],
			[
				"uv_",
				"uv_ir_test_flag"
			],
			[
				"handle_ir",
				"handle_mode1_ir_alarm"
			],
			[
				"handle",
				"handle_mode1_ir_alarm"
			],
			[
				"avg_signal",
				"avg_signal_38um_5hz"
			],
			[
				"avg_signal_43",
				"avg_signal_43um_5hz"
			],
			[
				"avg_signal_43um",
				"avg_signal_43um_5hz"
			],
			[
				"guv",
				"gUVpulsTot"
			],
			[
				"proximit",
				"proximity_timeout_flag"
			],
			[
				"Handle_Proxi",
				"Handle_Proximity_ERR"
			],
			[
				"TEST_ASSERT_BITS",
				"TEST_ASSERT_BITS_HIGH"
			],
			[
				"LEDObserv",
				"LEDObserverState"
			],
			[
				"RLY_AUX",
				"RLY_AUX_ON"
			],
			[
				"StopRelayOff",
				"StopFireRelayOffTimer"
			],
			[
				"timeobser",
				"time_observer"
			],
			[
				"gUV_IR_",
				"gUV_IR_Test_FLAG"
			],
			[
				"gAvg_",
				"gAvg_mV43um25Hz"
			],
			[
				"gAvg_mV27",
				"gAvg_mV27um25Hz"
			],
			[
				"FIRE_",
				"FRAM_FIRE_RATIO"
			],
			[
				"gIR",
				"gIR_ALARM"
			],
			[
				"gAvg_mV38",
				"gAvg_mV38um5Hz"
			],
			[
				"gA",
				"gAvg_mV43um5Hz"
			],
			[
				"gAvg_mV38um",
				"gAvg_mV38um5Hz"
			],
			[
				"TEST_ASSERT",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"gRatio_43u",
				"gRatio_43um38um_5Hz"
			],
			[
				"gAvg_mV43um",
				"gAvg_mV43um25Hz"
			],
			[
				"gRatio",
				"gRatio_43um38um_5Hz"
			],
			[
				"TEST_ASSERT_",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"gAvg_mV",
				"gAvg_mV38um25Hz"
			],
			[
				"gAvg",
				"gAvg_mV43um25Hz"
			],
			[
				"gAvg_mV27um",
				"gAvg_mV27um25Hz"
			],
			[
				"gavg",
				"gAvg_mV43um25Hz"
			],
			[
				"guvpu",
				"gUVpulsTot"
			],
			[
				"gAvg_mv38",
				"gAvg_mV38um25Hz"
			],
			[
				"gAvg_mv27",
				"gAvg_mV27um25Hz"
			],
			[
				"TEST_",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"gAvg_mV3",
				"gAvg_mV38um25Hz"
			],
			[
				"TEST_AS",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"ratiouv43",
				"ratiouv43um5hz_min"
			],
			[
				"gFLT_",
				"gFLT_UnLatch"
			],
			[
				"inc",
				"inc_uv_ir_fail"
			],
			[
				"in",
				"intrinsics"
			],
			[
				"gStart",
				"gStartupFaultTest"
			],
			[
				"SPI_ADS",
				"SPI_ADS1256.h"
			],
			[
				"msp4",
				"msp430fr6989.h"
			],
			[
				"gUV_Sen",
				"gUV_Sen_index2"
			],
			[
				"PIE1bi",
				"PIE1bits.RCIE"
			],
			[
				"eccp2",
				"eccp2.h"
			],
			[
				"last",
				"glbMode.lastHazardSet"
			],
			[
				"GetPul",
				"GetPulseTime_CH2\t(input.h)"
			],
			[
				"GetPulse",
				"GetPulseTime_CH1\t(input.h)"
			],
			[
				"tm",
				"tmr4.h\t(mode.c)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "libc-skeleton/meson.build",
			"settings":
			{
				"buffer_size": 2865,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					70,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIUCAAAAAAAAhgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQIAAAAAAACFAgAAAAAAAP///////+9/"
				],
				[
					72,
					1,
					"paste",
					null,
					"AQAAAIYCAAAAAAAAXwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgIAAAAAAACGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "sys_"
					},
					"BAAAAKICAAAAAAAAowIAAAAAAAAAAAAAowIAAAAAAACkAgAAAAAAAAAAAACkAgAAAAAAAKUCAAAAAAAAAAAAAKUCAAAAAAAApgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogIAAAAAAACiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "sys_"
					},
					"BAAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAAVAwAAAAAAABYDAAAAAAAAAAAAABYDAAAAAAAAFwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPYCAAAAAAAA9wIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gIAAAAAAAD2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " is_system:"
					},
					"CwAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA+AIAAAAAAAD5AgAAAAAAAAAAAAD5AgAAAAAAAPoCAAAAAAAAAAAAAPoCAAAAAAAA+wIAAAAAAAAAAAAA+wIAAAAAAAD8AgAAAAAAAAAAAAD8AgAAAAAAAP0CAAAAAAAAAAAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAD/AgAAAAAAAAAAAAD/AgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAQMAAAAAAAAAAAAAAQMAAAAAAAACAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wIAAAAAAAD3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAAIDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAAEAwAAAAAAAAAAAAAEAwAAAAAAAAUDAAAAAAAAAAAAAAUDAAAAAAAABgMAAAAAAAAAAAAABgMAAAAAAAAHAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgMAAAAAAAACAwAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHcDAAAAAAAAeAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwMAAAAAAAB3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " is_system:"
					},
					"CwAAAHgDAAAAAAAAeQMAAAAAAAAAAAAAeQMAAAAAAAB6AwAAAAAAAAAAAAB6AwAAAAAAAHsDAAAAAAAAAAAAAHsDAAAAAAAAfAMAAAAAAAAAAAAAfAMAAAAAAAB9AwAAAAAAAAAAAAB9AwAAAAAAAH4DAAAAAAAAAAAAAH4DAAAAAAAAfwMAAAAAAAAAAAAAfwMAAAAAAACAAwAAAAAAAAAAAACAAwAAAAAAAIEDAAAAAAAAAAAAAIEDAAAAAAAAggMAAAAAAAAAAAAAggMAAAAAAACDAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAMAAAAAAAB4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAIMDAAAAAAAAhAMAAAAAAAAAAAAAhAMAAAAAAACFAwAAAAAAAAAAAACFAwAAAAAAAIYDAAAAAAAAAAAAAIYDAAAAAAAAhwMAAAAAAAAAAAAAhwMAAAAAAACIAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwMAAAAAAACDAwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"swap_line_up",
					null,
					"AgAAAI8AAAAAAAAAjwAAAAAAAAAVAAAACQknYnVpbGQuY19zdGQ9YzExJywKfAAAAAAAAACRAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAANgEAAAAAAAA2AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/subprojects/printf/src/printf/printf.h",
			"redo_stack":
			[
				[
					234,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAKYQAAAAAAAAphAAAAAAAAABAAAAXw",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAACnEAAAAAAAAKcQAAAAAAAAAAAAAAAA8L8"
				],
				[
					229,
					1,
					"left_delete",
					null,
					"AQAAAK0QAAAAAAAArhAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAACtEAAAAAAAAK0QAAAAAAAAAAAAAAAA8L8"
				]
			],
			"settings":
			{
				"buffer_size": 8724,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					140,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGMMAAAAAAAAZAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAABjDAAAAAAAAGMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					155,
					1,
					"left_delete",
					null,
					"AQAAAGMMAAAAAAAAYwwAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAABkDAAAAAAAAGQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAGMMAAAAAAAAZAwAAAAAAAAAAAAAZAwAAAAAAABlDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAABjDAAAAAAAAGMMAAAAAAAAAAAAAAAA8L8"
				],
				[
					176,
					1,
					"left_delete",
					null,
					"AQAAAGQMAAAAAAAAZAwAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAABlDAAAAAAAAGUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"left_delete",
					null,
					"AQAAAGMMAAAAAAAAYwwAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAOAwAAAAAAABJDAAAAAAAAAAAAAAAAPC/AQAAAAEAAABkDAAAAAAAAGQMAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 981 files for \"PRINTF_VISIBILITY\"\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\test\\test_suite.cpp:\n   29  ///////////////////////////////////////////////////////////////////////////////\n   30  \n   31: #define PRINTF_VISIBILITY static\n   32  #if PRINTF_INCLUDE_CONFIG_H\n   33  #include <printf_config.h>\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\src\\printf\\printf.h:\n   80  // e.g. make them static so as not to clash with other objects also\n   81  // using them.\n   82: #ifndef PRINTF_VISIBILITY\n   83: #define PRINTF_VISIBILITY\n   84  #endif\n   85  \n   ..\n  103   * @param c the single character to print\n  104   */\n  105: PRINTF_VISIBILITY\n  106  void putchar_(char c);\n  107  \n  ...\n  120   */\n  121   ///@{\n  122: PRINTF_VISIBILITY\n  123  int printf_(const char* format, ...) ATTR_PRINTF(1, 2);\n  124: PRINTF_VISIBILITY\n  125  int vprintf_(const char* format, va_list arg) ATTR_VPRINTF(1);\n  126  ///@}\n  ...\n  141   */\n  142  ///@{\n  143: PRINTF_VISIBILITY\n  144  int  sprintf_(char* s, const char* format, ...) ATTR_PRINTF(2, 3);\n  145: PRINTF_VISIBILITY\n  146  int vsprintf_(char* s, const char* format, va_list arg) ATTR_VPRINTF(2);\n  147  ///@}\n  ...\n  164   */\n  165  ///@{\n  166: PRINTF_VISIBILITY\n  167  int  snprintf_(char* s, size_t count, const char* format, ...) ATTR_PRINTF(3, 4);\n  168: PRINTF_VISIBILITY\n  169  int vsnprintf_(char* s, size_t count, const char* format, va_list arg) ATTR_VPRINTF(3);\n  170  ///@}\n  ...\n  186   *\n  187   */\n  188: PRINTF_VISIBILITY\n  189  int fctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, ...) ATTR_PRINTF(3, 4);\n  190: PRINTF_VISIBILITY\n  191  int vfctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, va_list arg) ATTR_VPRINTF(3);\n  192  \n\n12 matches across 2 files\n\n\nSearching 981 files for \"PRINTF_VISIBILITY\"\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\test\\test_suite.cpp:\n   29  ///////////////////////////////////////////////////////////////////////////////\n   30  \n   31: #define PRINTF_VISIBILITY static\n   32  #if PRINTF_INCLUDE_CONFIG_H\n   33  #include <printf_config.h>\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\src\\printf\\printf.h:\n   80  // e.g. make them static so as not to clash with other objects also\n   81  // using them.\n   82: #ifndef PRINTF_VISIBILITY\n   83: #define PRINTF_VISIBILITY\n   84  #endif\n   85  \n   ..\n  103   * @param c the single character to print\n  104   */\n  105: PRINTF_VISIBILITY\n  106  void putchar_(char c);\n  107  \n  ...\n  120   */\n  121   ///@{\n  122: PRINTF_VISIBILITY\n  123  int printf_(const char* format, ...) ATTR_PRINTF(1, 2);\n  124: PRINTF_VISIBILITY\n  125  int vprintf_(const char* format, va_list arg) ATTR_VPRINTF(1);\n  126  ///@}\n  ...\n  141   */\n  142  ///@{\n  143: PRINTF_VISIBILITY\n  144  int  sprintf_(char* s, const char* format, ...) ATTR_PRINTF(2, 3);\n  145: PRINTF_VISIBILITY\n  146  int vsprintf_(char* s, const char* format, va_list arg) ATTR_VPRINTF(2);\n  147  ///@}\n  ...\n  164   */\n  165  ///@{\n  166: PRINTF_VISIBILITY\n  167  int  snprintf_(char* s, size_t count, const char* format, ...) ATTR_PRINTF(3, 4);\n  168: PRINTF_VISIBILITY\n  169  int vsnprintf_(char* s, size_t count, const char* format, va_list arg) ATTR_VPRINTF(3);\n  170  ///@}\n  ...\n  186   *\n  187   */\n  188: PRINTF_VISIBILITY\n  189  int fctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, ...) ATTR_PRINTF(3, 4);\n  190: PRINTF_VISIBILITY\n  191  int vfctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, va_list arg) ATTR_VPRINTF(3);\n  192  \n\n12 matches across 2 files\n\n\nSearching 981 files for \"PRINTF_VISIBILITY\"\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\test\\test_suite.cpp:\n   29  ///////////////////////////////////////////////////////////////////////////////\n   30  \n   31: // #define PRINTF_VISIBILITY static\n   32  #if PRINTF_INCLUDE_CONFIG_H\n   33  #include <printf_config.h>\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\src\\printf\\printf.h:\n   80  // e.g. make them static so as not to clash with other objects also\n   81  // using them.\n   82: #ifndef PRINTF_VISIBILITY\n   83: #define PRINTF_VISIBILITY\n   84  #endif\n   85  \n   ..\n  103   * @param c the single character to print\n  104   */\n  105: PRINTF_VISIBILITY\n  106  void putchar_(char c);\n  107  \n  ...\n  120   */\n  121   ///@{\n  122: PRINTF_VISIBILITY\n  123  int printf_(const char* format, ...) ATTR_PRINTF(1, 2);\n  124: PRINTF_VISIBILITY\n  125  int vprintf_(const char* format, va_list arg) ATTR_VPRINTF(1);\n  126  ///@}\n  ...\n  141   */\n  142  ///@{\n  143: PRINTF_VISIBILITY\n  144  int  sprintf_(char* s, const char* format, ...) ATTR_PRINTF(2, 3);\n  145: PRINTF_VISIBILITY\n  146  int vsprintf_(char* s, const char* format, va_list arg) ATTR_VPRINTF(2);\n  147  ///@}\n  ...\n  164   */\n  165  ///@{\n  166: PRINTF_VISIBILITY\n  167  int  snprintf_(char* s, size_t count, const char* format, ...) ATTR_PRINTF(3, 4);\n  168: PRINTF_VISIBILITY\n  169  int vsnprintf_(char* s, size_t count, const char* format, va_list arg) ATTR_VPRINTF(3);\n  170  ///@}\n  ...\n  186   *\n  187   */\n  188: PRINTF_VISIBILITY\n  189  int fctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, ...) ATTR_PRINTF(3, 4);\n  190: PRINTF_VISIBILITY\n  191  int vfctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, va_list arg) ATTR_VPRINTF(3);\n  192  \n\n12 matches across 2 files\n\n\nSearching 981 files for \"PRINTF_VISIBILITY\"\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\test\\test_suite.cpp:\n   29  ///////////////////////////////////////////////////////////////////////////////\n   30  \n   31: #define PRINTF_VISIBILITY static\n   32  #if PRINTF_INCLUDE_CONFIG_H\n   33  #include <printf_config.h>\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\src\\printf\\printf.h:\n   80  // e.g. make them static so as not to clash with other objects also\n   81  // using them.\n   82: #ifndef PRINTF_VISIBILITY\n   83: #define PRINTF_VISIBILITY\n   84  #endif\n   85  \n   ..\n  103   * @param c the single character to print\n  104   */\n  105: PRINTF_VISIBILITY\n  106  void putchar_(char c);\n  107  \n  ...\n  120   */\n  121   ///@{\n  122: PRINTF_VISIBILITY\n  123  int printf_(const char* format, ...) ATTR_PRINTF(1, 2);\n  124: PRINTF_VISIBILITY\n  125  int vprintf_(const char* format, va_list arg) ATTR_VPRINTF(1);\n  126  ///@}\n  ...\n  141   */\n  142  ///@{\n  143: PRINTF_VISIBILITY\n  144  int  sprintf_(char* s, const char* format, ...) ATTR_PRINTF(2, 3);\n  145: PRINTF_VISIBILITY\n  146  int vsprintf_(char* s, const char* format, va_list arg) ATTR_VPRINTF(2);\n  147  ///@}\n  ...\n  164   */\n  165  ///@{\n  166: PRINTF_VISIBILITY\n  167  int  snprintf_(char* s, size_t count, const char* format, ...) ATTR_PRINTF(3, 4);\n  168: PRINTF_VISIBILITY\n  169  int vsnprintf_(char* s, size_t count, const char* format, va_list arg) ATTR_VPRINTF(3);\n  170  ///@}\n  ...\n  186   *\n  187   */\n  188: PRINTF_VISIBILITY\n  189  int fctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, ...) ATTR_PRINTF(3, 4);\n  190: PRINTF_VISIBILITY\n  191  int vfctprintf(void (*out)(char c, void* extra_arg), void* extra_arg, const char* format, va_list arg) ATTR_VPRINTF(3);\n  192  \n\n12 matches across 2 files\n\n\nSearching 981 files for \"ISO C99 requires whitespace after the macro name\"\n\n0 matches\n\nSearching 981 files for \"ISO C99\"\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\openlibm\\test\\libm-test.c:\n   78     is also tested.  Correct handling of exceptions is checked\n   79     against.  These implemented tests should check all cases that are\n   80:    specified in ISO C99.\n   81  \n   82     Exception testing: At the moment only divide-by-zero and invalid\n   ..\n 4386  #endif\n 4387  \n 4388:   /* Keep the tests a wee bit ordered (according to ISO C99).  */\n 4389    /* Classification macros:  */\n 4390    fpclassify_test ();\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 7971,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 123,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"cut",
					null,
					"AQAAADEAAAAAAAAAMQAAAAAAAABLAAAAIWxpYmMtc2tlbGV0b24vc3VicHJvamVjdHMvKi53cmFwCiFsaWJjLXNrZWxldG9uL3N1YnByb2plY3RzL3BhY2thZ2VmaWxlcy8K",
					"AQAAAAAAAAABAAAAfAAAAAAAAAAxAAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABQAAAAAAAAAFQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"paste",
					null,
					"AQAAABQAAAAAAAAAXwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAF4AAAAAAAAAXgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"swap_line_up",
					null,
					"AgAAAF8AAAAAAAAAXwAAAAAAAAAdAAAAbGliYy1za2VsZXRvbi9zdWJwcm9qZWN0cy8qKgo2AAAAAAAAAFMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAHZA"
				],
				[
					37,
					1,
					"swap_line_up",
					null,
					"AgAAADYAAAAAAAAANgAAAAAAAAAdAAAAbGliYy1za2VsZXRvbi9zdWJwcm9qZWN0cy8qKgoUAAAAAAAAADEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAHZA"
				],
				[
					42,
					1,
					"swap_line_up",
					null,
					"AgAAAFMAAAAAAAAAUwAAAAAAAAApAAAAIWxpYmMtc2tlbGV0b24vc3VicHJvamVjdHMvcGFja2FnZWZpbGVzLwoxAAAAAAAAAFoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAHZA"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AQAAAC8AAAAAAAAALwAAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "///////////////////////////////////////////////////////////////////////////////\n// @author (c) Eyal Rozenberg <eyalroz1@gmx.com>\n//             2021-2022, Haifa, Palestine/Israel\n// \\author (c) Marco Paland (info@paland.com)\n//             2017-2019, PALANDesign Hannover, Germany\n//\n// \\license The MIT License (MIT)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n//\n// \\brief printf unit tests\n//\n///////////////////////////////////////////////////////////////////////////////\n\n#define PRINTF_VISIBILITY static\n#if PRINTF_INCLUDE_CONFIG_H\n#include <printf_config.h>\n#endif\n#include <printf/printf.c>\n\n#if PRINTF_ALIAS_STANDARD_FUNCTION_NAMES_HARD\n// Disable aliasing so as not to interfere with the standard library headers\n# undef printf\n# undef sprintf_\n# undef vsprintf_\n# undef snprintf_\n# undef vsnprintf_\n# undef vprintf_\n#endif\n\n// use the 'catch' test framework\n#define CATCH_CONFIG_MAIN\n#include \"catch.hpp\"\n\n#include <cstring>\n#include <sstream>\n#include <cmath>\n#include <limits>\n#include <climits>\n#include <iostream>\n#include <iomanip>\n\n#if defined(__unix__) || defined(__unix) || (defined(__APPLE__) && defined(__MACH__)) || defined(__MINGW32__)\n#include <sys/types.h>\n#elif defined(_WIN32)\n#include <BaseTsd.h>\ntypedef SSIZE_T ssize_t;\n#else\n// Let's just cross our fingers and hope `ssize_t` is defined.\n#endif\n\n#if PRINTF_ALIAS_STANDARD_FUNCTION_NAMES_SOFT\n// Re-enable aliasing\n# define printf     printf_\n# define sprintf    sprintf_\n# define vsprintf   vsprintf_\n# define snprintf   snprintf_\n# define vsnprintf  vsnprintf_\n# define vprintf    vprintf_\n#endif\n\n\n#define CAPTURE_AND_PRINT(printer_, ...)                  \\\ndo {                                                      \\\n  INFO( #printer_  <<                                     \\\n     \" arguments (ignore the equations; interpret \\\"expr\" \\\n     \"\\\" := expr\\\" as just \\\"expr\\\"): \");                 \\\n  CAPTURE( __VA_ARGS__);                                  \\\n  printer_(__VA_ARGS__);                                  \\\n} while(0)\n\n#define CAPTURE_AND_PRINT_WITH_RETVAL(retval, printer_, ...) \\\ndo {                                                      \\\n  INFO( #printer_  <<                                     \\\n     \" arguments (ignore the equations; interpret \\\"expr\" \\\n     \"\\\" := expr\\\" as just \\\"expr\\\"): \");                 \\\n  CAPTURE( __VA_ARGS__);                                  \\\n  retval = printer_(__VA_ARGS__);                         \\\n} while(0)\n\n\n#define PRINTING_CHECK_WITH_BUF_SIZE(expected_, dummy, printer_, buffer_, buffer_size, ...) \\\ndo {                                                             \\\n  INFO( #printer_ << \" arguments, replicated ( \\\"arg := arg\\\" \"  \\\n  \"):\\n----\"); \\\n  CAPTURE( __VA_ARGS__);                                         \\\n  std::memset(buffer_, 0xCC, base_buffer_size);                  \\\n  printer_(buffer_, buffer_size, __VA_ARGS__);                   \\\n  if (!strcmp(buffer_, expected_)) {                             \\\n    buffer_[strlen(expected_) + 1] = '\\0';                       \\\n  }                                                              \\\n  INFO( \"----\");                                                 \\\n  INFO( \"Resulting buffer contents: \" << '\"' << buffer_ << '\"'); \\\n  CHECK(!strcmp(buffer_, expected_));                            \\\n} while(0)\n\n#define PRINTING_CHECK(expected_, dummy, printer_, buffer_, ...) \\\ndo {                                                             \\\n  INFO( #printer_ << \" arguments, replicated ( \\\"arg := arg\\\" \"  \\\n  \"):\\n----\"); \\\n  CAPTURE( __VA_ARGS__);                                         \\\n  std::memset(buffer_, 0xCC, base_buffer_size);                  \\\n  printer_(buffer_, __VA_ARGS__);                                \\\n  if (!strcmp(buffer_, expected_)) {                             \\\n    buffer_[strlen(expected_) + 1] = '\\0';                       \\\n  }                                                              \\\n  INFO( \"----\");                                                 \\\n  INFO( \"Resulting buffer contents: \" << '\"' << buffer_ << '\"'); \\\n  CHECK(!strcmp(buffer_, expected_));                            \\\n} while(0)\n\n// Multi-compiler-compatible local warning suppression\n\n#if defined(_MSC_VER)\n    #define DISABLE_WARNING_PUSH           __pragma(warning( push ))\n    #define DISABLE_WARNING_POP            __pragma(warning( pop ))\n    #define DISABLE_WARNING(warningNumber) __pragma(warning( disable : warningNumber ))\n\n    // TODO: find the right warning number for this\n    #define DISABLE_WARNING_PRINTF_FORMAT\n    #define DISABLE_WARNING_PRINTF_FORMAT_EXTRA_ARGS\n    #define DISABLE_WARNING_PRINTF_FORMAT_OVERFLOW\n    #define DISABLE_WARNING_PRINTF_FORMAT_INVALID_SPECIFIER\n\n#elif defined(__GNUC__) || defined(__clang__)\n    #define DO_PRAGMA(X) _Pragma(#X)\n    #define DISABLE_WARNING_PUSH           DO_PRAGMA(GCC diagnostic push)\n    #define DISABLE_WARNING_POP            DO_PRAGMA(GCC diagnostic pop)\n    #define DISABLE_WARNING(warningName)   DO_PRAGMA(GCC diagnostic ignored #warningName)\n\n    #define DISABLE_WARNING_PRINTF_FORMAT    DISABLE_WARNING(-Wformat)\n    #define DISABLE_WARNING_PRINTF_FORMAT_EXTRA_ARGS DISABLE_WARNING(-Wformat-extra-args)\n#if defined(__clang__)\n    #define DISABLE_WARNING_PRINTF_FORMAT_OVERFLOW\n    #define DISABLE_WARNING_PRINTF_FORMAT_INVALID_SPECIFIER DISABLE_WARNING(-Wformat-invalid-specifier)\n#else\n    #define DISABLE_WARNING_PRINTF_FORMAT_OVERFLOW DISABLE_WARNING(-Wformat-overflow)\n    #define DISABLE_WARNING_PRINTF_FORMAT_INVALID_SPECIFIER\n#endif\n#else\n    #define DISABLE_WARNING_PUSH\n    #define DISABLE_WARNING_POP\n    #define DISABLE_WARNING_PRINTF_FORMAT\n    #define DISABLE_WARNING_PRINTF_FORMAT_EXTRA_ARGS\n    #define DISABLE_WARNING_PRINTF_FORMAT_INVALID_SPECIFIER\n#endif\n\n#ifdef TEST_WITH_NON_STANDARD_FORMAT_STRINGS\nDISABLE_WARNING_PUSH\nDISABLE_WARNING_PRINTF_FORMAT\nDISABLE_WARNING_PRINTF_FORMAT_EXTRA_ARGS\nDISABLE_WARNING_PRINTF_FORMAT_INVALID_SPECIFIER\n#endif\n\n#if defined(_MSC_VER)\nDISABLE_WARNING(4996) // Discouragement of use of std::sprintf()\nDISABLE_WARNING(4310) // Casting to smaller type\nDISABLE_WARNING(4127) // Constant conditional expression\n#endif\n\nconstexpr const size_t base_buffer_size { 100 };\n\n// This macro is idempotent here, but for other platforms may\n// be defined differently\n#define mkstr(_str) _str\n\n// dummy putchar\nstatic char   printf_buffer[base_buffer_size];\nstatic size_t printf_idx = 0U;\n\nvoid putchar_(char character)\n{\n  printf_buffer[printf_idx++] = character;\n}\n\nvoid _out_fct(char character, void* arg)\n{\n  (void)arg;\n  printf_buffer[printf_idx++] = character;\n}\n\n#ifndef STRINGIFY\n#define STRINGIFY(_x) #_x\n#endif\n#define PRINTF_TEST_CASE(unstringified_name)  TEST_CASE(STRINGIFY(unstringified_name), \"[]\")\n\nPRINTF_TEST_CASE(printf) {\n  printf_idx = 0U;\n  memset(printf_buffer, 0xCC, base_buffer_size);\n  INFO(\"printf_ format string and arguments: \");\n  CAPTURE(\"% d\", 4232);\n  CHECK(printf_(\"% d\", 4232) == 5);\n  INFO(\"printf_ format string and arguments: \");\n  CAPTURE(\"% d\", 4232);\n  CHECK(printf_buffer[5] == (char)0xCC);\n  printf_buffer[5] = 0;\n  INFO(\"printf_ format string and arguments: \");\n  CAPTURE(\"% d\", 4232);\n  CHECK(!strcmp(printf_buffer, \" 4232\"));\n}\n\n\nPRINTF_TEST_CASE(fctprintf) {\n  printf_idx = 0U;\n  memset(printf_buffer, 0xCC, base_buffer_size);\n  fctprintf(&_out_fct, nullptr, \"This is a test of %X\", 0x12EFU);\n  INFO(\"fctprintf format string and arguments: \");\n  CAPTURE(\"This is a test of %X\", 0x12EFU);\n  CHECK(!strncmp(printf_buffer, \"This is a test of 12EF\", 22U));\n  CHECK(printf_buffer[22] == (char)0xCC);\n}\n\n// output function type\ntypedef void (*out_fct_type_)(char character, void* arg);\n\n\nstatic void vfctprintf_builder_1(out_fct_type_ f, char* buffer, ...)\n{\n  va_list args;\n  va_start(args, buffer);\n  CAPTURE_AND_PRINT(vfctprintf, f, nullptr, \"This is a test of %X\", args);\n  va_end(args);\n}\n\nPRINTF_TEST_CASE(vfctprintf) {\n  printf_idx = 0U;\n  memset(printf_buffer, 0xCC, base_buffer_size);\n  vfctprintf_builder_1(&_out_fct, nullptr, 0x12EFU);\n  CHECK(!strncmp(printf_buffer, \"This is a test of 12EF\", 22U));\n  CHECK(printf_buffer[22] == (char)0xCC);\n}\n\nPRINTF_TEST_CASE(snprintf_) {\n  char buffer[base_buffer_size];\n  PRINTING_CHECK_WITH_BUF_SIZE(\"-1000\", ==, snprintf_, buffer, base_buffer_size, \"%d\", -1000);\n  PRINTING_CHECK_WITH_BUF_SIZE(\"-1\",    ==, snprintf_, buffer, 3U, \"%d\", -1000);\n}\n\nstatic void vprintf_builder_1(char* buffer, ...)\n{\n  va_list args;\n  va_start(args, buffer);\n  vprintf_(\"%d\", args);\n  va_end(args);\n}\n\nstatic void vsprintf_builder_1(char* buffer, ...)\n{\n  va_list args;\n  va_start(args, buffer);\n  CAPTURE_AND_PRINT(vsprintf_, buffer, \"%d\", args);\n  va_end(args);\n}\n\nstatic void vsnprintf_builder_1(char* buffer, ...)\n{\n  va_list args;\n  va_start(args, buffer);\n  CAPTURE_AND_PRINT(vsnprintf_, buffer, 100U, \"%d\", args);\n  va_end(args);\n}\n\nstatic void vsprintf_builder_3(char* buffer, ...)\n{\n  va_list args;\n  va_start(args, buffer);\n  CAPTURE_AND_PRINT(vsprintf_, buffer, \"%d %d %s\", args);\n  va_end(args);\n}\n\nstatic void vsnprintf_builder_3(char* buffer, ...)\n{\n  va_list args;\n  va_start(args, buffer);\n  CAPTURE_AND_PRINT(vsnprintf_, buffer, 100U, \"%d %d %s\", args);\n  va_end(args);\n}\n\n\nPRINTF_TEST_CASE(vprintf) {\n  char buffer[base_buffer_size];\n  printf_idx = 0U;\n  memset(printf_buffer, 0xCC, base_buffer_size);\n  vprintf_builder_1(buffer, 2345);\n  CHECK(printf_buffer[4] == (char)0xCC);\n  printf_buffer[4] = 0;\n  CHECK(!strcmp(printf_buffer, \"2345\"));\n}\n\n\nPRINTF_TEST_CASE(vsprintf) {\n  char buffer[base_buffer_size];\n\n  vsprintf_builder_1(buffer, -1);\n  CHECK(!strcmp(buffer, \"-1\"));\n\n  vsprintf_builder_3(buffer, 3, -1000, \"test\");\n  CHECK(!strcmp(buffer, \"3 -1000 test\"));\n}\n\n\nPRINTF_TEST_CASE(vsnprintf_) {\n  char buffer[base_buffer_size];\n\n  vsnprintf_builder_1(buffer, -1);\n  CHECK(!strcmp(buffer, \"-1\"));\n\n  vsnprintf_builder_3(buffer, 3, -1000, \"test\");\n  CHECK(!strcmp(buffer, \"3 -1000 test\"));\n}\n\nPRINTF_TEST_CASE(writeback_specifier) {\n  char buffer[base_buffer_size];\n\n  struct {\n    char char_;\n    short short_;\n    int int_;\n    long long_;\n    long long long_long_;\n  } num_written;\n\n\n  num_written.int_ = 1234;\n  printf_(\"%n\", &num_written.int_);\n  CHECK(num_written.int_ == 0);\n  num_written.int_ = 1234;\n  printf_(\"foo%nbar\", &num_written.int_);\n  CHECK(num_written.int_ == 3);\n\n  num_written.int_ = 1234;\n  PRINTING_CHECK(\"\", ==, sprintf_, buffer, \"%n\", &num_written.int_);\n  CHECK(num_written.int_ == 0);\n  num_written.int_ = 1234;\n  PRINTING_CHECK(\"foobar\", ==, sprintf_, buffer, \"foo%nbar\", &num_written.int_);\n  CHECK(num_written.int_ == 3);\n}\n\nPRINTF_TEST_CASE(ret_value)\n{\n  char buffer[base_buffer_size];\n  int ret;\n\n  ret = snprintf_(buffer, 6, \"0%s\", \"1234\");\n  CHECK(!strcmp(buffer, \"01234\"));\n  CHECK(ret == 5);\n\n  std::memset(buffer, 0xCC, sizeof(buffer));\n  ret = snprintf_(buffer, 6, \"0%s\", \"12345\");\n  CHECK(!strcmp(buffer, \"01234\"));\n  CHECK(ret == 6);  // \"5\" is truncated\n\n  std::memset(buffer, 0xCC, sizeof(buffer));\n  ret = snprintf_(buffer, 6, \"0%s\", \"1234567\");\n  CHECK(!strcmp(buffer, \"01234\"));\n  CHECK(ret == 8);  // \"567\" are truncated\n\n  std::memset(buffer, 0xCC, sizeof(buffer));\n  DISABLE_WARNING_PUSH\n  DISABLE_WARNING_PRINTF_FORMAT_OVERFLOW\n  ret = snprintf_(buffer, 6, \"0%s\", (const char *) NULL);\n  DISABLE_WARNING_POP\n  CHECK(!strcmp(buffer, \"0(nul\"));\n  CHECK(ret == 7);  // \"l)\" is truncated\n\n  std::memset(buffer, 0xCC, sizeof(buffer));\n  ret = snprintf_(buffer, 10, \"hello, world\");\n  CHECK(ret == 12);\n\n  std::memset(buffer, 0xCC, sizeof(buffer));\n  ret = snprintf_(buffer, 3, \"%d\", 10000);\n  CHECK(ret == 5);\n  CHECK(strlen(buffer) == 2U);\n  CHECK(buffer[0] == '1');\n  CHECK(buffer[1] == '0');\n  CHECK(buffer[2] == '\\0');\n}\n\n#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS\nPRINTF_TEST_CASE(brute_force_float)\n{\n  char buffer[base_buffer_size];\n#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS\n  // brute force float\n  bool any_failed = false;\n  std::stringstream sstr;\n  sstr.precision(5);\n  for (float i = -100000; i < 100000; i += (float) 1) {\n    sprintf_(buffer, \"%.5f\", (double) (i / 10000));\n    sstr.str(\"\");\n    sstr << std::fixed << i / 10000;\n    if (strcmp(buffer, sstr.str().c_str()) != 0) {\n      std::cerr\n      << \": sprintf_(\\\"%.5f\\\", \" << std::setw(6) << i << \") = \" << std::setw(10) << buffer << \" , \"\n      << \"expected \" << std::setw(10) << sstr.str().c_str() << \"\\n\";\n      any_failed = true;\n    }\n  }\n  CHECK(not any_failed);\n\n#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS\n  // This is tested when _both_ decimal and exponential specifiers are supported.\n  // brute force exp\n  sstr.setf(std::ios::scientific, std::ios::floatfield);\n  any_failed = false;\n  long n = 0;\n  for (float i = (float) -1e20; i < (float) 1e20; i += (float) 1e15, n++) {\n    sprintf_(buffer, \"%.5f\", (double) i);\n    sstr.str(\"\");\n    sstr << i;\n    if (strcmp(buffer, sstr.str().c_str()) != 0) {\n      std::cerr\n      << n << \": sprintf_(\\\"%.5f\\\", \" << std::setw(18) << std::setprecision(30) << i << \") = \" << std::setw(15)\n      << buffer << \" , \"\n      << \"expected \" << std::setw(12) << sstr.str().c_str() << \"\\n\";\n      any_failed = true;\n    }\n  }\n  CHECK(not any_failed);\n#endif\n#endif\n}\n\n#endif // PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS\n\n\n#include \"test_suite_main_testcases.hpp\"\n\n#ifdef TEST_WITH_NON_STANDARD_FORMAT_STRINGS\nDISABLE_WARNING_POP\n#endif\n\n",
			"file": "libc-skeleton/subprojects/printf/test/test_suite.cpp",
			"file_size": 14410,
			"file_write_time": 133598077387038411,
			"redo_stack":
			[
				[
					18,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAOQFAAAAAAAA5AUAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAA5wUAAAAAAADnBQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 14407,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "libc-skeleton/include/stdio.h",
			"settings":
			{
				"buffer_size": 4878,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "libc-skeleton/src/meson.build",
			"settings":
			{
				"buffer_size": 6779,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					82,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFMRAAAAAAAAVBEAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "libc_include"
					},
					"DAAAAFQRAAAAAAAAVREAAAAAAAAAAAAAVREAAAAAAABWEQAAAAAAAAAAAABWEQAAAAAAAFcRAAAAAAAAAAAAAFcRAAAAAAAAWBEAAAAAAAAAAAAAWBEAAAAAAABZEQAAAAAAAAAAAABZEQAAAAAAAFoRAAAAAAAAAAAAAFoRAAAAAAAAWxEAAAAAAAAAAAAAWxEAAAAAAABcEQAAAAAAAAAAAABcEQAAAAAAAF0RAAAAAAAAAAAAAF0RAAAAAAAAXhEAAAAAAAAAAAAAXhEAAAAAAABfEQAAAAAAAAAAAABfEQAAAAAAAGARAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "s_sys"
					},
					"BQAAAGARAAAAAAAAYREAAAAAAAAAAAAAYREAAAAAAABiEQAAAAAAAAAAAABiEQAAAAAAAGMRAAAAAAAAAAAAAGMRAAAAAAAAZBEAAAAAAAAAAAAAZBEAAAAAAABlEQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGURAAAAAAAAZhEAAAAAAAAAAAAAZhEAAAAAAABnEQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": " include_direct"
					},
					"DwAAAGcRAAAAAAAAaBEAAAAAAAAAAAAAaBEAAAAAAABpEQAAAAAAAAAAAABpEQAAAAAAAGoRAAAAAAAAAAAAAGoRAAAAAAAAaxEAAAAAAAAAAAAAaxEAAAAAAABsEQAAAAAAAAAAAABsEQAAAAAAAG0RAAAAAAAAAAAAAG0RAAAAAAAAbhEAAAAAAAAAAAAAbhEAAAAAAABvEQAAAAAAAAAAAABvEQAAAAAAAHARAAAAAAAAAAAAAHARAAAAAAAAcREAAAAAAAAAAAAAcREAAAAAAAByEQAAAAAAAAAAAAByEQAAAAAAAHMRAAAAAAAAAAAAAHMRAAAAAAAAdBEAAAAAAAAAAAAAdBEAAAAAAAB1EQAAAAAAAAAAAAB1EQAAAAAAAHYRAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "ories"
					},
					"BQAAAHYRAAAAAAAAdxEAAAAAAAAAAAAAdxEAAAAAAAB4EQAAAAAAAAAAAAB4EQAAAAAAAHkRAAAAAAAAAAAAAHkRAAAAAAAAehEAAAAAAAAAAAAAehEAAAAAAAB7EQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					90,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHsRAAAAAAAAfREAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					91,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHwRAAAAAAAAfhEAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ".../include"
					},
					"CwAAAH0RAAAAAAAAfhEAAAAAAAAAAAAAfhEAAAAAAAB/EQAAAAAAAAAAAAB/EQAAAAAAAIARAAAAAAAAAAAAAIARAAAAAAAAgREAAAAAAAAAAAAAgREAAAAAAACCEQAAAAAAAAAAAACCEQAAAAAAAIMRAAAAAAAAAAAAAIMRAAAAAAAAhBEAAAAAAAAAAAAAhBEAAAAAAACFEQAAAAAAAAAAAACFEQAAAAAAAIYRAAAAAAAAAAAAAIYRAAAAAAAAhxEAAAAAAAAAAAAAhxEAAAAAAACIEQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIkRAAAAAAAAihEAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " is_system"
					},
					"CgAAAIoRAAAAAAAAixEAAAAAAAAAAAAAixEAAAAAAACMEQAAAAAAAAAAAACMEQAAAAAAAI0RAAAAAAAAAAAAAI0RAAAAAAAAjhEAAAAAAAAAAAAAjhEAAAAAAACPEQAAAAAAAAAAAACPEQAAAAAAAJARAAAAAAAAAAAAAJARAAAAAAAAkREAAAAAAAAAAAAAkREAAAAAAACSEQAAAAAAAAAAAACSEQAAAAAAAJMRAAAAAAAAAAAAAJMRAAAAAAAAlBEAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJQRAAAAAAAAlREAAAAAAAAAAAAAlREAAAAAAACWEQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					98,
					2,
					"left_delete",
					null,
					"AgAAAJURAAAAAAAAlREAAAAAAAABAAAAPZQRAAAAAAAAlBEAAAAAAAABAAAAIA",
					"AQAAAA"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "=true"
					},
					"BQAAAJQRAAAAAAAAlREAAAAAAAAAAAAAlREAAAAAAACWEQAAAAAAAAAAAACWEQAAAAAAAJcRAAAAAAAAAAAAAJcRAAAAAAAAmBEAAAAAAAAAAAAAmBEAAAAAAACZEQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAJQRAAAAAAAAlREAAAAAAAAAAAAAlREAAAAAAACVEQAAAAAAAAEAAAA9",
					"AQAAAA"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJURAAAAAAAAlhEAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAsEAAAAAAAADAQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "gd"
					},
					"AgAAAAwEAAAAAAAADQQAAAAAAAAAAAAADQQAAAAAAAAOBAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "toa_includes"
					},
					"DAAAAA4EAAAAAAAADwQAAAAAAAAAAAAADwQAAAAAAAAQBAAAAAAAAAAAAAAQBAAAAAAAABEEAAAAAAAAAAAAABEEAAAAAAAAEgQAAAAAAAAAAAAAEgQAAAAAAAATBAAAAAAAAAAAAAATBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAFQQAAAAAAAAAAAAAFQQAAAAAAAAWBAAAAAAAAAAAAAAWBAAAAAAAABcEAAAAAAAAAAAAABcEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABoEAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "_sys"
					},
					"BAAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAAB0EAAAAAAAAAAAAAB0EAAAAAAAAHgQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAB4EAAAAAAAAHwQAAAAAAAAAAAAAHwQAAAAAAAAgBAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " include_"
					},
					"CQAAACAEAAAAAAAAIQQAAAAAAAAAAAAAIQQAAAAAAAAiBAAAAAAAAAAAAAAiBAAAAAAAACMEAAAAAAAAAAAAACMEAAAAAAAAJAQAAAAAAAAAAAAAJAQAAAAAAAAlBAAAAAAAAAAAAAAlBAAAAAAAACYEAAAAAAAAAAAAACYEAAAAAAAAJwQAAAAAAAAAAAAAJwQAAAAAAAAoBAAAAAAAAAAAAAAoBAAAAAAAACkEAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					127,
					1,
					"left_delete",
					null,
					"AQAAACgEAAAAAAAAKAQAAAAAAAABAAAAXw",
					"AQAAAA"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAACgEAAAAAAAAKQQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					129,
					1,
					"left_delete",
					null,
					"AQAAACgEAAAAAAAAKAQAAAAAAAABAAAAXw",
					"AQAAAA"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAACgEAAAAAAAAKQQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					131,
					1,
					"left_delete",
					null,
					"AQAAACgEAAAAAAAAKAQAAAAAAAABAAAAXw",
					"AQAAAA"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAACgEAAAAAAAAKQQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "directories"
					},
					"CwAAACkEAAAAAAAAKgQAAAAAAAAAAAAAKgQAAAAAAAArBAAAAAAAAAAAAAArBAAAAAAAACwEAAAAAAAAAAAAACwEAAAAAAAALQQAAAAAAAAAAAAALQQAAAAAAAAuBAAAAAAAAAAAAAAuBAAAAAAAAC8EAAAAAAAAAAAAAC8EAAAAAAAAMAQAAAAAAAAAAAAAMAQAAAAAAAAxBAAAAAAAAAAAAAAxBAAAAAAAADIEAAAAAAAAAAAAADIEAAAAAAAAMwQAAAAAAAAAAAAAMwQAAAAAAAA0BAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					136,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADQEAAAAAAAANgQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					137,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADUEAAAAAAAANwQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					138,
					1,
					"insert",
					{
						"characters": "gdtoa/includ"
					},
					"DAAAADYEAAAAAAAANwQAAAAAAAAAAAAANwQAAAAAAAA4BAAAAAAAAAAAAAA4BAAAAAAAADkEAAAAAAAAAAAAADkEAAAAAAAAOgQAAAAAAAAAAAAAOgQAAAAAAAA7BAAAAAAAAAAAAAA7BAAAAAAAADwEAAAAAAAAAAAAADwEAAAAAAAAPQQAAAAAAAAAAAAAPQQAAAAAAAA+BAAAAAAAAAAAAAA+BAAAAAAAAD8EAAAAAAAAAAAAAD8EAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABBBAAAAAAAAAAAAABBBAAAAAAAAEIEAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAEIEAAAAAAAAQwQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEQEAAAAAAAARQQAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " is_system:"
					},
					"CwAAAEUEAAAAAAAARgQAAAAAAAAAAAAARgQAAAAAAABHBAAAAAAAAAAAAABHBAAAAAAAAEgEAAAAAAAAAAAAAEgEAAAAAAAASQQAAAAAAAAAAAAASQQAAAAAAABKBAAAAAAAAAAAAABKBAAAAAAAAEsEAAAAAAAAAAAAAEsEAAAAAAAATAQAAAAAAAAAAAAATAQAAAAAAABNBAAAAAAAAAAAAABNBAAAAAAAAE4EAAAAAAAAAAAAAE4EAAAAAAAATwQAAAAAAAAAAAAATwQAAAAAAABQBAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAFAEAAAAAAAAUQQAAAAAAAAAAAAAUQQAAAAAAABSBAAAAAAAAAAAAABSBAAAAAAAAFMEAAAAAAAAAAAAAFMEAAAAAAAAVAQAAAAAAAAAAAAAVAQAAAAAAABVBAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAA8FAAAAAAAAEAUAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "sys"
					},
					"AwAAABAFAAAAAAAAEQUAAAAAAAAAAAAAEQUAAAAAAAASBQAAAAAAAAAAAAASBQAAAAAAABMFAAAAAAAAAAAAAA",
					"AQAAAA"
				],
				[
					302,
					2,
					"right_delete",
					null,
					"AgAAAB4EAAAAAAAAHgQAAAAAAAABAAAAIB4EAAAAAAAAHgQAAAAAAAABAAAALQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAB4EAAAAAAAAHwQAAAAAAAAAAAAAHwQAAAAAAAAgBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACAEAAAAAAAAIQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"left_delete",
					null,
					"AQAAACAEAAAAAAAAIAQAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "sys_includes"
					},
					"DQAAABIEAAAAAAAAEwQAAAAAAAAAAAAAEwQAAAAAAAATBAAAAAAAAAwAAABpbmNsdWRlc19zeXMTBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAFQQAAAAAAAAAAAAAFQQAAAAAAAAWBAAAAAAAAAAAAAAWBAAAAAAAABcEAAAAAAAAAAAAABcEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAZBAAAAAAAAAAAAAAZBAAAAAAAABoEAAAAAAAAAAAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAcBAAAAAAAAAAAAAAcBAAAAAAAAB0EAAAAAAAAAAAAAB0EAAAAAAAAHgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOUYAAAAAAAA5hgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA5RgAAAAAAADlGAAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYYAAAAAAAA5xgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA5hgAAAAAAADmGAAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAOcYAAAAAAAA6BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA5xgAAAAAAADnGAAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAOgYAAAAAAAA6RgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA6BgAAAAAAADoGAAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "toa_include"
					},
					"CwAAAOkYAAAAAAAA6hgAAAAAAAAAAAAA6hgAAAAAAADrGAAAAAAAAAAAAADrGAAAAAAAAOwYAAAAAAAAAAAAAOwYAAAAAAAA7RgAAAAAAAAAAAAA7RgAAAAAAADuGAAAAAAAAAAAAADuGAAAAAAAAO8YAAAAAAAAAAAAAO8YAAAAAAAA8BgAAAAAAAAAAAAA8BgAAAAAAADxGAAAAAAAAAAAAADxGAAAAAAAAPIYAAAAAAAAAAAAAPIYAAAAAAAA8xgAAAAAAAAAAAAA8xgAAAAAAAD0GAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA6RgAAAAAAADpGAAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPwWAAAAAAAA/RYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA9BgAAAAAAAD0GAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": " gdtoa_include"
					},
					"DgAAAP0WAAAAAAAA/hYAAAAAAAAAAAAA/hYAAAAAAAD/FgAAAAAAAAAAAAD/FgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAARcAAAAAAAAAAAAAARcAAAAAAAACFwAAAAAAAAAAAAACFwAAAAAAAAMXAAAAAAAAAAAAAAMXAAAAAAAABBcAAAAAAAAAAAAABBcAAAAAAAAFFwAAAAAAAAAAAAAFFwAAAAAAAAYXAAAAAAAAAAAAAAYXAAAAAAAABxcAAAAAAAAAAAAABxcAAAAAAAAIFwAAAAAAAAAAAAAIFwAAAAAAAAkXAAAAAAAAAAAAAAkXAAAAAAAAChcAAAAAAAAAAAAAChcAAAAAAAALFwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAA9RgAAAAAAAD1GAAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"insert",
					{
						"characters": "sys_"
					},
					"BAAAAJcXAAAAAAAAmBcAAAAAAAAAAAAAmBcAAAAAAACZFwAAAAAAAAAAAACZFwAAAAAAAJoXAAAAAAAAAAAAAJoXAAAAAAAAmxcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAxkAAAAAAAADGQAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAMEXAAAAAAAAwhcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAABxkAAAAAAAAHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"left_delete",
					null,
					"AQAAAMEXAAAAAAAAwRcAAAAAAAABAAAAXw",
					"AgAAAAAAAAABAAAACBkAAAAAAAAIGQAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "sys)"
					},
					"BAAAAMEXAAAAAAAAwhcAAAAAAAAAAAAAwhcAAAAAAADDFwAAAAAAAAAAAADDFwAAAAAAAMQXAAAAAAAAAAAAAMQXAAAAAAAAxRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAABxkAAAAAAAAHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"left_delete",
					null,
					"AQAAAMQXAAAAAAAAxBcAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAACxkAAAAAAAALGQAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAMQXAAAAAAAAxRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAChkAAAAAAAAKGQAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "sys_"
					},
					"BAAAANYXAAAAAAAA1xcAAAAAAAAAAAAA1xcAAAAAAADYFwAAAAAAAAAAAADYFwAAAAAAANkXAAAAAAAAAAAAANkXAAAAAAAA2hcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACxkAAAAAAAALGQAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"left_delete",
					null,
					"AQAAANUXAAAAAAAA1RcAAAAAAAAEAAAAX3N5cw",
					"AgAAAAAAAAABAAAADxkAAAAAAAAPGQAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKQXAAAAAAAApRcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAACxkAAAAAAAALGQAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": "gdtoa_sys"
					},
					"CQAAAKUXAAAAAAAAphcAAAAAAAAAAAAAphcAAAAAAACnFwAAAAAAAAAAAACnFwAAAAAAAKgXAAAAAAAAAAAAAKgXAAAAAAAAqRcAAAAAAAAAAAAAqRcAAAAAAACqFwAAAAAAAAAAAACqFwAAAAAAAKsXAAAAAAAAAAAAAKsXAAAAAAAArBcAAAAAAAAAAAAArBcAAAAAAACtFwAAAAAAAAAAAACtFwAAAAAAAK4XAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAADBkAAAAAAAAMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "_includes,"
					},
					"CgAAAK4XAAAAAAAArxcAAAAAAAAAAAAArxcAAAAAAACwFwAAAAAAAAAAAACwFwAAAAAAALEXAAAAAAAAAAAAALEXAAAAAAAAshcAAAAAAAAAAAAAshcAAAAAAACzFwAAAAAAAAAAAACzFwAAAAAAALQXAAAAAAAAAAAAALQXAAAAAAAAtRcAAAAAAAAAAAAAtRcAAAAAAAC2FwAAAAAAAAAAAAC2FwAAAAAAALcXAAAAAAAAAAAAALcXAAAAAAAAuBcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAFRkAAAAAAAAVGQAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "sys_"
					},
					"BAAAAJ4ZAAAAAAAAnxkAAAAAAAAAAAAAnxkAAAAAAACgGQAAAAAAAAAAAACgGQAAAAAAAKEZAAAAAAAAAAAAAKEZAAAAAAAAohkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKsZAAAAAAAArBkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "gdtoa_sys-"
					},
					"CgAAAKwZAAAAAAAArRkAAAAAAAAAAAAArRkAAAAAAACuGQAAAAAAAAAAAACuGQAAAAAAAK8ZAAAAAAAAAAAAAK8ZAAAAAAAAsBkAAAAAAAAAAAAAsBkAAAAAAACxGQAAAAAAAAAAAACxGQAAAAAAALIZAAAAAAAAAAAAALIZAAAAAAAAsxkAAAAAAAAAAAAAsxkAAAAAAAC0GQAAAAAAAAAAAAC0GQAAAAAAALUZAAAAAAAAAAAAALUZAAAAAAAAthkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"left_delete",
					null,
					"AQAAALUZAAAAAAAAtRkAAAAAAAABAAAALQ",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": "_includes,"
					},
					"CgAAALUZAAAAAAAAthkAAAAAAAAAAAAAthkAAAAAAAC3GQAAAAAAAAAAAAC3GQAAAAAAALgZAAAAAAAAAAAAALgZAAAAAAAAuRkAAAAAAAAAAAAAuRkAAAAAAAC6GQAAAAAAAAAAAAC6GQAAAAAAALsZAAAAAAAAAAAAALsZAAAAAAAAvBkAAAAAAAAAAAAAvBkAAAAAAAC9GQAAAAAAAAAAAAC9GQAAAAAAAL4ZAAAAAAAAAAAAAL4ZAAAAAAAAvxkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": "sys_"
					},
					"BAAAANsZAAAAAAAA3BkAAAAAAAAAAAAA3BkAAAAAAADdGQAAAAAAAAAAAADdGQAAAAAAAN4ZAAAAAAAAAAAAAN4ZAAAAAAAA3xkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"left_delete",
					null,
					"AQAAAA8FAAAAAAAADwUAAAAAAAAEAAAAX3N5cw",
					"AgAAAAAAAAABAAAAHxkAAAAAAAAfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"left_delete",
					null,
					"AQAAAMoRAAAAAAAAyhEAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAGxkAAAAAAAAbGQAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAYXAAAAAAAABxcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGhkAAAAAAAAaGQAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABsZAAAAAAAAHBkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGxkAAAAAAAAbGQAAAAAAAAAAAAAAAPC/"
				],
				[
					733,
					1,
					"cut",
					null,
					"AQAAAK0RAAAAAAAArREAAAAAAAADAAAAc3lz",
					"AgAAAAAAAAABAAAAHBkAAAAAAAAcGQAAAAAAAAAAAAAAAPC/"
				],
				[
					736,
					1,
					"left_delete",
					null,
					"AQAAAKwRAAAAAAAArBEAAAAAAAABAAAAXw",
					"AgAAAAAAAAABAAAAGRkAAAAAAAAZGQAAAAAAAAAAAAAAAPC/"
				],
				[
					742,
					1,
					"paste",
					null,
					"AQAAAKQRAAAAAAAApxEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGBkAAAAAAAAYGQAAAAAAAAAAAAAAAPC/"
				],
				[
					745,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAKcRAAAAAAAAqBEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAGxkAAAAAAAAbGQAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					1,
					"cut",
					null,
					"AQAAAE0WAAAAAAAATRYAAAAAAAARAAAAbGliY19uYXRpdmVfZmlsZXM",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					938,
					3,
					"right_delete",
					null,
					"AwAAAE0WAAAAAAAATRYAAAAAAAABAAAAIE0WAAAAAAAATRYAAAAAAAABAAAAK00WAAAAAAAATRYAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					943,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4WAAAAAAAAXxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					945,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAF8WAAAAAAAAYBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					946,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGAWAAAAAAAAYRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"paste",
					null,
					"AQAAAGEWAAAAAAAAchYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					980,
					1,
					"cut",
					null,
					"AQAAAN8XAAAAAAAA3xcAAAAAAAAiAAAAcHJpbnRmX2luY2x1ZGVzLCBvcGVubGlibV9pbmNsdWRlcw",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					982,
					2,
					"left_delete",
					null,
					"AgAAAN4XAAAAAAAA3hcAAAAAAAABAAAAIN0XAAAAAAAA3RcAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					988,
					1,
					"paste",
					null,
					"AQAAAI4XAAAAAAAAsBcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					990,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALAXAAAAAAAAsRcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					991,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEXAAAAAAAAshcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1008,
					1,
					"cut",
					null,
					"AQAAAOYZAAAAAAAA5hkAAAAAAAAiAAAAcHJpbnRmX2luY2x1ZGVzLCBvcGVubGlibV9pbmNsdWRlcw",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1010,
					2,
					"left_delete",
					null,
					"AgAAAOUZAAAAAAAA5RkAAAAAAAABAAAAIOQZAAAAAAAA5BkAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1013,
					1,
					"paste",
					null,
					"AQAAAJYZAAAAAAAAuBkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1015,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALgZAAAAAAAAuRkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1016,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALkZAAAAAAAAuhkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1061,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAKUVAAAAAAAAphUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAClFQAAAAAAAKUVAAAAAAAAAAAAAAAA8L8"
				],
				[
					1066,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAAUWAAAAAAAABhYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAFFgAAAAAAAAUWAAAAAAAAAAAAAAAA8L8"
				],
				[
					1073,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAC8VAAAAAAAAMBUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAvFQAAAAAAAC8VAAAAAAAAAAAAAAAA8L8"
				],
				[
					1078,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAANgUAAAAAAAA2RQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAADYFAAAAAAAANgUAAAAAAAAAAAAAAAA8L8"
				],
				[
					1177,
					1,
					"insert",
					{
						"characters": "native_"
					},
					"BwAAABwYAAAAAAAAHRgAAAAAAAAAAAAAHRgAAAAAAAAeGAAAAAAAAAAAAAAeGAAAAAAAAB8YAAAAAAAAAAAAAB8YAAAAAAAAIBgAAAAAAAAAAAAAIBgAAAAAAAAhGAAAAAAAAAAAAAAhGAAAAAAAACIYAAAAAAAAAAAAACIYAAAAAAAAIxgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAcGAAAAAAAABwYAAAAAAAAAAAAAAAA8L8"
				],
				[
					1195,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAACoaAAAAAAAAKxoAAAAAAAAAAAAAKxoAAAAAAAAsGgAAAAAAAAAAAAAsGgAAAAAAAC0aAAAAAAAAAAAAAC0aAAAAAAAALhoAAAAAAAAAAAAALhoAAAAAAAAvGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAqGgAAAAAAACoaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1251,
					1,
					"insert",
					{
						"characters": "libc"
					},
					"BAAAACUaAAAAAAAAJhoAAAAAAAAAAAAAJhoAAAAAAAAnGgAAAAAAAAAAAAAnGgAAAAAAACgaAAAAAAAAAAAAACgaAAAAAAAAKRoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAlGgAAAAAAACUaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1252,
					1,
					"insert",
					{
						"characters": "_compile_fl"
					},
					"CwAAACkaAAAAAAAAKhoAAAAAAAAAAAAAKhoAAAAAAAArGgAAAAAAAAAAAAArGgAAAAAAACwaAAAAAAAAAAAAACwaAAAAAAAALRoAAAAAAAAAAAAALRoAAAAAAAAuGgAAAAAAAAAAAAAuGgAAAAAAAC8aAAAAAAAAAAAAAC8aAAAAAAAAMBoAAAAAAAAAAAAAMBoAAAAAAAAxGgAAAAAAAAAAAAAxGgAAAAAAADIaAAAAAAAAAAAAADIaAAAAAAAAMxoAAAAAAAAAAAAAMxoAAAAAAAA0GgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAApGgAAAAAAACkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1253,
					1,
					"insert",
					{
						"characters": "ags"
					},
					"AwAAADQaAAAAAAAANRoAAAAAAAAAAAAANRoAAAAAAAA2GgAAAAAAAAAAAAA2GgAAAAAAADcaAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA0GgAAAAAAADQaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1254,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAADcaAAAAAAAAOBoAAAAAAAAAAAAAOBoAAAAAAAA5GgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA3GgAAAAAAADcaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1255,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkaAAAAAAAAOhoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAA5GgAAAAAAADkaAAAAAAAAAAAAAAAA8L8"
				],
				[
					1264,
					1,
					"paste",
					null,
					"AQAAABcYAAAAAAAAKxgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAARhIAAAAAAABOEgAAAAAAAAAAAAAAAPC/AQAAAAEAAAAXGAAAAAAAABcYAAAAAAAAAAAAAADAY0A"
				]
			]
		},
		{
			"file": "libc-skeleton/test/string/memcmp.c",
			"settings":
			{
				"buffer_size": 901,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "libc-skeleton/test/meson.build",
			"settings":
			{
				"buffer_size": 2143,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "reference/005-cross-compilation/subprojects/printf/printf.h",
			"settings":
			{
				"buffer_size": 4865,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "libc-skeleton/buildresults/compile_commands.json",
			"settings":
			{
				"buffer_size": 314199,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "meson_build.sublime-project",
			"settings":
			{
				"buffer_size": 248,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"insert",
					{
						"characters": "libc-skeleton/"
					},
					"DgAAALwAAAAAAAAAvQAAAAAAAAAAAAAAvQAAAAAAAAC+AAAAAAAAAAAAAAC+AAAAAAAAAL8AAAAAAAAAAAAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAADBAAAAAAAAAMIAAAAAAAAAAAAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAAAAAAAAAC8AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "",
			"redo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "test/"
					},
					"BQAAAAQAAAAAAAAABAAAAAAAAAABAAAALwMAAAAAAAAAAwAAAAAAAAABAAAAdAIAAAAAAAAAAgAAAAAAAAABAAAAcwEAAAAAAAAAAQAAAAAAAAABAAAAZQAAAAAAAAAAAAAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows"
			}
		},
		{
			"file": "libc-skeleton/src/stdio/putchar.c",
			"settings":
			{
				"buffer_size": 94,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"insert",
					{
						"characters": "printf/"
					},
					"BwAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"right_delete",
					null,
					"AQAAAAoAAAAAAAAACgAAAAAAAAAGAAAAcHJpbnRm",
					"AQAAAAAAAAABAAAACgAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"right_delete",
					null,
					"AQAAAAoAAAAAAAAACgAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"left_delete",
					null,
					"AQAAAD4AAAAAAAAAPgAAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAEUAAAAAAAAARgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/src/stdio/putchar_native.c",
			"settings":
			{
				"buffer_size": 145,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					301,
					1,
					"left_delete",
					null,
					"AQAAAGIAAAAAAAAAYgAAAAAAAAABAAAAXw",
					"AgAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/AQAAAAEAAABjAAAAAAAAAGMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAGkAAAAAAAAAagAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/AQAAAAEAAABpAAAAAAAAAGkAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "    \"directory\": \"/mnt/c/code/EA/meson_build/libc-skeleton/buildresults\",\n    \"command\": \"cc -Isrc/libc_native.a.p -Isrc -I../src -I../include -I../arch/x86_64/include -I../src/gdtoa/include -fdiagnostics-color=always -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -Wpedantic -std=c11 -Og -g -DDEBUG -DGDTOA_HOST_DEBUG -Wno-unknown-pragmas -Wno-nonnull -Wno-nonnull-compare -Wno-stringop-truncation -fPIC -DPRINTF_ALIAS_STANDARD_FUNCTION_NAMES_HARD -isystem../subprojects/openlibm/src -isystem../subprojects/openlibm/include -isystem../subprojects/printf/src/printf -isystem../subprojects/printf/src -DDISABLE_UNIMPLEMENTED_LIBC_APIS -nostdinc -MD -MQ src/libc_native.a.p/stdio_putchar.c.o -MF src/libc_native.a.p/stdio_putchar.c.o.d -o src/libc_native.a.p/stdio_putchar.c.o -c ../src/stdio/putchar.c\",\n    \"file\": \"../src/stdio/putchar.c\",\n    \"output\": \"src/libc_native.a.p/stdio_putchar.c.o\"",
			"settings":
			{
				"buffer_size": 898,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAggMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/subprojects/printf/meson.build",
			"settings":
			{
				"buffer_size": 1128,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					68,
					1,
					"left_delete",
					null,
					"AQAAAD4BAAAAAAAAPgEAAAAAAAARAAAALCBpc19zeXN0ZW06IHRydWU",
					"AQAAAAAAAAABAAAAPgEAAAAAAABPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAD4BAAAAAAAAPwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgEAAAAAAAA+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": " is_system:"
					},
					"CwAAAD8BAAAAAAAAQAEAAAAAAAAAAAAAQAEAAAAAAABBAQAAAAAAAAAAAABBAQAAAAAAAEIBAAAAAAAAAAAAAEIBAAAAAAAAQwEAAAAAAAAAAAAAQwEAAAAAAABEAQAAAAAAAAAAAABEAQAAAAAAAEUBAAAAAAAAAAAAAEUBAAAAAAAARgEAAAAAAAAAAAAARgEAAAAAAABHAQAAAAAAAAAAAABHAQAAAAAAAEgBAAAAAAAAAAAAAEgBAAAAAAAASQEAAAAAAAAAAAAASQEAAAAAAABKAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAEoBAAAAAAAASwEAAAAAAAAAAAAASwEAAAAAAABMAQAAAAAAAAAAAABMAQAAAAAAAE0BAAAAAAAAAAAAAE0BAAAAAAAATgEAAAAAAAAAAAAATgEAAAAAAABPAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgEAAAAAAABKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAACoBAAAAAAAAKwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAACsBAAAAAAAALAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwEAAAAAAAArAQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAACwBAAAAAAAALQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAEAAAAAAAAsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAC0BAAAAAAAALgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQEAAAAAAAAtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4BAAAAAAAALwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgEAAAAAAAAuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "./"
					},
					"AgAAADABAAAAAAAAMQEAAAAAAAAAAAAAMQEAAAAAAAAyAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAEAAAAAAAAwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "./"
					},
					"AgAAADkBAAAAAAAAOgEAAAAAAAAAAAAAOgEAAAAAAAA7AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQEAAAAAAAA5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AgAAAP8BAAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAEAAAAt",
					"AQAAAAAAAAABAAAAAAIAAAAAAAD/AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/build/cross/armcc.txt",
			"settings":
			{
				"buffer_size": 613,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAZAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAAGQCAAAAAAAAZQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAIAAAAAAABkAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/build/cross/armclang.txt",
			"settings":
			{
				"buffer_size": 693,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAtAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"ensure_newline_at_eof",
					null,
					"AQAAALQCAAAAAAAAtQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAIAAAAAAAC0AgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/build/cross/nrf52840.txt",
			"settings":
			{
				"buffer_size": 807,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				],
				[
					"Packages/User/cmake.sublime-build",
					"new sublime build"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"Packages/User/cmake.sublime-build",
				""
			]
		],
		[
			[
				[
					"testNucleo - all",
					""
				],
				[
					"testNucleo - clean",
					""
				],
				[
					"testNucleo - edit_cache",
					""
				],
				[
					"testNucleo - rebuild_cache",
					""
				],
				[
					"testNucleo - testNucleo",
					""
				],
				[
					"testNucleo - testNucleo.bin",
					""
				],
				[
					"testNucleo - testNucleo.hex",
					""
				],
				[
					"testNucleo - testNucleo/fast",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"testNucleo - all",
				""
			]
		],
		[
			[
				[
					"testNucleo - all",
					""
				],
				[
					"testNucleo - clean",
					""
				],
				[
					"testNucleo - edit_cache",
					""
				],
				[
					"testNucleo - rebuild_cache",
					""
				],
				[
					"testNucleo - testNucleo",
					""
				],
				[
					"testNucleo - testNucleo.bin",
					""
				],
				[
					"testNucleo - testNucleo.hex",
					""
				],
				[
					"testNucleo - testNucleo/fast",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"testNucleo - all",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"projectedit",
				"Project: Edit Project"
			],
			[
				"project",
				"Project: Edit Project"
			],
			[
				"lsp settings",
				"Preferences: LSP-clangd Settings"
			],
			[
				"open panel",
				"Meson: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: List Shells"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pya",
				"PyYapf: Format Selection"
			],
			[
				"debugger open",
				"Debugger: Open"
			],
			[
				"open debu",
				"Debugger: Open"
			],
			[
				"debugger configurat",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger settin",
				"Preferences: Debugger Settings"
			],
			[
				"build ",
				"Build With: Python"
			],
			[
				"debugger ",
				"Debugger: Open"
			],
			[
				"debug",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger setting",
				"Preferences: Debugger Settings"
			],
			[
				"debugger",
				"Debugger: Install Adapters"
			],
			[
				"doxyge",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"todo",
				"TodoReview: Project and Open Files"
			],
			[
				"doxygen",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"lsp form",
				"LSP: Format Selection"
			],
			[
				"lsp format",
				"LSP: Format Selection"
			],
			[
				"format",
				"LSP: Format Selection"
			],
			[
				"lsp",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp trou",
				"LSP: Troubleshoot Server"
			],
			[
				"clangd",
				"Preferences: LSP-clangd Settings"
			],
			[
				"lsp troub",
				"LSP: Troubleshoot Server"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"package control ",
				"Package Control: Satisfy Dependencies"
			],
			[
				"package control upd",
				"Package Control: Upgrade Package"
			],
			[
				"clangd ",
				"Preferences: LSP-clangd Settings"
			],
			[
				"lsp server",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp ser",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp rest",
				"LSP: Restart Server"
			],
			[
				"lsp forma",
				"LSP: Format Selection"
			],
			[
				"debugger com",
				"Debugger: Input Command"
			],
			[
				"debugger configu",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger confi",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger adapter",
				"Debugger: Install Adapters"
			],
			[
				"debugger adap",
				"Debugger: Install Adapters"
			],
			[
				"debugger adapt",
				"Debugger: Install Adapters"
			],
			[
				"debugger sett",
				"Preferences: Debugger Settings"
			],
			[
				"debugger add",
				"Debugger: Add Configuration"
			],
			[
				"doxy build",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"doxy buil",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"doxygen key",
				"Preferences: DoxyDoxygen Key Bindings"
			],
			[
				"doxy",
				"DoxyDoxygen: Select Comments (interactive)..."
			],
			[
				"do",
				"DoxyDoxygen: Comment All"
			],
			[
				"lsp format file",
				"LSP: Format File"
			],
			[
				"format file",
				"LSP: Format File"
			],
			[
				"for",
				"LSP: Format File"
			],
			[
				"inlay",
				"LSP: Toggle Inlay Hints"
			],
			[
				"lsp file",
				"LSP: Format File"
			],
			[
				"forma",
				"LSP: Format File"
			],
			[
				"snake",
				"Convert Case: snake_case"
			],
			[
				"lsp re",
				"LSP: Restart Server"
			],
			[
				"lsp res",
				"LSP: Restart Server"
			],
			[
				"lsp restar",
				"LSP: Restart Server"
			],
			[
				"clangd sett",
				"Preferences: LSP-clangd Settings"
			],
			[
				"lsp serv",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp setting",
				"Preferences: LSP Settings"
			],
			[
				"lsp restart",
				"LSP: Restart Server"
			],
			[
				"lsp dia",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp log",
				"LSP: Toggle Log Panel"
			],
			[
				"restart",
				"LSP: Restart Server"
			],
			[
				"lsp settin",
				"Preferences: LSP Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"lsp key",
				"Preferences: LSP Key Bindings"
			],
			[
				"origami reorde",
				"Preferences: Origami Key Bindings"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"preference set",
				"Preferences: Settings"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"preferen",
				"Preferences: LSP Settings"
			],
			[
				"settin",
				"Preferences: Settings"
			],
			[
				"dia",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"refere",
				"LSP: Find References"
			],
			[
				"re",
				"LSP: Restart Server"
			],
			[
				"referen",
				"LSP: Find References"
			],
			[
				"reference",
				"LSP: Find References"
			],
			[
				"rest",
				"LSP: Restart Server"
			],
			[
				"lsp rese",
				"LSP: Restart Server"
			],
			[
				"clang form",
				"Clang Format: Format Selection"
			],
			[
				"lsp setti",
				"Preferences: LSP Settings"
			],
			[
				"restar",
				"LSP: Restart Server"
			],
			[
				"index",
				"Help: Indexing Status"
			],
			[
				"diagn",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp d",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"refer",
				"LSP: Find References"
			],
			[
				"lsp rename",
				"LSP: Rename"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"trouble",
				"LSP: Troubleshoot Server"
			],
			[
				"inde",
				"Help: Indexing Status"
			],
			[
				"log",
				"LSP: Toggle Log Panel"
			],
			[
				"lsp sett",
				"Preferences: LSP Settings"
			],
			[
				"lsp diagnostic",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp goto symb",
				"LSP: Goto Symbol In Project…"
			],
			[
				"log panel",
				"LSP: Toggle Log Panel"
			],
			[
				"referenc",
				"LSP: Find References"
			],
			[
				"lsp pane",
				"LSP: Toggle Log Panel"
			],
			[
				"lsp find",
				"LSP: Find References"
			],
			[
				"package control up",
				"Package Control: Upgrade Package"
			],
			[
				"lsb trou",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp:",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsb",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp diagn",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp diag",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp ",
				"Preferences: LSP Key Bindings"
			],
			[
				"switchhea",
				"LSP-clangd: Switch to Source/Header"
			],
			[
				"select ",
				"UI: Select Color Scheme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"sele",
				"UI: Select Color Scheme"
			],
			[
				"color",
				"UI: Customize Color Scheme"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"debugger install",
				"Debugger: Install Adapters"
			],
			[
				"code lens",
				"LSP: Run Code Lens"
			],
			[
				"switch",
				"LSP-clangd: Switch to Source/Header"
			],
			[
				"file rename",
				"File: Rename"
			],
			[
				"rename ",
				"LSP: Rename"
			],
			[
				"lsp renam",
				"LSP: Rename"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"scope",
				"Selection: Expand to Scope"
			],
			[
				"type",
				"LSP: Show Type Hierarchy"
			],
			[
				"",
				"LSP: Toggle Log Panel"
			],
			[
				"clang",
				"Preferences: LSP Language ID Mapping Overrides"
			],
			[
				"ls",
				"LSP: Restart Server"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"gitgutter",
				"Preferences: GitGutter Settings"
			],
			[
				"blame",
				"Git: Blame"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 172.0,
		"history":
		[
			"bash",
			"quit",
			"quit()",
			"exit()",
			"exit",
			"pip install compiledb",
			"py -m ensurepip --upgrade",
			"pip",
			"python -m ensurepip --upgrade",
			"ensurepip",
			"pip",
			"sublime.log_indexing",
			"docker build -t nirve/armenv:v1"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/code/EA/meson_build",
		"/C/code/EA/meson_build/libc-skeleton",
		"/C/code/EA/meson_build/libc-skeleton/build",
		"/C/code/EA/meson_build/libc-skeleton/build/cross",
		"/C/code/EA/meson_build/reference",
		"/C/code/EA/meson_build/reference/005-cross-compilation",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects"
	],
	"file_history":
	[
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/printf.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/packagefiles/printf/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf/src/printf/printf.c",
		"/C/code/EA/meson_build/meson_build.sublime-project",
		"/C/code/EA/meson_build/libc-skeleton/src/stdio/asprintf.c",
		"/C/code/EA/meson_build/libc-skeleton/src/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/src/stdio/putchar.c",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/openlibm/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/packagefiles/openlibm/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/packagefiles/printf/test/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/include/string.h",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.7/src/cmocka.c",
		"/C/code/EA/meson_build/libc-skeleton/buildresults/compile_commands.json",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf/test/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.7/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/src/string/strdup.c",
		"/C/Users/Marc/Desktop/cmocka-1.1.7/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka.wrap",
		"/C/Users/Marc/Desktop/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/printf/printf.c",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/printf/printf.h",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/cmocka-1.1.5/src/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/test/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/test/string/memcmp.c",
		"/C/code/EA/meson_build/libc-skeleton/meson_options.txt",
		"/C/code/EA/meson_build/libc-skeleton/src/stdio/putchar_native.c",
		"/C/Users/Marc/AppData/Local/Temp/7zE846BE53E/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/src/string/memcmp.c",
		"/C/Users/Marc/AppData/Local/Temp/7zE0CAB4BAF/meson.build",
		"/C/Users/Marc/AppData/Local/Temp/7zE4ABA2A47/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.7/tests/meson.build",
		"/C/Users/Marc/AppData/Local/Temp/MicrosoftEdgeDownloads/ffac27c3-cfd1-4abc-91fc-db8576c7c666/cmocka.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.5/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/cmocka.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.5/src/meson.build",
		"/C/code/EA/meson_build/reference/004-options-and-flags/src/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/build/cross/nrf52840.txt",
		"/C/code/EA/meson_build/reference/003-run-targets/subprojects/packagefiles/printf/test/meson.build",
		"/C/code/EA/meson_build/reference/003-run-targets/subprojects/packagefiles/printf/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/packagefiles/printf/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/buildresults/meson-logs/meson-log.txt",
		"/C/code/EA/meson_build/libc-skeleton/tools/clear_test_results.sh",
		"/C/code/EA/meson_build/.gitignore",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/openlibm.wrap",
		"/C/code/EA/meson_build/reference/001-printf-dep/subprojects/printf.wrap",
		"/C/Users/Marc/AppData/Local/Temp/MicrosoftEdgeDownloads/8cb9f270-2f9a-475f-9230-5d363813cd40/unity.wrap",
		"/C/code/EA/meson_build/libc-skeleton/tools/libc_tests_xml.sh",
		"/C/code/EA/meson_build/reference/001-printf-dep/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.5/cmocka.pc.cmake",
		"/C/code/distributor-gui/legacyModbus.py",
		"/C/code/distributor-gui/modbusBase.py",
		"/C/code/distributor-gui/HoldingRegisters.py",
		"/C/code/distributor-gui/Coils.py",
		"/C/code/distributor-gui/fileLog.py",
		"/C/code/distributor-gui/gui.py",
		"/C/code/distributor-gui/modernModbus.py",
		"/C/code/distributor-gui/distributor-gui-project.sublime-project",
		"/C/code/distributor-gui/legacyCustomHandlers.py",
		"/C/code/distributor-gui/modbusHandler.py",
		"/C/Users/Marc/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json",
		"/C/code/distributor-gui/config.ini",
		"/C/code/EA/Cmake/libc-skeleton/cmake/toolchains/cross/cortex-m7_hardfloat.cmake",
		"/C/code/EA/Cmake/libc-skeleton/cmake/toolchains/cross/cortex-m4_hardfloat.cmake",
		"/C/code/EA/Cmake/libc-skeleton/cmake/toolchains/cross/cortex-m3_softfloat.cmake",
		"/C/code/EA/Cmake/libc-skeleton/BuildOptions.cmake",
		"/C/code/EA/Cmake/libc-skeleton/buildresults/_deps/printf-src/README.md",
		"/C/code/EA/CMake reference/006-cross-compilation/test/CMakeLists.txt",
		"/C/code/EA/Cmake/libc-skeleton/test/CMakelists.txt",
		"/C/code/EA/reference testing/CMakeLists.txt",
		"/C/code/EA/006-cross-compilation/src/CMakeLists.txt",
		"/C/code/EA/005-build-options/src/CMakeLists.txt",
		"/C/code/Franger/src/Application/system.c",
		"/C/code/Franger/include/Drivers/interrupt.h",
		"/C/code/Franger/src/Device/Relay/relay_timer.c",
		"/C/code/Franger/include/Device/Relay/relay_timer.h",
		"/C/code/Franger/src/Application/self_test.c",
		"/C/code/Franger/include/Application/modbus/modbus.h",
		"/C/code/Franger/src/Drivers/interrupt.c",
		"/C/code/Franger/src/Device/runtime_flags.c",
		"/C/code/Franger/src/Device/TempHum/temphum.c",
		"/C/code/Franger/src/Application/tasks.c",
		"/C/code/Franger/src/main.c",
		"/C/code/Franger/src/Application/Signal/signal_avg.c",
		"/C/code/Franger/src/Application/serial.c",
		"/C/code/Franger/src/Application/inputs.c",
		"/C/code/Franger/src/Application/defrost.c",
		"/C/code/Franger/src/Application/Signal/signal_offset.c",
		"/C/code/Franger/src/Application/Signal/signal_dft.c",
		"/C/code/Franger/src/Application/modbus/mb_timers.c",
		"/C/code/Franger/src/Application/modbus/modbus.c",
		"/C/code/Franger/src/Application/Signal/signal_idx.c",
		"/C/code/Franger/src/Device/Proximity/proximity.c",
		"/C/code/Franger/src/Device/Proximity/proximity_i2c.c",
		"/C/code/Franger/src/Drivers/msp430_adc.c",
		"/C/code/Franger/include/Device/Proximity/proximity_i2c.h",
		"/C/code/Franger/src/Application/alarms.c",
		"/C/code/Franger/include/Misc.h",
		"/C/code/Franger/src/Application/faults.c",
		"/C/code/Franger/src/Application/records.c",
		"/C/code/Franger/include/Application/records.h",
		"/C/code/Franger/src/Device/mcu.c",
		"/C/code/Franger/include/Device/wdt.h",
		"/C/code/Franger/src/Device/wdt.c",
		"/C/code/Franger/src/Application/Signal/signal_uv.c",
		"/C/code/Franger/test/test_alarms.c",
		"/C/code/Franger/include/Application/system.h",
		"/C/code/Franger/include/Drivers/registers.h",
		"/C/code/Franger/src/Device/TempHum/temphumadc.c",
		"/C/code/Franger/src/Application/modbus/mb_holding_registers.c",
		"/C/code/Franger/src/Application/Mode/mode.c",
		"/C/code/Franger/src/Device/lamp.c",
		"/C/code/Franger/src/Device/Calendar/calendar_i2c.c",
		"/C/code/Franger/src/Device/TempHum/temphum_HTS221.c",
		"/C/code/Franger/src/Drivers/SPI_ADS1256.c",
		"/C/code/Franger/include/Device/mcu.h",
		"/C/code/Franger/test/support/msp430fr6989.h",
		"/C/code/Franger/buildtest/test/cache/signal_uv.h",
		"/C/code/Franger/src/Drivers/I2C.c",
		"/C/code/Franger/include/Application/faults.h",
		"/C/code/Franger/src/Device/adc.c",
		"/C/code/Franger/include/Device/lamp.h",
		"/C/code/Franger/include/Device/adc_types.h",
		"/C/code/Franger/include/Device/led.h",
		"/C/code/Franger/include/Device/runtime_flags.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 415.0,
		"where_history":
		[
			"C:\\code\\EA\\meson_build\\libc-skeleton\\",
			"C:\\code\\EA\\meson_build\\libc-skeleton\\*",
			"C:\\code\\EA\\meson_build\\libc-skeleton",
			"",
			"/libc-skeleton",
			"./libc-skeleton",
			"",
			"*.build",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ISO C99",
			"ISO C99 requires whitespace after the macro name",
			"PRINTF_VISIBILITY",
			"putchar",
			"PRINTF_H_",
			"_PRINTF_H_",
			"stdarg",
			"libc_native_files",
			"putchar",
			"putchar_native",
			"putchar",
			"libc_compile_flags",
			"libc_includes",
			"printf",
			"libc_native_files",
			"fno-builtin",
			"printf.h",
			"subprojects/printf/src/printf",
			"src",
			"printf/src/printf",
			"putchar_native",
			"native",
			"libc_native.a.p/stdio_putchar",
			"PRINTF_INCLUDE_CONFIG_H",
			"DPRINTF_INCLUDE_CONFIG_H",
			"#define",
			"putchar",
			"printf",
			"define",
			"#define",
			"libc_native.a.p/stdio_putchar",
			"stdio_putchar",
			"-I",
			"_putchar",
			"printf",
			"putchar",
			"_putchar",
			"libc_includes",
			"string",
			"putchar",
			"cmocka.c",
			"abs_exp10_covered_by_powers_table",
			"abs",
			"cmocka.c",
			"_POSIX_C_SOURCE ",
			"_SVID_SOURCE",
			"nostdinc",
			"cmocka.c",
			"nostdinc",
			"threads_dep",
			"abs_exp10_covered_by_powers_table",
			"inc_include",
			"libc_sys_include",
			"libc_sys_includes",
			"libc_includes",
			"gdtoa",
			"build_machine_arch_specific_includes",
			"libgdtoa",
			"libc_includes",
			"declare_dependency",
			"include_direcotires",
			"declare_dependency",
			"is_system",
			"inc_include",
			"PRINTF_ALIAS_STANDARD_FUNCTION_NAMES_HARD",
			"stdio_putchar",
			"putchar",
			"GDTOA_HOST_DEBUG",
			"DGDTOA_HOST_DEBUG",
			"stdio/putchar",
			"asprintf",
			"#define _GNU_SOURCE",
			"unused_parameter",
			"string_files",
			"strdup",
			"strdup\n",
			"strdup",
			"strdup()",
			"#define _POSIX_C_SOURCE 200809L",
			"#define _SVID_SOURCE",
			"libc_native_files",
			"libc_standalone_files",
			"libc_native_files",
			"putchar",
			"strdup",
			"cmocka_native",
			"assert(",
			"Wunused-parameter",
			"cmocka",
			"Wunused-parameter",
			"host",
			"c_compiler",
			"add_project_arguments",
			"add_project_arguments ",
			"arch_specific_includes",
			"libcmocka =",
			"native: true",
			"libcmocka",
			"cmocka_dep",
			"cc_native_dict",
			"project(",
			"project",
			"cmocka_dep",
			"cmocka_",
			"cmocka",
			"native",
			"cmocka",
			"libc_native_files",
			"_putchar",
			"libcmocka_native",
			"Wno-unknown-pragmas",
			"libc_common_files",
			"-wno-unknown",
			"assert.c",
			"libcmocka_native",
			"O2",
			"Og",
			"O0",
			"build_type_flags",
			"GDTOA_HOST_DEBUG",
			"O0",
			"libc_native_dep",
			"env",
			"_files",
			"files",
			"/",
			"printf_tests",
			"]'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "libc-skeleton/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2865,
						"regions":
						{
						},
						"selection":
						[
							[
								1535,
								1535
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1545,
										1546
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1527,
										1528
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 613.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "libc-skeleton/subprojects/printf/src/printf/printf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8724,
						"regions":
						{
						},
						"selection":
						[
							[
								3128,
								3145
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3173,
										3178
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/hash.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3121,
										3127
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/printf/src/printf/printf.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1098.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7971,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										232,
										249
									],
									[
										516,
										533
									],
									[
										549,
										566
									],
									[
										662,
										679
									],
									[
										756,
										773
									],
									[
										844,
										861
									],
									[
										982,
										999
									],
									[
										1081,
										1098
									],
									[
										1229,
										1246
									],
									[
										1343,
										1360
									],
									[
										1503,
										1520
									],
									[
										1648,
										1665
									],
									[
										2062,
										2079
									],
									[
										2346,
										2363
									],
									[
										2379,
										2396
									],
									[
										2492,
										2509
									],
									[
										2586,
										2603
									],
									[
										2674,
										2691
									],
									[
										2812,
										2829
									],
									[
										2911,
										2928
									],
									[
										3059,
										3076
									],
									[
										3173,
										3190
									],
									[
										3333,
										3350
									],
									[
										3478,
										3495
									],
									[
										3895,
										3912
									],
									[
										4179,
										4196
									],
									[
										4212,
										4229
									],
									[
										4325,
										4342
									],
									[
										4419,
										4436
									],
									[
										4507,
										4524
									],
									[
										4645,
										4662
									],
									[
										4744,
										4761
									],
									[
										4892,
										4909
									],
									[
										5006,
										5023
									],
									[
										5166,
										5183
									],
									[
										5311,
										5328
									],
									[
										5725,
										5742
									],
									[
										6009,
										6026
									],
									[
										6042,
										6059
									],
									[
										6155,
										6172
									],
									[
										6249,
										6266
									],
									[
										6337,
										6354
									],
									[
										6475,
										6492
									],
									[
										6574,
										6591
									],
									[
										6722,
										6739
									],
									[
										6836,
										6853
									],
									[
										6996,
										7013
									],
									[
										7141,
										7158
									],
									[
										7689,
										7696
									],
									[
										7868,
										7875
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								7971,
								7971
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"default_dir": "C:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\src\\printf",
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"lsp_uri": "buffer:1701",
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4131.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": ".gitignore",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								47
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/.gitignore",
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "libc-skeleton/subprojects/printf/src/printf/printf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8724,
						"regions":
						{
						},
						"selection":
						[
							[
								4256,
								4256
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/printf/src/printf/printf.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1472.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "libc-skeleton/subprojects/printf/test/test_suite.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14407,
						"regions":
						{
						},
						"selection":
						[
							[
								1516,
								1533
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/printf/test/test_suite.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 155.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "libc-skeleton/include/stdio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4878,
						"regions":
						{
						},
						"selection":
						[
							[
								839,
								839
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										852,
										853
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										815,
										816
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/include/stdio.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 408.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "libc-skeleton/src/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6779,
						"regions":
						{
						},
						"selection":
						[
							[
								4678,
								4686
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4686,
										4687
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										4676,
										4677
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3641.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "libc-skeleton/test/string/memcmp.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 901,
						"regions":
						{
						},
						"selection":
						[
							[
								445,
								445
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										696,
										697
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										325,
										326
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/test/string/memcmp.c",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "libc-skeleton/test/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2143,
						"regions":
						{
						},
						"selection":
						[
							[
								1792,
								1792
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/test/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1039.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "reference/005-cross-compilation/subprojects/printf/printf.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4865,
						"regions":
						{
						},
						"selection":
						[
							[
								849,
								849
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/reference/005-cross-compilation/subprojects/printf/printf.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 95.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "libc-skeleton/buildresults/compile_commands.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 314199,
						"regions":
						{
						},
						"selection":
						[
							[
								85672,
								85672
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"selector": "- comment - punctuation.separator - punctuation.definition.string.end - constant.character.escape - invalid.illegal - punctuation.section.mapping - punctuation.section.sequence",
									"server": "LSP-json"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										85671,
										85672
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										85633,
										85634
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/buildresults/compile_commands.json",
							"show_definitions": false,
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 466.0,
						"translation.y": 9649.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "meson_build.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 248,
						"regions":
						{
						},
						"selection":
						[
							[
								248,
								248
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"selector": "- comment - punctuation.separator - punctuation.definition.string.end - constant.character.escape - invalid.illegal - punctuation.section.mapping - punctuation.section.sequence",
									"server": "LSP-json"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/meson_build.sublime-project",
							"show_definitions": false,
							"syntax": "Packages/zzz A File Icon zzz/aliases/JSON (Sublime).sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"bracket_highlighter.busy": false,
							"default_dir": "C:\\code\\EA\\meson_build\\libc-skeleton\\src\\stdio",
							"git_gutter_is_enabled": false,
							"lsp_uri": "buffer:1287",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "libc-skeleton/test/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2143,
						"regions":
						{
						},
						"selection":
						[
							[
								1490,
								1490
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/test/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1057.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "libc-skeleton/src/stdio/putchar.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 94,
						"regions":
						{
						},
						"selection":
						[
							[
								94,
								94
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/stdio/putchar.c",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "libc-skeleton/src/stdio/putchar_native.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 145,
						"regions":
						{
						},
						"selection":
						[
							[
								106,
								106
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										114,
										115
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										106,
										107
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/stdio/putchar_native.c",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "libc-skeleton/src/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6779,
						"regions":
						{
						},
						"selection":
						[
							[
								6656,
								6695
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										6695,
										6696
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										6580,
										6581
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 306.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 898,
						"regions":
						{
						},
						"selection":
						[
							[
								898,
								898
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"selector": "- comment - punctuation.separator - punctuation.definition.string.end - constant.character.escape - invalid.illegal - punctuation.section.mapping - punctuation.section.sequence",
									"server": "LSP-json"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										897,
										898
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										859,
										860
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"default_dir": "C:\\code\\EA\\meson_build\\libc-skeleton\\buildresults",
							"git_gutter_is_enabled": false,
							"lsp_active": true,
							"lsp_uri": "buffer:1363",
							"show_definitions": false,
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 14,
					"file": "libc-skeleton/src/stdio/putchar_native.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 145,
						"regions":
						{
						},
						"selection":
						[
							[
								39,
								39
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/stdio/putchar_native.c",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "libc-skeleton/include/stdio.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4878,
						"regions":
						{
						},
						"selection":
						[
							[
								520,
								520
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/include/stdio.h",
							"show_definitions": false,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "libc-skeleton/src/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6779,
						"regions":
						{
						},
						"selection":
						[
							[
								5940,
								5952
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5952,
										5953
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										5917,
										5918
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4424.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "libc-skeleton/subprojects/printf/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1128,
						"regions":
						{
						},
						"selection":
						[
							[
								512,
								512
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										530,
										531
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										502,
										503
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/printf/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "libc-skeleton/build/cross/armcc.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 613,
						"regions":
						{
						},
						"selection":
						[
							[
								612,
								612
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/build/cross/armcc.txt",
							"syntax": "Packages/INI/INI.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "libc-skeleton/build/cross/armclang.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 693,
						"regions":
						{
						},
						"selection":
						[
							[
								692,
								692
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/build/cross/armclang.txt",
							"syntax": "Packages/INI/INI.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "libc-skeleton/build/cross/nrf52840.txt",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 807,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9,
										10
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/build/cross/nrf52840.txt",
							"syntax": "Packages/INI/INI.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 141.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				2,
				2
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 532.0
	},
	"output.Debugger Console":
	{
		"height": 264.0
	},
	"output.Debugger Protocol":
	{
		"height": 264.0
	},
	"output.Debugger Terminal":
	{
		"height": 264.0
	},
	"output.LSP Log Panel":
	{
		"height": 603.0
	},
	"output.Meson":
	{
		"height": 114.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 156.0
	},
	"output.Terminus":
	{
		"height": 273.0
	},
	"output.diagnostics":
	{
		"height": 126.0
	},
	"output.exec":
	{
		"height": 156.0
	},
	"output.find_results":
	{
		"height": 212.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.mdpopups-dummy":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 138.0
	},
	"output.rename":
	{
		"height": 114.0
	},
	"pinned_build_system": "",
	"project": "meson_build.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gitign",
				".gitignore"
			],
			[
				"printf.h",
				"libc-skeleton\\subprojects\\printf\\src\\printf\\printf.h"
			],
			[
				"src/meson.build",
				"libc-skeleton\\src\\meson.build"
			],
			[
				"stdio",
				"libc-skeleton\\include\\stdio.h"
			],
			[
				"stdio.h",
				"libc-skeleton\\include\\stdio.h"
			],
			[
				"native",
				"libc-skeleton\\src\\stdio\\putchar_native.c"
			],
			[
				"putchar",
				"libc-skeleton\\src\\stdio\\putchar.c"
			],
			[
				"printf.c",
				"libc-skeleton\\subprojects\\printf\\src\\printf\\printf.c"
			],
			[
				"printf/meson.build",
				"libc-skeleton\\subprojects\\printf\\meson.build"
			],
			[
				"src/",
				"libc-skeleton\\src\\meson.build"
			],
			[
				"nat",
				"libc-skeleton\\src\\stdio\\putchar_native.c"
			],
			[
				"test/meson.build",
				"libc-skeleton\\test\\meson.build"
			],
			[
				"printf/test/meson.build",
				"libc-skeleton\\subprojects\\printf\\test\\meson.build"
			],
			[
				"memcmp",
				"libc-skeleton\\test\\string\\memcmp.c"
			],
			[
				"openlibm/meson.build",
				"libc-skeleton\\subprojects\\openlibm\\meson.build"
			],
			[
				"asprintf",
				"libc-skeleton\\src\\stdio\\asprintf.c"
			],
			[
				"string.h",
				"libc-skeleton\\include\\string.h"
			],
			[
				"cmocka.c",
				"libc-skeleton\\subprojects\\cmocka-1.1.7\\src\\cmocka.c"
			],
			[
				"stdio/putchar",
				"libc-skeleton\\src\\stdio\\putchar.c"
			],
			[
				"strdup.c",
				"libc-skeleton\\src\\string\\strdup.c"
			],
			[
				"tests/meson.build",
				"libc-skeleton\\subprojects\\cmocka-1.1.7\\tests\\meson.build"
			],
			[
				"test/meson",
				"libc-skeleton\\test\\meson.build"
			],
			[
				"mesonlog",
				"libc-skeleton\\buildresults\\meson-logs\\meson-log.txt"
			],
			[
				"meson-log.txt",
				"libc-skeleton\\buildresults\\meson-logs\\meson-log.txt"
			],
			[
				"nrf",
				"libc-skeleton\\build\\cross\\nrf52840.txt"
			],
			[
				"src/meson.buil",
				"libc-skeleton\\src\\meson.build"
			],
			[
				"printf.wrap",
				"reference\\001-printf-dep\\subprojects\\printf.wrap"
			],
			[
				"printf/test/meson",
				"libc-skeleton\\subprojects\\packagefiles\\printf\\test\\meson.build"
			],
			[
				"libc/test/meson",
				"libc-skeleton\\test\\meson.build"
			],
			[
				"log",
				"libc-skeleton\\buildresults\\meson-logs\\meson-log.txt"
			],
			[
				"transaction",
				"pymodbus\\transaction.py"
			],
			[
				"base",
				"pymodbus\\framer\\base.py"
			],
			[
				"rtu_framer",
				"pymodbus\\framer\\rtu_framer.py"
			],
			[
				"mod",
				"modbusBase.py"
			],
			[
				"gui",
				"gui.py"
			],
			[
				"modbus",
				"modbusBase.py"
			],
			[
				"modbusbase",
				"modbusBase.py"
			],
			[
				"modbu",
				"modbusHandler.py"
			],
			[
				"legacy",
				"legacyModbus.py"
			],
			[
				"coil",
				"Coils.py"
			],
			[
				"gui.py",
				"gui.py"
			],
			[
				"test/cmake",
				"test\\CMakelists.txt"
			],
			[
				"src/cmakelists",
				"src\\CMakelists.txt"
			],
			[
				"interrupt.h",
				"include\\Drivers\\interrupt.h"
			],
			[
				"system.c",
				"src\\Application\\system.c"
			],
			[
				"relay_timer.c",
				"src\\Device\\Relay\\relay_timer.c"
			],
			[
				"relay_timer.h",
				"include\\Device\\Relay\\relay_timer.h"
			],
			[
				"self_test.c",
				"src\\Application\\self_test.c"
			],
			[
				"mb_timers.c",
				"src\\Application\\modbus\\mb_timers.c"
			],
			[
				"main.c",
				"src\\main.c"
			],
			[
				"proximity_i2c.h",
				"include\\Device\\Proximity\\proximity_i2c.h"
			],
			[
				"proximity_i2c.c",
				"src\\Device\\Proximity\\proximity_i2c.c"
			],
			[
				"proximity.c",
				"src\\Device\\Proximity\\proximity.c"
			],
			[
				"msp430_adc.c",
				"src\\Drivers\\msp430_adc.c"
			],
			[
				"test_alarm",
				"test\\test_alarms.c"
			],
			[
				"inputs.c",
				"src\\Application\\inputs.c"
			],
			[
				"misc.h",
				"include\\Misc.h"
			],
			[
				"tasks.c",
				"src\\Application\\tasks.c"
			],
			[
				"records.c",
				"src\\Application\\records.c"
			],
			[
				"records.h",
				"include\\Application\\records.h"
			],
			[
				"signal_uv.h",
				"buildtest\\test\\cache\\signal_uv.h"
			],
			[
				"signal_uv.c",
				"src\\Application\\Signal\\signal_uv.c"
			],
			[
				"alarms.c",
				"src\\Application\\alarms.c"
			],
			[
				"mcu.c",
				"src\\Device\\mcu.c"
			],
			[
				"spi",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"registers.h",
				"include\\Drivers\\registers.h"
			],
			[
				"main",
				"src\\main.c"
			],
			[
				"wdt.h",
				"include\\Device\\wdt.h"
			],
			[
				"wdt.c",
				"src\\Device\\wdt.c"
			],
			[
				"system.h",
				"include\\Application\\system.h"
			],
			[
				"interrupt.c",
				"src\\Drivers\\interrupt.c"
			],
			[
				"faults.c",
				"src\\Application\\faults.c"
			],
			[
				"mcu.h",
				"include\\Device\\mcu.h"
			],
			[
				"led.h",
				"include\\Device\\led.h"
			],
			[
				"tasks",
				"src\\Application\\tasks.c"
			],
			[
				"lamp.c",
				"src\\Device\\lamp.c"
			],
			[
				"lamp.h",
				"include\\Device\\lamp.h"
			],
			[
				"reg.h",
				"include\\Drivers\\registers.h"
			],
			[
				"runtime_flags.h",
				"include\\Device\\runtime_flags.h"
			],
			[
				"runtime_flags.c",
				"src\\Device\\runtime_flags.c"
			],
			[
				"adc.c",
				"src\\Device\\adc.c"
			],
			[
				"timer.c",
				"src\\Device\\Timer\\timer.c"
			],
			[
				"adc_types",
				"include\\Device\\adc_types.h"
			],
			[
				"hts",
				"src\\Device\\TempHum\\temphum_HTS221.c"
			],
			[
				"faults",
				"include\\Application\\faults.h"
			],
			[
				"adc_types.h",
				"include\\Device\\adc_types.h"
			],
			[
				"mcu",
				"src\\Device\\mcu.c"
			],
			[
				"relays.c",
				"src\\Device\\Relay\\relays.c"
			],
			[
				"faults.h",
				"include\\Application\\faults.h"
			],
			[
				"signal_dft.c",
				"src\\Application\\Signal\\signal_dft.c"
			],
			[
				"signal_dft",
				"src\\Application\\Signal\\signal_dft.c"
			],
			[
				"alarms.",
				"src\\Application\\alarms.c"
			],
			[
				"uv",
				"src\\Application\\Signal\\signal_uv.c"
			],
			[
				"proximity",
				"src\\Device\\Proximity\\proximity.c"
			],
			[
				"i2c.c",
				"src\\Drivers\\I2C.c"
			],
			[
				"calendar_i2c.c",
				"src\\Device\\Calendar\\calendar_i2c.c"
			],
			[
				"temphum.c",
				"src\\Device\\TempHum\\temphum.c"
			],
			[
				"reg",
				"include\\Drivers\\registers.h"
			],
			[
				"defrost",
				"src\\Application\\defrost.c"
			],
			[
				"temphumadc.c",
				"src\\Device\\TempHum\\temphumadc.c"
			],
			[
				"defrost.c",
				"src\\Application\\defrost.c"
			],
			[
				"regisetrs.h",
				"include\\Drivers\\registers.h"
			],
			[
				"registers.c",
				"src\\Drivers\\registers.c"
			],
			[
				"dft.c",
				"src\\Application\\Signal\\signal_dft.c"
			],
			[
				"spi_a",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"signal2",
				"test\\test_signal2.c"
			],
			[
				"signal_avg.c",
				"src\\Application\\Signal\\signal_avg.c"
			],
			[
				"spiads",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"ads",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"test_signal2",
				"test\\test_signal2.c"
			],
			[
				"signal_mv.c",
				"src\\Application\\Signal\\signal_mv.c"
			],
			[
				"sensitivity.c",
				"src\\Application\\Signal\\sensitivity.c"
			],
			[
				"test_alarms.c",
				"test\\test_alarms.c"
			],
			[
				"alarms.h",
				"include\\Application\\alarms.h"
			],
			[
				"temphumhts",
				"src\\Device\\TempHum\\temphum_HTS221.c"
			],
			[
				"temphum",
				"src\\Device\\TempHum\\temphum.c"
			],
			[
				"runtime",
				"include\\Device\\runtime_flags.h"
			],
			[
				"heater.c",
				"src\\Device\\heater.c"
			],
			[
				"relay.c",
				"src\\Device\\Relay\\relays.c"
			],
			[
				"lamp",
				"src\\Device\\lamp.c"
			],
			[
				"heater",
				"src\\Device\\heater.c"
			],
			[
				"fault.c",
				"src\\Application\\faults.c"
			],
			[
				"ADC.C",
				"src\\Device\\adc.c"
			],
			[
				"spi_",
				"include\\Drivers\\SPI_ADS1256.h"
			],
			[
				"tasks.h",
				"include\\Application\\tasks.h"
			],
			[
				"timer.h",
				"include\\Device\\Timer\\timer.h"
			],
			[
				"test_timer",
				"test\\test_timer.c"
			],
			[
				"test_timer.c",
				"test\\test_timer.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 161.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 580.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 227.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
