{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"libc_test_",
				"libc_test_flags"
			],
			[
				"test",
				"test_output_dir"
			],
			[
				"openlib",
				"openlibm_subproject"
			],
			[
				"DRDY",
				"DRDY_PIN"
			],
			[
				"DRDY_",
				"DRDY_DIR_PORT"
			],
			[
				"HT_C",
				"HT_CS_DIR_PORT"
			],
			[
				"intrin",
				"intrinsics.h\""
			],
			[
				"mb_re",
				"mb_file_records.h\""
			],
			[
				"proximi",
				"proximity_i2c.h\""
			],
			[
				"temphum",
				"temphumadc.h\""
			],
			[
				"calen",
				"calendar_i2c.h\""
			],
			[
				"msp430",
				"msp430_adc.h\""
			],
			[
				"mock_in",
				"mock_intrinsics.h\""
			],
			[
				"msp",
				"msp430_adc.h\""
			],
			[
				"ads",
				"SPI_ADS1256.h\""
			],
			[
				"temphu",
				"temphumadc.h\""
			],
			[
				"relay",
				"relay_timer.h\""
			],
			[
				"proxi",
				"proximity_i2c.h\""
			],
			[
				"calendar",
				"calendar_i2c.h\""
			],
			[
				"msp43",
				"msp430_adc.h\""
			],
			[
				"proxim",
				"proximity_i2c"
			],
			[
				"UART_DE",
				"uart_de"
			],
			[
				"FRAM_PROX",
				"FRAM_PROXIMITY_LIMIT"
			],
			[
				"calend",
				"calendar_types.h\""
			],
			[
				"HUMIDITY",
				"HUMIDITY_OUT_L"
			],
			[
				"read_i2c_data_mn",
				"read_i2c_data_mnack_end"
			],
			[
				"I2C_Mst",
				"I2C_Mst_NACK"
			],
			[
				"FAULT_TEMP",
				"FAULT_TEMP_PROXIMITY"
			],
			[
				"FAULT_MULT",
				"FAULT_MULTIPLE_ERR_START"
			],
			[
				"FAULT_MULTIPLE",
				"FAULT_MULTIPLE_ERR_END"
			],
			[
				"FAULT_MULTI",
				"FAULT_MULTIPLE_ERR_END"
			],
			[
				"FAULT_MU",
				"FAULT_MULTIPLE_ERR_START"
			],
			[
				"gIR_Pre",
				"gIR_PreTest_27um_mV"
			],
			[
				"gFire",
				"gFireDiagram_Index"
			],
			[
				"get_ir",
				"get_ir_sensor_enabled"
			],
			[
				"START_",
				"START_OFFSET_CALC"
			],
			[
				"std_",
				"std_offset_idx"
			],
			[
				"get_all",
				"get_all_avg_signals"
			],
			[
				"uv_",
				"uv_ir_test_flag"
			],
			[
				"handle_ir",
				"handle_mode1_ir_alarm"
			],
			[
				"handle",
				"handle_mode1_ir_alarm"
			],
			[
				"avg_signal",
				"avg_signal_38um_5hz"
			],
			[
				"avg_signal_43",
				"avg_signal_43um_5hz"
			],
			[
				"avg_signal_43um",
				"avg_signal_43um_5hz"
			],
			[
				"guv",
				"gUVpulsTot"
			],
			[
				"proximit",
				"proximity_timeout_flag"
			],
			[
				"Handle_Proxi",
				"Handle_Proximity_ERR"
			],
			[
				"TEST_ASSERT_BITS",
				"TEST_ASSERT_BITS_HIGH"
			],
			[
				"LEDObserv",
				"LEDObserverState"
			],
			[
				"RLY_AUX",
				"RLY_AUX_ON"
			],
			[
				"StopRelayOff",
				"StopFireRelayOffTimer"
			],
			[
				"timeobser",
				"time_observer"
			],
			[
				"gUV_IR_",
				"gUV_IR_Test_FLAG"
			],
			[
				"gAvg_",
				"gAvg_mV43um25Hz"
			],
			[
				"gAvg_mV27",
				"gAvg_mV27um25Hz"
			],
			[
				"FIRE_",
				"FRAM_FIRE_RATIO"
			],
			[
				"gIR",
				"gIR_ALARM"
			],
			[
				"gAvg_mV38",
				"gAvg_mV38um5Hz"
			],
			[
				"gA",
				"gAvg_mV43um5Hz"
			],
			[
				"gAvg_mV38um",
				"gAvg_mV38um5Hz"
			],
			[
				"TEST_ASSERT",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"gRatio_43u",
				"gRatio_43um38um_5Hz"
			],
			[
				"gAvg_mV43um",
				"gAvg_mV43um25Hz"
			],
			[
				"gRatio",
				"gRatio_43um38um_5Hz"
			],
			[
				"TEST_ASSERT_",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"gAvg_mV",
				"gAvg_mV38um25Hz"
			],
			[
				"gAvg",
				"gAvg_mV43um25Hz"
			],
			[
				"gAvg_mV27um",
				"gAvg_mV27um25Hz"
			],
			[
				"gavg",
				"gAvg_mV43um25Hz"
			],
			[
				"guvpu",
				"gUVpulsTot"
			],
			[
				"gAvg_mv38",
				"gAvg_mV38um25Hz"
			],
			[
				"gAvg_mv27",
				"gAvg_mV27um25Hz"
			],
			[
				"TEST_",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"gAvg_mV3",
				"gAvg_mV38um25Hz"
			],
			[
				"TEST_AS",
				"TEST_ASSERT_EQUAL_FLOAT"
			],
			[
				"ratiouv43",
				"ratiouv43um5hz_min"
			],
			[
				"gFLT_",
				"gFLT_UnLatch"
			],
			[
				"inc",
				"inc_uv_ir_fail"
			],
			[
				"in",
				"intrinsics"
			],
			[
				"gStart",
				"gStartupFaultTest"
			],
			[
				"SPI_ADS",
				"SPI_ADS1256.h"
			],
			[
				"msp4",
				"msp430fr6989.h"
			],
			[
				"gUV_Sen",
				"gUV_Sen_index2"
			],
			[
				"PIE1bi",
				"PIE1bits.RCIE"
			],
			[
				"eccp2",
				"eccp2.h"
			],
			[
				"last",
				"glbMode.lastHazardSet"
			],
			[
				"GetPul",
				"GetPulseTime_CH2\t(input.h)"
			],
			[
				"GetPulse",
				"GetPulseTime_CH1\t(input.h)"
			],
			[
				"tm",
				"tmr4.h\t(mode.c)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "libc-skeleton/meson.build",
			"settings":
			{
				"buffer_size": 2982,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAK4IAAAAAAAArggAAAAAAAA7AAAAIyBjbW9ja2FfZGVwID0gY21vY2thX3N1YnByb2plY3QuZ2V0X3ZhcmlhYmxlKCdjbW9ja2FfZGVwJyk",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QgAAAAAAACuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAK0IAAAAAAAArQgAAAAAAAABAAAACg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArggAAAAAAACuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"doxy_enter",
					null,
					"AQAAAIQIAAAAAAAAhwgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAEHNA"
				],
				[
					27,
					2,
					"left_delete",
					null,
					"AgAAAIYIAAAAAAAAhggAAAAAAAABAAAAIIUIAAAAAAAAhQgAAAAAAAABAAAAIw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhwgAAAAAAACHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAAIUIAAAAAAAA/AgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAAM8IAAAAAAAAzwgAAAAAAAACAAAAIyCFCAAAAAAAAIUIAAAAAAAAAgAAACMg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/AgAAAAAAACFCAAAAAAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAACIJAAAAAAAAJAkAAAAAAAAAAAAA+QgAAAAAAAD7CAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAkAAAAAAABJCQAAAAAAAAAAAAAAkHJA"
				],
				[
					56,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAACQJAAAAAAAAJAkAAAAAAAACAAAAIyD5CAAAAAAAAPkIAAAAAAAAAgAAACMg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQkAAAAAAAD5CAAAAAAAAAAAAAAAAAAA"
				],
				[
					64,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAAM0IAAAAAAAAzwgAAAAAAAAAAAAAhQgAAAAAAACHCAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQgAAAAAAAD4CAAAAAAAAP///////+9/"
				],
				[
					74,
					1,
					"paste",
					null,
					"AgAAAP0IAAAAAAAAbQkAAAAAAAAAAAAAbQkAAAAAAABtCQAAAAAAAHAAAABjbW9ja2Ffc3VicHJvamVjdCA9IHN1YnByb2plY3QoJ2Ntb2NrYScpCmNtb2NrYV9uYXRpdmVfZGVwID0gY21vY2thX3N1YnByb2plY3QuZ2V0X3ZhcmlhYmxlKCdjbW9ja2FfbmF0aXZlX2RlcCcp",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQkAAAAAAAD9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACYJAAAAAAAAKAkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAkAAAAAAAA8CQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAP0IAAAAAAAA/wgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QgAAAAAAAD9CAAAAAAAAAAAAAAAAAAA"
				],
				[
					177,
					1,
					"left_delete",
					null,
					"AQAAACgJAAAAAAAAKAkAAAAAAAABAAAAIw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQkAAAAAAAApCQAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "subprojet"
					},
					"CQAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA/CQAAAAAAAEAJAAAAAAAAAAAAAEAJAAAAAAAAQQkAAAAAAAAAAAAAQQkAAAAAAABCCQAAAAAAAAAAAABCCQAAAAAAAEMJAAAAAAAAAAAAAEMJAAAAAAAARAkAAAAAAAAAAAAARAkAAAAAAABFCQAAAAAAAAAAAABFCQAAAAAAAEYJAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQkAAAAAAAA9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"left_delete",
					null,
					"AQAAAEUJAAAAAAAARQkAAAAAAAABAAAAdA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgkAAAAAAABGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "ct(c"
					},
					"BAAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAEgJAAAAAAAASQkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"left_delete",
					null,
					"AQAAAEgJAAAAAAAASAkAAAAAAAABAAAAYw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "'cmocka)"
					},
					"CAAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAABKCQAAAAAAAEsJAAAAAAAAAAAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAABNCQAAAAAAAE4JAAAAAAAAAAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAkAAAAAAABICQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"left_delete",
					null,
					"AQAAAFAJAAAAAAAAUAkAAAAAAAARAAAAY21vY2thX3N1YnByb2plY3Q",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"left_delete",
					null,
					"AQAAACgJAAAAAAAAKAkAAAAAAAABAAAAIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQkAAAAAAAApCQAAAAAAAAAAAAAAACBA"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAE4JAAAAAAAATwkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgkAAAAAAABOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"doxy_enter",
					null,
					"AQAAACcJAAAAAAAAKgkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwkAAAAAAAAnCQAAAAAAAAAAAAAA4HVA"
				],
				[
					229,
					1,
					"paste",
					null,
					"AQAAACoJAAAAAAAASgkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgkAAAAAAAAqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"right_delete",
					null,
					"AQAAACgJAAAAAAAAKAkAAAAAAAABAAAAIw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAkAAAAAAAAoCQAAAAAAAAAAAAAAAAAA"
				],
				[
					235,
					1,
					"right_delete",
					null,
					"AQAAACgJAAAAAAAAKAkAAAAAAAABAAAAIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAkAAAAAAAAoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEkJAAAAAAAASgkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAAAA"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJQJAAAAAAAAlQkAAAAAAAAAAAAAlQkAAAAAAACWCQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlAkAAAAAAACUCQAAAAAAAP///////+9/"
				],
				[
					244,
					1,
					"left_delete",
					null,
					"AQAAAJUJAAAAAAAAlQkAAAAAAAABAAAACQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgkAAAAAAACWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "endif"
					},
					"BQAAAJUJAAAAAAAAlgkAAAAAAAAAAAAAlgkAAAAAAACXCQAAAAAAAAAAAACXCQAAAAAAAJgJAAAAAAAAAAAAAJgJAAAAAAAAmQkAAAAAAAAAAAAAmQkAAAAAAACaCQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlQkAAAAAAACVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"right_delete",
					null,
					"AQAAAP0IAAAAAAAA/QgAAAAAAAABAAAAIw",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QgAAAAAAAD9CAAAAAAAAAAAAAAAAAAA"
				],
				[
					261,
					1,
					"right_delete",
					null,
					"AQAAAP0IAAAAAAAA/QgAAAAAAAABAAAAIA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QgAAAAAAAD9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "cmocka_subprojec"
					},
					"EQAAAFwJAAAAAAAAXQkAAAAAAAAAAAAAXQkAAAAAAABdCQAAAAAAABQAAABzdWJwcm9qZWN0KCdjbW9ja2EnKV0JAAAAAAAAXgkAAAAAAAAAAAAAXgkAAAAAAABfCQAAAAAAAAAAAABfCQAAAAAAAGAJAAAAAAAAAAAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABiCQAAAAAAAAAAAABiCQAAAAAAAGMJAAAAAAAAAAAAAGMJAAAAAAAAZAkAAAAAAAAAAAAAZAkAAAAAAABlCQAAAAAAAAAAAABlCQAAAAAAAGYJAAAAAAAAAAAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABoCQAAAAAAAAAAAABoCQAAAAAAAGkJAAAAAAAAAAAAAGkJAAAAAAAAagkAAAAAAAAAAAAAagkAAAAAAABrCQAAAAAAAAAAAABrCQAAAAAAAGwJAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAkAAAAAAABwCQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGwJAAAAAAAAbQkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbAkAAAAAAABsCQAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"swap_line_down",
					null,
					"AgAAAEcJAAAAAAAAcAkAAAAAAAAAAAAA/QgAAAAAAAD9CAAAAAAAACkAAABjbW9ja2Ffc3VicHJvamVjdCA9IHN1YnByb2plY3QoJ2Ntb2NrYScpCg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQkAAAAAAAAlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAB4JAAAAAAAAHwkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgkAAAAAAAAeCQAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAJEJAAAAAAAAkwkAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlgkAAAAAAACRCQAAAAAAAAAAAAAAAAAA"
				],
				[
					340,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAP0IAAAAAAAA/wgAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/wgAAAAAAAD/CAAAAAAAAAAAAAAAAC5A"
				],
				[
					349,
					1,
					"unindent",
					null,
					"AgAAACAJAAAAAAAAIAkAAAAAAAABAAAACUkJAAAAAAAASQkAAAAAAAABAAAACQ",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQkAAAAAAABLCQAAAAAAAAAAAAAAAD5A"
				],
				[
					384,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAAEkJAAAAAAAASwkAAAAAAAAAAAAAIAkAAAAAAAAiCQAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAkAAAAAAAAgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAAM8IAAAAAAAAzwgAAAAAAAACAAAAIyCFCAAAAAAAAIUIAAAAAAAAAgAAACMg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhQgAAAAAAAD8CAAAAAAAAP///////+9/"
				],
				[
					405,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAAM0IAAAAAAAAzwgAAAAAAAAAAAAAhQgAAAAAAACHCAAAAAAAAAAAAAA",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AgAAAEsJAAAAAAAASwkAAAAAAAACAAAAIyAgCQAAAAAAACAJAAAAAAAAAgAAACMg",
					"CgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAkAAAAAAACUCQAAAAAAAP///////+9/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"paste",
					null,
					"AQAAAGwBAAAAAAAAsgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAJoBAAAAAAAAmgEAAAAAAAADAAAALi4v",
					"AQAAAAAAAAABAAAAnQEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "'${0:$SELECTION}'"
					},
					"AgAAAJ8BAAAAAAAAnwEAAAAAAAAGAAAAeDg2XzY0nwEAAAAAAACnAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKABAAAAAAAAoQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAEAAAAAAACgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAKEBAAAAAAAAogEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQEAAAAAAAChAQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " '"
					},
					"AgAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACkAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogEAAAAAAACiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKsBAAAAAAAArAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwEAAAAAAACrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAKwBAAAAAAAArQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAEAAAAAAACsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAK4BAAAAAAAArwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "cpu_family"
					},
					"CwAAAKMBAAAAAAAApAEAAAAAAAAAAAAApAEAAAAAAACkAQAAAAAAAAgAAAAneDg2XzY0J6QBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAACmAQAAAAAAAKcBAAAAAAAAAAAAAKcBAAAAAAAAqAEAAAAAAAAAAAAAqAEAAAAAAACpAQAAAAAAAAAAAACpAQAAAAAAAKoBAAAAAAAAAAAAAKoBAAAAAAAAqwEAAAAAAAAAAAAAqwEAAAAAAACsAQAAAAAAAAAAAACsAQAAAAAAAK0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK0BAAAAAAAArwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "build_machine."
					},
					"DgAAAKMBAAAAAAAApAEAAAAAAAAAAAAApAEAAAAAAAClAQAAAAAAAAAAAAClAQAAAAAAAKYBAAAAAAAAAAAAAKYBAAAAAAAApwEAAAAAAAAAAAAApwEAAAAAAACoAQAAAAAAAAAAAACoAQAAAAAAAKkBAAAAAAAAAAAAAKkBAAAAAAAAqgEAAAAAAAAAAAAAqgEAAAAAAACrAQAAAAAAAAAAAACrAQAAAAAAAKwBAAAAAAAAAAAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMsBAAAAAAAAzAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywEAAAAAAADLAQAAAAAAAP///////+9/"
				],
				[
					84,
					1,
					"paste",
					null,
					"AQAAAMwBAAAAAAAAKwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "host_machine"
					},
					"DQAAAAMCAAAAAAAABAIAAAAAAAAAAAAABAIAAAAAAAAEAgAAAAAAAA0AAABidWlsZF9tYWNoaW5lBAIAAAAAAAAFAgAAAAAAAAAAAAAFAgAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAwCAAAAAAAAAAAAAAwCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAIAAAAAAAADAgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "build_machine_"
					},
					"DgAAAGwBAAAAAAAAbQEAAAAAAAAAAAAAbQEAAAAAAABuAQAAAAAAAAAAAABuAQAAAAAAAG8BAAAAAAAAAAAAAG8BAAAAAAAAcAEAAAAAAAAAAAAAcAEAAAAAAABxAQAAAAAAAAAAAABxAQAAAAAAAHIBAAAAAAAAAAAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAB0AQAAAAAAAHUBAAAAAAAAAAAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAB3AQAAAAAAAHgBAAAAAAAAAAAAAHgBAAAAAAAAeQEAAAAAAAAAAAAAeQEAAAAAAAB6AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAAAA"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "host_machine_"
					},
					"DQAAANoBAAAAAAAA2wEAAAAAAAAAAAAA2wEAAAAAAADcAQAAAAAAAAAAAADcAQAAAAAAAN0BAAAAAAAAAAAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA3gEAAAAAAADfAQAAAAAAAAAAAADfAQAAAAAAAOABAAAAAAAAAAAAAOABAAAAAAAA4QEAAAAAAAAAAAAA4QEAAAAAAADiAQAAAAAAAAAAAADiAQAAAAAAAOMBAAAAAAAAAAAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA5AEAAAAAAADlAQAAAAAAAAAAAADlAQAAAAAAAOYBAAAAAAAAAAAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAAAA"
				],
				[
					176,
					1,
					"left_delete",
					null,
					"AQAAAJIEAAAAAAAAkgQAAAAAAAAuAQAACiMgaW5zdGVhZCBvZiBjdXN0b20gb3B0aW9uLCB1c2UgdGhlIGJ1aWx0aW4gb3B0aW9ucyBmb3IgZGVidWcgYW5kIG9wdGltaXphdGlvbgojIGlmIGJ1aWxkX3R5cGUgPT0gJ2RlYnVnJwojIAlhZGRfcHJvamVjdF9hcmd1bWVudHMoJy1PMCcsIGxpYmNfZGVidWdfZmxhZ3MsIAojIAkJbGFuZ3VhZ2U6IFsnYycsICdjcHAnXSkKIyBlbGlmIGJ1aWxkX3R5cGUgPT0gJ2RlYnVnb3B0aW1pemVkJwojIAlhZGRfcHJvamVjdF9hcmd1bWVudHMoJy1PZycsIGxpYmNfZGVidWdfZmxhZ3MsIAojIAkJbGFuZ3VhZ2U6IFsnYycsICdjcHAnXSk",
					"AQAAAAAAAAABAAAAwAUAAAAAAACSBAAAAAAAAP///////+9/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGoBAAAAAAAAawEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagEAAAAAAABqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "host_c_comp"
					},
					"CwAAAGsBAAAAAAAAbAEAAAAAAAAAAAAAbAEAAAAAAABtAQAAAAAAAAAAAABtAQAAAAAAAG4BAAAAAAAAAAAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAABwAQAAAAAAAHEBAAAAAAAAAAAAAHEBAAAAAAAAcgEAAAAAAAAAAAAAcgEAAAAAAABzAQAAAAAAAAAAAABzAQAAAAAAAHQBAAAAAAAAAAAAAHQBAAAAAAAAdQEAAAAAAAAAAAAAdQEAAAAAAAB2AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "iler"
					},
					"BAAAAHYBAAAAAAAAdwEAAAAAAAAAAAAAdwEAAAAAAAB4AQAAAAAAAAAAAAB4AQAAAAAAAHkBAAAAAAAAAAAAAHkBAAAAAAAAegEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgEAAAAAAAB2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHoBAAAAAAAAewEAAAAAAAAAAAAAewEAAAAAAAB8AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegEAAAAAAAB6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " meson.get_"
					},
					"CwAAAHwBAAAAAAAAfQEAAAAAAAAAAAAAfQEAAAAAAAB+AQAAAAAAAAAAAAB+AQAAAAAAAH8BAAAAAAAAAAAAAH8BAAAAAAAAgAEAAAAAAAAAAAAAgAEAAAAAAACBAQAAAAAAAAAAAACBAQAAAAAAAIIBAAAAAAAAAAAAAIIBAAAAAAAAgwEAAAAAAAAAAAAAgwEAAAAAAACEAQAAAAAAAAAAAACEAQAAAAAAAIUBAAAAAAAAAAAAAIUBAAAAAAAAhgEAAAAAAAAAAAAAhgEAAAAAAACHAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAEAAAAAAAB8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "compiler"
					},
					"CAAAAIcBAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACJAQAAAAAAAAAAAACJAQAAAAAAAIoBAAAAAAAAAAAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAACMAQAAAAAAAI0BAAAAAAAAAAAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwEAAAAAAACHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI8BAAAAAAAAkQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwEAAAAAAACPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJABAAAAAAAAkgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAJEBAAAAAAAAkgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQEAAAAAAACRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwEAAAAAAACTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": " native:"
					},
					"CAAAAJQBAAAAAAAAlQEAAAAAAAAAAAAAlQEAAAAAAACWAQAAAAAAAAAAAACWAQAAAAAAAJcBAAAAAAAAAAAAAJcBAAAAAAAAmAEAAAAAAAAAAAAAmAEAAAAAAACZAQAAAAAAAAAAAACZAQAAAAAAAJoBAAAAAAAAAAAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACcAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAEAAAAAAACUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAJwBAAAAAAAAnQEAAAAAAAAAAAAAnQEAAAAAAACeAQAAAAAAAAAAAACeAQAAAAAAAJ8BAAAAAAAAAAAAAJ8BAAAAAAAAoAEAAAAAAAAAAAAAoAEAAAAAAAChAQAAAAAAAAAAAAChAQAAAAAAAKIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "native_"
					},
					"BwAAADgBAAAAAAAAOQEAAAAAAAAAAAAAOQEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADsBAAAAAAAAAAAAADsBAAAAAAAAPAEAAAAAAAAAAAAAPAEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD4BAAAAAAAAAAAAAD4BAAAAAAAAPwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAEAAAAAAAA4AQAAAAAAAAAAAAAAAAAA"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "native."
					},
					"BwAAAAcEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAJBAAAAAAAAAAAAAAJBAAAAAAAAAoEAAAAAAAAAAAAAAoEAAAAAAAACwQAAAAAAAAAAAAACwQAAAAAAAAMBAAAAAAAAAAAAAAMBAAAAAAAAA0EAAAAAAAAAAAAAA0EAAAAAAAADgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwQAAAAAAAAHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"left_delete",
					null,
					"AQAAAA0EAAAAAAAADQQAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAADgQAAAAAAAAOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAA0EAAAAAAAADgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQQAAAAAAAANBAAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAADUFAAAAAAAANgUAAAAAAAAAAAAANgUAAAAAAAA4BQAAAAAAAAAAAAA2BQAAAAAAADYFAAAAAAAAAgAAAAkJNgUAAAAAAAA3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": "add_project_"
					},
					"DAAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA5BQAAAAAAADoFAAAAAAAAAAAAADoFAAAAAAAAOwUAAAAAAAAAAAAAOwUAAAAAAAA8BQAAAAAAAAAAAAA8BQAAAAAAAD0FAAAAAAAAAAAAAD0FAAAAAAAAPgUAAAAAAAAAAAAAPgUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAEAFAAAAAAAAAAAAAEAFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABCBQAAAAAAAAAAAABCBQAAAAAAAEMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": "arguments"
					},
					"CQAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAABFBQAAAAAAAEYFAAAAAAAAAAAAAEYFAAAAAAAARwUAAAAAAAAAAAAARwUAAAAAAABIBQAAAAAAAAAAAABIBQAAAAAAAEkFAAAAAAAAAAAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABLBQAAAAAAAAAAAABLBQAAAAAAAEwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEwFAAAAAAAATgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAUAAAAAAABMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					1,
					"insert",
					{
						"characters": "libc_debug"
					},
					"CgAAAE0FAAAAAAAATgUAAAAAAAAAAAAATgUAAAAAAABPBQAAAAAAAAAAAABPBQAAAAAAAFAFAAAAAAAAAAAAAFAFAAAAAAAAUQUAAAAAAAAAAAAAUQUAAAAAAABSBQAAAAAAAAAAAABSBQAAAAAAAFMFAAAAAAAAAAAAAFMFAAAAAAAAVAUAAAAAAAAAAAAAVAUAAAAAAABVBQAAAAAAAAAAAABVBQAAAAAAAFYFAAAAAAAAAAAAAFYFAAAAAAAAVwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQUAAAAAAABNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "_flags,"
					},
					"BwAAAFcFAAAAAAAAWAUAAAAAAAAAAAAAWAUAAAAAAABZBQAAAAAAAAAAAABZBQAAAAAAAFoFAAAAAAAAAAAAAFoFAAAAAAAAWwUAAAAAAAAAAAAAWwUAAAAAAABcBQAAAAAAAAAAAABcBQAAAAAAAF0FAAAAAAAAAAAAAF0FAAAAAAAAXgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwUAAAAAAABXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAF4FAAAAAAAAXwUAAAAAAAAAAAAAXwUAAAAAAABgBQAAAAAAAAAAAABfBQAAAAAAAF8FAAAAAAAAAQAAAAlfBQAAAAAAAGEFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"left_delete",
					null,
					"AQAAAGAFAAAAAAAAYAUAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAYQUAAAAAAABhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAGAFAAAAAAAAYQUAAAAAAAAAAAAAYQUAAAAAAABiBQAAAAAAAAAAAABfBQAAAAAAAF8FAAAAAAAAAQAAAAk",
					"AQAAAAAAAAABAAAAYAUAAAAAAABgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"reindent",
					null,
					"AQAAAF8FAAAAAAAAYQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwUAAAAAAABfBQAAAAAAAAAAAAAAAD5A"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "language:"
					},
					"CQAAAGEFAAAAAAAAYgUAAAAAAAAAAAAAYgUAAAAAAABjBQAAAAAAAAAAAABjBQAAAAAAAGQFAAAAAAAAAAAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABmBQAAAAAAAAAAAABmBQAAAAAAAGcFAAAAAAAAAAAAAGcFAAAAAAAAaAUAAAAAAAAAAAAAaAUAAAAAAABpBQAAAAAAAAAAAABpBQAAAAAAAGoFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQUAAAAAAABhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGoFAAAAAAAAawUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagUAAAAAAABqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAGsFAAAAAAAAbQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawUAAAAAAABrBQAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGwFAAAAAAAAbgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAUAAAAAAABsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAG0FAAAAAAAAbgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQUAAAAAAABtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAG8FAAAAAAAAcAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwUAAAAAAABvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHAFAAAAAAAAcQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAUAAAAAAABwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHEFAAAAAAAAcwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQUAAAAAAABxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "cpp"
					},
					"AwAAAHIFAAAAAAAAcwUAAAAAAAAAAAAAcwUAAAAAAAB0BQAAAAAAAAAAAAB0BQAAAAAAAHUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgUAAAAAAAByBQAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHcFAAAAAAAAeAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwUAAAAAAAB3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHgFAAAAAAAAeQUAAAAAAAAAAAAAeQUAAAAAAAB7BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAUAAAAAAAB4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": "native;"
					},
					"BwAAAHsFAAAAAAAAfAUAAAAAAAAAAAAAfAUAAAAAAAB9BQAAAAAAAAAAAAB9BQAAAAAAAH4FAAAAAAAAAAAAAH4FAAAAAAAAfwUAAAAAAAAAAAAAfwUAAAAAAACABQAAAAAAAAAAAACABQAAAAAAAIEFAAAAAAAAAAAAAIEFAAAAAAAAggUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewUAAAAAAAB7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAIIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACEBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggUAAAAAAACCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					3,
					"left_delete",
					null,
					"AwAAAIMFAAAAAAAAgwUAAAAAAAABAAAAZoIFAAAAAAAAggUAAAAAAAABAAAAIIEFAAAAAAAAgQUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAhAUAAAAAAACEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIEFAAAAAAAAggUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQUAAAAAAACBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAIIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACEBQAAAAAAAAAAAACEBQAAAAAAAIUFAAAAAAAAAAAAAIUFAAAAAAAAhgUAAAAAAAAAAAAAhgUAAAAAAACHBQAAAAAAAAAAAACHBQAAAAAAAIgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggUAAAAAAACCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIgFAAAAAAAAiQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAUAAAAAAACIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADiBQAAAAAAAAAAAADgBQAAAAAAAOAFAAAAAAAAAgAAAAkJ4AUAAAAAAADhBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wUAAAAAAADfBQAAAAAAAP///////+9/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "add_project_"
					},
					"DAAAAOEFAAAAAAAA4gUAAAAAAAAAAAAA4gUAAAAAAADjBQAAAAAAAAAAAADjBQAAAAAAAOQFAAAAAAAAAAAAAOQFAAAAAAAA5QUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAADmBQAAAAAAAOcFAAAAAAAAAAAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA6AUAAAAAAADpBQAAAAAAAAAAAADpBQAAAAAAAOoFAAAAAAAAAAAAAOoFAAAAAAAA6wUAAAAAAAAAAAAA6wUAAAAAAADsBQAAAAAAAAAAAADsBQAAAAAAAO0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": "arguments"
					},
					"CQAAAO0FAAAAAAAA7gUAAAAAAAAAAAAA7gUAAAAAAADvBQAAAAAAAAAAAADvBQAAAAAAAPAFAAAAAAAAAAAAAPAFAAAAAAAA8QUAAAAAAAAAAAAA8QUAAAAAAADyBQAAAAAAAAAAAADyBQAAAAAAAPMFAAAAAAAAAAAAAPMFAAAAAAAA9AUAAAAAAAAAAAAA9AUAAAAAAAD1BQAAAAAAAAAAAAD1BQAAAAAAAPYFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QUAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPYFAAAAAAAA+AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gUAAAAAAAD2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPcFAAAAAAAA+QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wUAAAAAAAD3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": "-DNDEBUG"
					},
					"CAAAAPgFAAAAAAAA+QUAAAAAAAAAAAAA+QUAAAAAAAD6BQAAAAAAAAAAAAD6BQAAAAAAAPsFAAAAAAAAAAAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA/AUAAAAAAAD9BQAAAAAAAAAAAAD9BQAAAAAAAP4FAAAAAAAAAAAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA/wUAAAAAAAAABgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AUAAAAAAAD4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAEGAAAAAAAAAgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQYAAAAAAAABBgAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAAIGAAAAAAAAAwYAAAAAAAAAAAAAAwYAAAAAAAAEBgAAAAAAAAAAAAADBgAAAAAAAAMGAAAAAAAAAQAAAAkDBgAAAAAAAAUGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgYAAAAAAAACBgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"left_delete",
					null,
					"AQAAAAQGAAAAAAAABAYAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAABQYAAAAAAAAFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"insert",
					{
						"characters": "\nla"
					},
					"BgAAAAIGAAAAAAAAAwYAAAAAAAAAAAAAAwYAAAAAAAAEBgAAAAAAAAAAAAADBgAAAAAAAAMGAAAAAAAAAQAAAAkDBgAAAAAAAAUGAAAAAAAAAAAAAAUGAAAAAAAABgYAAAAAAAAAAAAABgYAAAAAAAAHBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgYAAAAAAAACBgAAAAAAAP///////+9/"
				],
				[
					310,
					2,
					"left_delete",
					null,
					"AgAAAAYGAAAAAAAABgYAAAAAAAABAAAAYQUGAAAAAAAABQYAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "language:"
					},
					"CQAAAAUGAAAAAAAABgYAAAAAAAAAAAAABgYAAAAAAAAHBgAAAAAAAAAAAAAHBgAAAAAAAAgGAAAAAAAAAAAAAAgGAAAAAAAACQYAAAAAAAAAAAAACQYAAAAAAAAKBgAAAAAAAAAAAAAKBgAAAAAAAAsGAAAAAAAAAAAAAAsGAAAAAAAADAYAAAAAAAAAAAAADAYAAAAAAAANBgAAAAAAAAAAAAANBgAAAAAAAA4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQYAAAAAAAAFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					312,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4GAAAAAAAADwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgYAAAAAAAAOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAA8GAAAAAAAAEQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwYAAAAAAAAPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAA8GAAAAAAAADwYAAAAAAAABAAAAJw8GAAAAAAAADwYAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAEAYAAAAAAAAQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAA8GAAAAAAAAEQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwYAAAAAAAAPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABAGAAAAAAAAEgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAYAAAAAAAAQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAABEGAAAAAAAAEgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQYAAAAAAAARBgAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABMGAAAAAAAAFAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwYAAAAAAAATBgAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQGAAAAAAAAFQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAYAAAAAAAAUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAABUGAAAAAAAAFwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQYAAAAAAAAVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": "cpp"
					},
					"AwAAABYGAAAAAAAAFwYAAAAAAAAAAAAAFwYAAAAAAAAYBgAAAAAAAAAAAAAYBgAAAAAAABkGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgYAAAAAAAAWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABsGAAAAAAAAHAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwYAAAAAAAAbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABwGAAAAAAAAHQYAAAAAAAAAAAAAHQYAAAAAAAAfBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAYAAAAAAAAcBgAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"insert",
					{
						"characters": "native:"
					},
					"BwAAAB8GAAAAAAAAIAYAAAAAAAAAAAAAIAYAAAAAAAAhBgAAAAAAAAAAAAAhBgAAAAAAACIGAAAAAAAAAAAAACIGAAAAAAAAIwYAAAAAAAAAAAAAIwYAAAAAAAAkBgAAAAAAAAAAAAAkBgAAAAAAACUGAAAAAAAAAAAAACUGAAAAAAAAJgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwYAAAAAAAAfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": " false)"
					},
					"BwAAACYGAAAAAAAAJwYAAAAAAAAAAAAAJwYAAAAAAAAoBgAAAAAAAAAAAAAoBgAAAAAAACkGAAAAAAAAAAAAACkGAAAAAAAAKgYAAAAAAAAAAAAAKgYAAAAAAAArBgAAAAAAAAAAAAArBgAAAAAAACwGAAAAAAAAAAAAACwGAAAAAAAALQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgYAAAAAAAAmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"left_delete",
					null,
					"AQAAACwGAAAAAAAALAYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACwGAAAAAAAALQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAYAAAAAAAAsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "project_argume"
					},
					"DgAAAO4DAAAAAAAA7wMAAAAAAAAAAAAA7wMAAAAAAADwAwAAAAAAAAAAAADwAwAAAAAAAPEDAAAAAAAAAAAAAPEDAAAAAAAA8gMAAAAAAAAAAAAA8gMAAAAAAADzAwAAAAAAAAAAAADzAwAAAAAAAPQDAAAAAAAAAAAAAPQDAAAAAAAA9QMAAAAAAAAAAAAA9QMAAAAAAAD2AwAAAAAAAAAAAAD2AwAAAAAAAPcDAAAAAAAAAAAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD5AwAAAAAAAAAAAAD5AwAAAAAAAPoDAAAAAAAAAAAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA+wMAAAAAAAD8AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gMAAAAAAADuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "nts"
					},
					"AwAAAPwDAAAAAAAA/QMAAAAAAAAAAAAA/QMAAAAAAAD+AwAAAAAAAAAAAAD+AwAAAAAAAP8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AMAAAAAAAD8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAP8DAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAABBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wMAAAAAAAD/AwAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEEAAAAAAAAAgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAAIEAAAAAAAAAwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgQAAAAAAAACBAAAAAAAAP///////+9/"
				],
				[
					363,
					1,
					"left_delete",
					null,
					"AQAAAAIEAAAAAAAAAgQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAAIEAAAAAAAAAwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"left_delete",
					null,
					"AQAAAAIEAAAAAAAAAgQAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAIEAAAAAAAABAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAMEAAAAAAAABAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAQEAAAAAAAABQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"reindent",
					null,
					"AQAAAAQEAAAAAAAABQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAAAAA"
				],
				[
					379,
					1,
					"paste",
					null,
					"AQAAAAUEAAAAAAAAYwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQQAAAAAAAAFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAAUEAAAAAAAABQQAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAABgQAAAAAAAAGBAAAAAAAAAAAAAAAgE5A"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": "project_argume"
					},
					"DwAAAKkEAAAAAAAAqgQAAAAAAAAAAAAAqgQAAAAAAACqBAAAAAAAAF8AAAAnLVduby11bmtub3duLXByYWdtYXMnLAoJJy1Xbm8tbm9ubnVsbCcsCgknLVduby1ub25udWxsLWNvbXBhcmUnLAoJJy1Xbm8tc3RyaW5nb3AtdHJ1bmNhdGlvbicpLKoEAAAAAAAAqwQAAAAAAAAAAAAAqwQAAAAAAACsBAAAAAAAAAAAAACsBAAAAAAAAK0EAAAAAAAAAAAAAK0EAAAAAAAArgQAAAAAAAAAAAAArgQAAAAAAACvBAAAAAAAAAAAAACvBAAAAAAAALAEAAAAAAAAAAAAALAEAAAAAAAAsQQAAAAAAAAAAAAAsQQAAAAAAACyBAAAAAAAAAAAAACyBAAAAAAAALMEAAAAAAAAAAAAALMEAAAAAAAAtAQAAAAAAAAAAAAAtAQAAAAAAAC1BAAAAAAAAAAAAAC1BAAAAAAAALYEAAAAAAAAAAAAALYEAAAAAAAAtwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQQAAAAAAAAIBQAAAAAAAP///////+9/"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "nts"
					},
					"AwAAALcEAAAAAAAAuAQAAAAAAAAAAAAAuAQAAAAAAAC5BAAAAAAAAAAAAAC5BAAAAAAAALoEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwQAAAAAAAC3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANgEAAAAAAAA2QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AQAAAAAAADYBAAAAAAAAP///////+9/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGQEAAAAAAAAZQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAQAAAAAAABkBAAAAAAAAAAAAAAAIGBA"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALsEAAAAAAAAvAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwQAAAAAAAC7BAAAAAAAAP///////+9/"
				],
				[
					433,
					1,
					"left_delete",
					null,
					"AQAAAKkEAAAAAAAAqQQAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAqgQAAAAAAACqBAAAAAAAAAAAAAAAAD5A"
				],
				[
					435,
					1,
					"left_delete",
					null,
					"AQAAAKgEAAAAAAAAqAQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAqQQAAAAAAACpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANwEAAAAAAAA3QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAACBA"
				],
				[
					446,
					1,
					"paste",
					null,
					"AQAAAN0EAAAAAAAAUgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": "host"
					},
					"BQAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA9gQAAAAAAAD2BAAAAAAAAAYAAABuYXRpdmX2BAAAAAAAAPcEAAAAAAAAAAAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QQAAAAAAAD7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BgAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABKBQAAAAAAAAQAAAB0cnVlSgUAAAAAAABLBQAAAAAAAAAAAABLBQAAAAAAAEwFAAAAAAAAAAAAAEwFAAAAAAAATQUAAAAAAAAAAAAATQUAAAAAAABOBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQUAAAAAAABNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALoEAAAAAAAAuwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADAFAAAAAAAAMQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAUAAAAAAAAwBQAAAAAAAAAAAAAA8H5A"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGIEAAAAAAAAYwQAAAAAAAAAAAAAYwQAAAAAAABkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgQAAAAAAABiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGQEAAAAAAAAZgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAQAAAAAAABkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAGUEAAAAAAAAZgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQQAAAAAAABlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"left_delete",
					null,
					"AQAAAGUEAAAAAAAAZQQAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAZgQAAAAAAABmBAAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": "-Wunuse"
					},
					"BwAAAGUEAAAAAAAAZgQAAAAAAAAAAAAAZgQAAAAAAABnBAAAAAAAAAAAAABnBAAAAAAAAGgEAAAAAAAAAAAAAGgEAAAAAAAAaQQAAAAAAAAAAAAAaQQAAAAAAABqBAAAAAAAAAAAAABqBAAAAAAAAGsEAAAAAAAAAAAAAGsEAAAAAAAAbAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQQAAAAAAABlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": "d_"
					},
					"AgAAAGwEAAAAAAAAbQQAAAAAAAAAAAAAbQQAAAAAAABuBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"left_delete",
					null,
					"AQAAAG0EAAAAAAAAbQQAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAbgQAAAAAAABuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAG0EAAAAAAAAbgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQQAAAAAAABtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					575,
					1,
					"insert",
					{
						"characters": "parameter"
					},
					"CQAAAG4EAAAAAAAAbwQAAAAAAAAAAAAAbwQAAAAAAABwBAAAAAAAAAAAAABwBAAAAAAAAHEEAAAAAAAAAAAAAHEEAAAAAAAAcgQAAAAAAAAAAAAAcgQAAAAAAABzBAAAAAAAAAAAAABzBAAAAAAAAHQEAAAAAAAAAAAAAHQEAAAAAAAAdQQAAAAAAAAAAAAAdQQAAAAAAAB2BAAAAAAAAAAAAAB2BAAAAAAAAHcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgQAAAAAAABuBAAAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHgEAAAAAAAAeQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGIEAAAAAAAAYwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgQAAAAAAABiBAAAAAAAAP///////+9/"
				]
			]
		},
		{
			"file": "libc-skeleton/test/meson.build",
			"settings":
			{
				"buffer_size": 2165,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					122,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EgAAAD8IAAAAAAAAQQgAAAAAAAAAAAAAKggAAAAAAAAsCAAAAAAAAAAAAAARCAAAAAAAABMIAAAAAAAAAAAAAPoHAAAAAAAA/AcAAAAAAAAAAAAA3AcAAAAAAADeBwAAAAAAAAAAAADaBwAAAAAAANwHAAAAAAAAAAAAAMUHAAAAAAAAxwcAAAAAAAAAAAAArwcAAAAAAACxBwAAAAAAAAAAAACVBwAAAAAAAJcHAAAAAAAAAAAAAF0HAAAAAAAAXwcAAAAAAAAAAAAAzgYAAAAAAADQBgAAAAAAAAAAAADLBgAAAAAAAM0GAAAAAAAAAAAAALwGAAAAAAAAvgYAAAAAAAAAAAAAogYAAAAAAACkBgAAAAAAAAAAAABtBgAAAAAAAG8GAAAAAAAAAAAAAFsGAAAAAAAAXQYAAAAAAAAAAAAATQYAAAAAAABPBgAAAAAAAAAAAAA0BgAAAAAAADYGAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQYAAAAAAABBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EgAAAGEIAAAAAAAAYQgAAAAAAAACAAAAIyBKCAAAAAAAAEoIAAAAAAAAAgAAACMgLwgAAAAAAAAvCAAAAAAAAAIAAAAjIBYIAAAAAAAAFggAAAAAAAACAAAAIyD2BwAAAAAAAPYHAAAAAAAAAgAAACMg8gcAAAAAAADyBwAAAAAAAAIAAAAjINsHAAAAAAAA2wcAAAAAAAACAAAAIyDDBwAAAAAAAMMHAAAAAAAAAgAAACMgpwcAAAAAAACnBwAAAAAAAAIAAAAjIG0HAAAAAAAAbQcAAAAAAAACAAAAIyDcBgAAAAAAANwGAAAAAAAAAgAAACMg1wYAAAAAAADXBgAAAAAAAAIAAAAjIMYGAAAAAAAAxgYAAAAAAAACAAAAIyCqBgAAAAAAAKoGAAAAAAAAAgAAACMgcwYAAAAAAABzBgAAAAAAAAIAAAAjIF8GAAAAAAAAXwYAAAAAAAACAAAAIyBPBgAAAAAAAE8GAAAAAAAAAgAAACMgNAYAAAAAAAA0BgAAAAAAAAIAAAAjIA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwUAAAAAAACvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMoGAAAAAAAAzAYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMsGAAAAAAAAzAYAAAAAAAAAAAAAzAYAAAAAAADNBgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAMwGAAAAAAAAzAYAAAAAAAABAAAACcsGAAAAAAAAywYAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMoGAAAAAAAAygYAAAAAAAABAAAAJ8oGAAAAAAAAygYAAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\ninstall:"
					},
					"CgAAAMoGAAAAAAAAywYAAAAAAAAAAAAAywYAAAAAAADMBgAAAAAAAAAAAADMBgAAAAAAAM0GAAAAAAAAAAAAAM0GAAAAAAAAzgYAAAAAAAAAAAAAzgYAAAAAAADPBgAAAAAAAAAAAADPBgAAAAAAANAGAAAAAAAAAAAAANAGAAAAAAAA0QYAAAAAAAAAAAAA0QYAAAAAAADSBgAAAAAAAAAAAADSBgAAAAAAANMGAAAAAAAAAAAAANMGAAAAAAAA1AYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAANQGAAAAAAAA1QYAAAAAAAAAAAAA1QYAAAAAAADWBgAAAAAAAAAAAADWBgAAAAAAANcGAAAAAAAAAAAAANcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAADZBgAAAAAAANoGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANoGAAAAAAAA2wYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "native_"
					},
					"BwAAAPcFAAAAAAAA+AUAAAAAAAAAAAAA+AUAAAAAAAD5BQAAAAAAAAAAAAD5BQAAAAAAAPoFAAAAAAAAAAAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD8BQAAAAAAAAAAAAD8BQAAAAAAAP0FAAAAAAAAAAAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AQAAAAEAAAD3BQAAAAAAAPcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADQGAAAAAAAANQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AQAAAAEAAAA0BgAAAAAAADQGAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "libc-skeleton/src/string/memcmp.c",
			"settings":
			{
				"buffer_size": 615,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 4160 files for \"assert(\" (case sensitive)\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\libc-skeleton\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #else\n  188  #include <assert.h>\n  189: #define Bug(x) assert(!(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\src\\time\\asctime_r.c:\n   18  \t\t * on other implementations (e.g. stack smashing..).\n   19  \t\t */\n   20: \t\tassert(0 && \"tm fields are too large for buffer\");\n   21  \t}\n   22  \treturn buf;\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\openlibm\\src\\e_j0.c:\n  280  \tGET_HIGH_WORD(ix,x);\n  281  \tix &= 0x7fffffff;\n  282:         assert(ix>=0x40000000 && ix<=0x48000000);\n  283  \tif(ix>=0x40200000)     {p = pR8; q= pS8;}\n  284  \telse if(ix>=0x40122E8B){p = pR5; q= pS5;}\n  ...\n  377  \tGET_HIGH_WORD(ix,x);\n  378  \tix &= 0x7fffffff;\n  379:         assert(ix>=0x40000000 && ix<=0x48000000);\n  380  \tif(ix>=0x40200000)     {p = qR8; q= qS8;}\n  381  \telse if(ix>=0x40122E8B){p = qR5; q= qS5;}\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\openlibm\\src\\e_j1.c:\n  274  \tGET_HIGH_WORD(ix,x);\n  275  \tix &= 0x7fffffff;\n  276:         assert(ix>=0x40000000 && ix<=0x48000000);\n  277          if(ix>=0x40200000)     {p = pr8; q= ps8;}\n  278          else if(ix>=0x40122E8B){p = pr5; q= ps5;}\n  ...\n  372  \tGET_HIGH_WORD(ix,x);\n  373  \tix &= 0x7fffffff;\n  374:         assert(ix>=0x40000000 && ix<=0x48000000);\n  375  \tif(ix>=0x40200000)     {p = qr8; q= qs8;}\n  376  \telse if(ix>=0x40122E8B){p = qr5; q= qs5;}\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\openlibm\\wasm32\\assert.h:\n    1: #define assert(x) ((void)0)\n    2  \n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\openlibm\\wasm32\\stdint.h:\n   14  typedef int                intptr_t;\n   15  \n   16: _Static_assert(sizeof (uint8_t)  == 1, \"invalid size\");\n   17: _Static_assert(sizeof (uint16_t) == 2, \"invalid size\");\n   18: _Static_assert(sizeof (uint32_t) == 4, \"invalid size\");\n   19: _Static_assert(sizeof (uint64_t) == 8, \"invalid size\");\n   20  \n   21: _Static_assert(sizeof (int8_t)  == 1, \"invalid size\");\n   22: _Static_assert(sizeof (int16_t) == 2, \"invalid size\");\n   23: _Static_assert(sizeof (int32_t) == 4, \"invalid size\");\n   24: _Static_assert(sizeof (int64_t) == 8, \"invalid size\");\n   25  \n   26: _Static_assert(sizeof (uintptr_t) == sizeof (intptr_t), \"invalid size\");\n   27: _Static_assert(sizeof (uintptr_t) == sizeof (void*), \"invalid size\");\n   28: _Static_assert(sizeof (uintptr_t) == 4, \"invalid size\");\n   29  \n   30  #define UINT8_MAX  0xFF\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\test\\autotest.cpp:\n  204      {\n  205        fprintf(stderr, \"Unknown option\\n\");\n  206:       assert(false);\n  207      };\n  208    };\n\nC:\\code\\EA\\meson_build\\libc-skeleton\\subprojects\\printf\\test\\catch.hpp:\n  641  \n  642          auto operator[] ( size_type index ) const noexcept -> char {\n  643:             assert(index < m_size);\n  644              return m_start[index];\n  645          }\n  ...\n 1481          template<typename E>\n 1482          Detail::EnumInfo const& registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list<E> values ) {\n 1483:             static_assert(sizeof(int) >= sizeof(E), \"Cannot serialize enum to int\");\n 1484              std::vector<int> intValues;\n 1485              intValues.reserve( values.size() );\n ....\n 2242          template<typename T>\n 2243          auto operator && ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2244:             static_assert(always_false<T>::value,\n 2245              \"chained comparisons are not supported inside assertions, \"\n 2246              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2249          template<typename T>\n 2250          auto operator || ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2251:             static_assert(always_false<T>::value,\n 2252              \"chained comparisons are not supported inside assertions, \"\n 2253              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2256          template<typename T>\n 2257          auto operator == ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2258:             static_assert(always_false<T>::value,\n 2259              \"chained comparisons are not supported inside assertions, \"\n 2260              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2263          template<typename T>\n 2264          auto operator != ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2265:             static_assert(always_false<T>::value,\n 2266              \"chained comparisons are not supported inside assertions, \"\n 2267              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2270          template<typename T>\n 2271          auto operator > ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2272:             static_assert(always_false<T>::value,\n 2273              \"chained comparisons are not supported inside assertions, \"\n 2274              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2277          template<typename T>\n 2278          auto operator < ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2279:             static_assert(always_false<T>::value,\n 2280              \"chained comparisons are not supported inside assertions, \"\n 2281              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2284          template<typename T>\n 2285          auto operator >= ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2286:             static_assert(always_false<T>::value,\n 2287              \"chained comparisons are not supported inside assertions, \"\n 2288              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2291          template<typename T>\n 2292          auto operator <= ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 2293:             static_assert(always_false<T>::value,\n 2294              \"chained comparisons are not supported inside assertions, \"\n 2295              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2388          template<typename RhsT>\n 2389          auto operator && ( RhsT const& ) -> BinaryExpr<LhsT, RhsT const&> const {\n 2390:             static_assert(always_false<RhsT>::value,\n 2391              \"operator&& is not supported inside assertions, \"\n 2392              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2395          template<typename RhsT>\n 2396          auto operator || ( RhsT const& ) -> BinaryExpr<LhsT, RhsT const&> const {\n 2397:             static_assert(always_false<RhsT>::value,\n 2398              \"operator|| is not supported inside assertions, \"\n 2399              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 3966      template<typename T>\n 3967      class FixedValuesGenerator final : public IGenerator<T> {\n 3968:         static_assert(!std::is_same<T, bool>::value,\n 3969              \"FixedValuesGenerator does not support bools because of std::vector<bool>\"\n 3970              \"specialization, use SingleValue Generator instead.\");\n ....\n 4127              m_target(target)\n 4128          {\n 4129:             assert(target != 0 && \"Empty generators are not allowed\");\n 4130          }\n 4131          T const& get() const override {\n ....\n 4199      template <typename T>\n 4200      class RepeatGenerator : public IGenerator<T> {\n 4201:         static_assert(!std::is_same<T, bool>::value,\n 4202              \"RepeatGenerator currently does not support bools\"\n 4203              \"because of std::vector<bool> specialization\");\n ....\n 4212              m_target_repeats(repeats)\n 4213          {\n 4214:             assert(m_target_repeats > 0 && \"Repeat generator must repeat at least once\");\n 4215          }\n 4216  \n ....\n 4678          m_positive(m_step > T(0))\n 4679      {\n 4680:         assert(m_current != m_end && \"Range start and end cannot be equal\");\n 4681:         assert(m_step != T(0) && \"Step size cannot be zero\");\n 4682:         assert(((m_positive && m_current <= m_end) || (!m_positive && m_current >= m_end)) && \"Step moves away from end\");\n 4683      }\n 4684  \n ....\n 4699  template <typename T>\n 4700  GeneratorWrapper<T> range(T const& start, T const& end, T const& step) {\n 4701:     static_assert(std::is_arithmetic<T>::value && !std::is_same<T, bool>::value, \"Type must be numeric\");\n 4702      return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end, step));\n 4703  }\n ....\n 4705  template <typename T>\n 4706  GeneratorWrapper<T> range(T const& start, T const& end) {\n 4707:     static_assert(std::is_integral<T>::value && !std::is_same<T, bool>::value, \"Type must be an integer\");\n 4708      return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end));\n 4709  }\n ....\n 4711  template <typename T>\n 4712  class IteratorGenerator final : public IGenerator<T> {\n 4713:     static_assert(!std::is_same<T, bool>::value,\n 4714          \"IteratorGenerator currently does not support bools\"\n 4715          \"because of std::vector<bool> specialization\");\n ....\n 5904  \n 5905          bool assertionEnded(AssertionStats const& assertionStats) override {\n 5906:             assert(!m_sectionStack.empty());\n 5907              // AssertionResult holds a pointer to a temporary DecomposedExpression,\n 5908              // which getExpandedExpression() calls to build the expression string.\n ....\n 5916          }\n 5917          void sectionEnded(SectionStats const& sectionStats) override {\n 5918:             assert(!m_sectionStack.empty());\n 5919              SectionNode& node = *m_sectionStack.back();\n 5920              node.stats = sectionStats;\n ....\n 5923          void testCaseEnded(TestCaseStats const& testCaseStats) override {\n 5924              auto node = std::make_shared<TestCaseNode>(testCaseStats);\n 5925:             assert(m_sectionStack.size() == 0);\n 5926              node->children.push_back(m_rootSection);\n 5927              m_testCases.push_back(node);\n 5928              m_rootSection.reset();\n 5929  \n 5930:             assert(m_deepestSection);\n 5931              m_deepestSection->stdOut = testCaseStats.stdOut;\n 5932              m_deepestSection->stdErr = testCaseStats.stdErr;\n ....\n 7772  \n 7773                  double result = 0.0;\n 7774:                 assert(p >= 0 && p <= 1);\n 7775                  if (p < 0 || p > 1) {\n 7776                      return result;\n ....\n 8023  \n 8024          void engage() {\n 8025:             assert(!m_started && \"Handler cannot be installed twice.\");\n 8026              m_started = true;\n 8027              engage_platform();\n ....\n 8029  \n 8030          void disengage() {\n 8031:             assert(m_started && \"Handler cannot be uninstalled without being installed first\");\n 8032              m_started = false;\n 8033              disengage_platform();\n ....\n 8516  \n 8517          auto isBoundary(size_t at) const -> bool {\n 8518:             assert(at > 0);\n 8519:             assert(at <= line().size());\n 8520  \n 8521              return at == line().size() ||\n ....\n 8526  \n 8527          void calcLength() {\n 8528:             assert(m_stringIndex < m_column.m_strings.size());\n 8529  \n 8530              m_suffix = false;\n ....\n 8572  \n 8573          explicit iterator(Column const& column) : m_column(column) {\n 8574:             assert(m_column.m_width > m_column.m_indent);\n 8575:             assert(m_column.m_initialIndent == std::string::npos || m_column.m_width > m_column.m_initialIndent);\n 8576              calcLength();\n 8577              if (m_len == 0)\n ....\n 8580  \n 8581          auto operator *() const -> std::string {\n 8582:             assert(m_stringIndex < m_column.m_strings.size());\n 8583:             assert(m_pos <= m_end);\n 8584              return addIndentAndSuffix(line().substr(m_pos, m_len));\n 8585          }\n ....\n 8622  \n 8623      auto width(size_t newWidth) -> Column& {\n 8624:         assert(newWidth > 0);\n 8625          m_width = newWidth;\n 8626          return *this;\n ....\n 8914  \n 8915          auto operator*() const -> Token {\n 8916:             assert( !m_tokenBuffer.empty() );\n 8917              return m_tokenBuffer.front();\n 8918          }\n 8919  \n 8920          auto operator->() const -> Token const * {\n 8921:             assert( !m_tokenBuffer.empty() );\n 8922              return &m_tokenBuffer.front();\n 8923          }\n ....\n 9003              m_errorMessage( other.errorMessage() )\n 9004          {\n 9005:             assert( type() != ResultBase::Ok );\n 9006          }\n 9007  \n ....\n 9021              // Errors shouldn't reach this point, but if they do\n 9022              // the actual error message will be in m_errorMessage\n 9023:             assert( m_type != ResultBase::LogicError );\n 9024:             assert( m_type != ResultBase::RuntimeError );\n 9025              if( m_type != ResultBase::Ok )\n 9026                  std::abort();\n ....\n 9033              m_errorMessage(message)\n 9034          {\n 9035:             assert( m_type != ResultBase::Ok );\n 9036          }\n 9037  \n ....\n 9167      template<typename ReturnType>\n 9168      struct LambdaInvoker {\n 9169:         static_assert( std::is_same<ReturnType, ParserResult>::value, \"Lambda must return void or clara::ParserResult\" );\n 9170  \n 9171          template<typename L, typename ArgType>\n ....\n 9197          L m_lambda;\n 9198  \n 9199:         static_assert( UnaryLambdaTraits<L>::isValid, \"Supplied lambda must take exactly one argument\" );\n 9200          explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}\n 9201  \n ....\n 9209          L m_lambda;\n 9210  \n 9211:         static_assert( UnaryLambdaTraits<L>::isValid, \"Supplied lambda must take exactly one argument\" );\n 9212:         static_assert( std::is_same<typename UnaryLambdaTraits<L>::ArgType, bool>::value, \"flags must be boolean\" );\n 9213  \n 9214          explicit BoundFlagLambda( L const &lambda ) : m_lambda( lambda ) {}\n ....\n 9354                  return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, remainingTokens ) );\n 9355  \n 9356:             assert( !m_ref->isFlag() );\n 9357              auto valueRef = static_cast<detail::BoundValueRefBase*>( m_ref.get() );\n 9358  \n ....\n 9605              };\n 9606              const size_t totalParsers = m_options.size() + m_args.size();\n 9607:             assert( totalParsers < 512 );\n 9608              // ParserInfo parseInfos[totalParsers]; // <-- this is what we really want to do\n 9609              ParserInfo parseInfos[512];\n ....\n 10628  \n 10629              const auto valueNames = Catch::Detail::parseEnums( allValueNames );\n 10630:             assert( valueNames.size() == values.size() );\n 10631              std::size_t i = 0;\n 10632              for( auto value : values )\n .....\n 10922  \n 10923      FatalConditionHandler::FatalConditionHandler() {\n 10924:         assert(!altStackMem && \"Cannot initialize POSIX signal handler when one already exists\");\n 10925          if (altStackSize == 0) {\n 10926              altStackSize = std::max(static_cast<size_t>(SIGSTKSZ), minStackSizeForErrors);\n .....\n 11487  \n 11488      int32_t convert(float f) {\n 11489:         static_assert(sizeof(float) == sizeof(int32_t), \"Important ULP matcher assumption violated\");\n 11490          int32_t i;\n 11491          std::memcpy(&i, &f, sizeof(f));\n .....\n 11494  \n 11495      int64_t convert(double d) {\n 11496:         static_assert(sizeof(double) == sizeof(int64_t), \"Important ULP matcher assumption violated\");\n 11497          int64_t i;\n 11498          std::memcpy(&i, &d, sizeof(d));\n .....\n 11918              }\n 11919          }\n 11920:         assert(openings.empty() && \"Mismatched openings\");\n 11921          m_messages.emplace_back(macroName, lineInfo, resultType);\n 11922          m_messages.back().message = static_cast<std::string>(trimmed(start, names.size() - 1));\n .....\n 11925      Capturer::~Capturer() {\n 11926          if ( !uncaught_exceptions() ){\n 11927:             assert( m_captured == m_messages.size() );\n 11928              for( size_t i = 0; i < m_captured; ++i  )\n 11929                  m_resultCapture.popScopedMessage( m_messages[i] );\n .....\n 11932  \n 11933      void Capturer::captureValue( size_t index, std::string const& value ) {\n 11934:         assert( index < m_messages.size() );\n 11935          m_messages[index].message += value;\n 11936          m_resultCapture.pushScopedMessage( m_messages[index] );\n .....\n 12611                  if (currentTracker.nameAndLocation() == nameAndLocation) {\n 12612                      auto thisTracker = currentTracker.parent().findChild(nameAndLocation);\n 12613:                     assert(thisTracker);\n 12614:                     assert(thisTracker->isGeneratorTracker());\n 12615                      tracker = std::static_pointer_cast<GeneratorTracker>(thisTracker);\n 12616                  } else if ( TestCaseTracking::ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {\n 12617:                     assert( childTracker );\n 12618:                     assert( childTracker->isGeneratorTracker() );\n 12619                      tracker = std::static_pointer_cast<GeneratorTracker>( childTracker );\n 12620                  } else {\n .....\n 12668                          parent = &( parent->parent() );\n 12669                      }\n 12670:                     assert( parent &&\n 12671                              \"Missing root (test case) level section\" );\n 12672  \n .....\n 12754  \n 12755          ITracker& rootTracker = m_trackerContext.startRun();\n 12756:         assert(rootTracker.isSectionTracker());\n 12757          static_cast<SectionTracker&>(rootTracker).addInitialFilters(m_config->getSectionsToRun());\n 12758          do {\n .....\n 14437      }\n 14438      ITracker& TrackerBase::parent() {\n 14439:         assert( m_parent ); // Should always be non-null except for root\n 14440          return *m_parent;\n 14441      }\n .....\n 14500  \n 14501      void TrackerBase::moveToParent() {\n 14502:         assert( m_parent );\n 14503          m_ctx.setCurrentTracker( m_parent );\n 14504      }\n .....\n 14538          ITracker& currentTracker = ctx.currentTracker();\n 14539          if( ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {\n 14540:             assert( childTracker );\n 14541:             assert( childTracker->isSectionTracker() );\n 14542              section = std::static_pointer_cast<SectionTracker>( childTracker );\n 14543          }\n .....\n 16639  }\n 16640  void ConsoleReporter::printTestCaseAndSectionHeader() {\n 16641:     assert(!m_sectionStack.empty());\n 16642      printOpenHeader(currentTestCaseInfo->name);\n 16643  \n .....\n 16955          // All test cases have exactly one section - which represents the\n 16956          // test case itself. That section may have 0-n nested sections\n 16957:         assert( testCaseNode.children.size() == 1 );\n 16958          SectionNode const& rootSection = *testCaseNode.children.front();\n 16959  \n .....\n 17101  \n 17102      void ListeningReporter::addReporter(IStreamingReporterPtr&& reporter) {\n 17103:         assert(!m_reporter && \"Listening reporter can wrap only 1 real reporter\");\n 17104          m_reporter = std::move( reporter );\n 17105          m_preferences.shouldRedirectStdOut = m_reporter->getPreferences().shouldRedirectStdOut;\n .....\n 17641  \n 17642  #if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)\n 17643: #define CATCH_STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__ ,      #__VA_ARGS__ );     CATCH_SUCCEED( #__VA_ARGS__ )\n 17644: #define CATCH_STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); CATCH_SUCCEED( #__VA_ARGS__ )\n 17645  #else\n 17646  #define CATCH_STATIC_REQUIRE( ... )       CATCH_REQUIRE( __VA_ARGS__ )\n .....\n 17740  \n 17741  #if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)\n 17742: #define STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )\n 17743: #define STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); SUCCEED( \"!(\" #__VA_ARGS__ \")\" )\n 17744  #else\n 17745  #define STATIC_REQUIRE( ... )       REQUIRE( __VA_ARGS__ )\n\nC:\\code\\EA\\meson_build\\reference\\000-initial-build\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\000-initial-build\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #include <assert.h>\n  188  #include <stdbool.h>\n  189: #define Bug(x) assert(!(bool)(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\000-initial-build\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\000-initial-build\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\000-initial-build\\src\\time\\asctime_r.c:\n   20  \t\t * on other implementations (e.g. stack smashing..).\n   21  \t\t */\n   22: \t\tassert(0 && \"tm fields are too large for buffer\");\n   23  \t}\n   24  \treturn buf;\n\nC:\\code\\EA\\meson_build\\reference\\001-printf-dep\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\001-printf-dep\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #include <assert.h>\n  188  #include <stdbool.h>\n  189: #define Bug(x) assert(!(bool)(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\001-printf-dep\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\001-printf-dep\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\001-printf-dep\\src\\time\\asctime_r.c:\n   20  \t\t * on other implementations (e.g. stack smashing..).\n   21  \t\t */\n   22: \t\tassert(0 && \"tm fields are too large for buffer\");\n   23  \t}\n   24  \treturn buf;\n\nC:\\code\\EA\\meson_build\\reference\\002-test-setup\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\002-test-setup\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #include <assert.h>\n  188  #include <stdbool.h>\n  189: #define Bug(x) assert(!(bool)(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\002-test-setup\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\002-test-setup\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\002-test-setup\\src\\time\\asctime_r.c:\n   20  \t\t * on other implementations (e.g. stack smashing..).\n   21  \t\t */\n   22: \t\tassert(0 && \"tm fields are too large for buffer\");\n   23  \t}\n   24  \treturn buf;\n\nC:\\code\\EA\\meson_build\\reference\\003-run-targets\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\003-run-targets\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #include <assert.h>\n  188  #include <stdbool.h>\n  189: #define Bug(x) assert(!(bool)(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\003-run-targets\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\003-run-targets\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\003-run-targets\\src\\time\\asctime_r.c:\n   20  \t\t * on other implementations (e.g. stack smashing..).\n   21  \t\t */\n   22: \t\tassert(0 && \"tm fields are too large for buffer\");\n   23  \t}\n   24  \treturn buf;\n\nC:\\code\\EA\\meson_build\\reference\\004-options-and-flags\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\004-options-and-flags\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #include <assert.h>\n  188  #include <stdbool.h>\n  189: #define Bug(x) assert(!(bool)(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\004-options-and-flags\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\004-options-and-flags\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\004-options-and-flags\\src\\time\\asctime_r.c:\n   20  \t\t * on other implementations (e.g. stack smashing..).\n   21  \t\t */\n   22: \t\tassert(0 && \"tm fields are too large for buffer\");\n   23  \t}\n   24  \treturn buf;\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #else\n  188  #include <assert.h>\n  189: #define Bug(x) assert(!(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\src\\time\\asctime_r.c:\n   18  \t\t * on other implementations (e.g. stack smashing..).\n   19  \t\t */\n   20: \t\tassert(0 && \"tm fields are too large for buffer\");\n   21  \t}\n   22  \treturn buf;\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\doc\\index.html:\n  123  \n  124  <a name=\"Assertions\"><h2>Assertions</h2></a>\n  125: <p>Runtime assert macros like the standard C library's <b>assert()</b> should\n  126: be redefined in modules being tested to use cmocka's <b>mock_assert()</b>\n  127: function.  Normally <b>mock_assert()</b> signals a\n  128  <a href=\"#Failure_Conditions\">test failure</a>.  If a function is called using\n  129: the <b>expect_assert_failure()</b> macro, any calls to <b>mock_assert()</b>\n  130  within the function will result in the execution of the test.  If no\n  131: calls to <b>mock_assert()</b> occur during the function called via\n  132  <b>expect_assert_failure()</b> a test failure is signalled.</p>\n  133  \n  134: <h4>Using mock_assert()</h4>\n  135  <a href=\"../example/assert_module.c\">assert_module.c</a>\n  136  <listing>\n  137  #include &lt;assert.h&gt;\n  138  \n  139: // If unit testing is enabled override assert with mock_assert().\n  140  #ifdef UNIT_TESTING\n  141: extern void mock_assert(const int result, const char* const expression, \n  142                          const char * const file, const int line);\n  143  #undef assert\n  144: #define assert(expression) \\\n  145:     mock_assert((int)(expression), #expression, __FILE__, __LINE__);\n  146  #endif // UNIT_TESTING\n  147  \n  148  void increment_value(int * const value) {\n  149:     assert(value);\n  150      (*value) ++;\n  151  }\n  ...\n  173  \n  174  // This test case succeeds since increment_value() asserts on the NULL pointer.\n  175: void increment_value_assert(void **state) {\n  176      expect_assert_failure(increment_value(NULL));\n  177  }\n  ...\n  199  assertion failure a cmocka assert macro will write the failure to the\n  200  standard error stream and signal a test failure.  Due to limitations of the\n  201: C language the general C standard library assert() and cmocka's\n  202  assert_true() and assert_false() macros can only display the expression that\n  203  caused the assert failure.  cmocka's type specific assert macros,\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\example\\assert_module.c:\n   18  #include \"assert_module.h\"\n   19  \n   20: /* If unit testing is enabled override assert with mock_assert(). */\n   21  #ifdef UNIT_TESTING\n   22: extern void mock_assert(const int result, const char* const expression,\n   23                          const char * const file, const int line);\n   24  #undef assert\n   25: #define assert(expression) \\\n   26:     mock_assert(((expression) ? 1 : 0), #expression, __FILE__, __LINE__);\n   27  #endif /* UNIT_TESTING */\n   28  \n   29  void increment_value(int * const value) {\n   30:     assert(value);\n   31      (*value) ++;\n   32  }\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\example\\assert_module_test.c:\n   33  /* This test case succeeds since increment_value() asserts on the NULL\n   34   * pointer. */\n   35: static void increment_value_assert(void **state) {\n   36      (void) state;\n   37  \n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\example\\calculator.c:\n   50  extern int example_test_fprintf(FILE * const file, const char *format, ...);\n   51  \n   52: /* Redirect assert to mock_assert() so assertions can be caught by cmocka. */\n   53  #ifdef assert\n   54  #undef assert\n   55  #endif /* assert */\n   56: #define assert(expression) \\\n   57:     mock_assert((int)(expression), #expression, __FILE__, __LINE__)\n   58: void mock_assert(const int result, const char* expression, const char *file,\n   59                   const int line);\n   60  \n   ..\n  133  \n  134  static int divide(int a, int b) {\n  135:     assert(b);  /* Check for divide by zero. */\n  136      return a / b;\n  137  }\n  ...\n  146          const char* const operator_string) {\n  147      size_t i;\n  148:     assert(!number_of_operator_functions || operator_functions);\n  149:     assert(operator_string != NULL);\n  150  \n  151      for (i = 0; i < number_of_operator_functions; i++) {\n  ...\n  182      int value;\n  183      int i;\n  184:     assert(!number_of_arguments || arguments);\n  185:     assert(!number_of_operator_functions || operator_functions);\n  186:     assert(error_occurred != NULL);\n  187:     assert(number_of_intermediate_values != NULL);\n  188:     assert(intermediate_values != NULL);\n  189  \n  190      *error_occurred = 0;\n  ...\n  273          printf(\"%s\\n\", argv[1]);\n  274          for (i = 2; i < argc; i += 2) {\n  275:             assert(intermediate_value_index < number_of_intermediate_values);\n  276              printf(\"  %s %s = %d\\n\", argv[i], argv[i + 1],\n  277                     intermediate_values[intermediate_value_index++]);\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\include\\cmocka.h:\n 1054   *\n 1055   * This is a set of useful assert macros like the standard C libary's\n 1056:  * assert(3) macro.\n 1057   *\n 1058   * On an assertion failure a cmocka assert macro will write the failure to the\n 1059   * standard error stream and signal a test failure. Due to limitations of the C\n 1060:  * language the general C standard library assert() and cmocka's assert_true()\n 1061   * and assert_false() macros can only display the expression that caused the\n 1062   * assert failure. cmocka's type specific assert macros, assert_{type}_equal()\n ....\n 2021   * @ingroup cmocka\n 2022   *\n 2023:  * How to handle assert(3) of the standard C library.\n 2024   *\n 2025:  * Runtime assert macros like the standard C library's assert() should be\n 2026:  * redefined in modules being tested to use cmocka's mock_assert() function.\n 2027:  * Normally mock_assert() signals a test failure. If a function is called using\n 2028:  * the expect_assert_failure() macro, any calls to mock_assert() within the\n 2029   * function will result in the execution of the test. If no calls to\n 2030:  * mock_assert() occur during the function called via expect_assert_failure() a\n 2031   * test failure is signalled.\n 2032   *\n ....\n 2035  \n 2036  /**\n 2037:  * @brief Function to replace assert(3) in tested code.\n 2038   *\n 2039:  * In conjuction with check_assert() it's possible to determine whether an\n 2040   * assert condition has failed without stopping a test.\n 2041   *\n ....\n 2044   * @param[in]  expression  The expression as string.\n 2045   *\n 2046:  * @param[in]  file  The file mock_assert() is called.\n 2047   *\n 2048:  * @param[in]  line  The line mock_assert() is called.\n 2049   *\n 2050   * @code\n 2051   * #ifdef UNIT_TESTING\n 2052:  * extern void mock_assert(const int result, const char* const expression,\n 2053   *                         const char * const file, const int line);\n 2054   *\n 2055   * #undef assert\n 2056:  * #define assert(expression) \\\n 2057:  *     mock_assert((int)(expression), #expression, __FILE__, __LINE__);\n 2058   * #endif\n 2059   *\n 2060   * void increment_value(int * const value) {\n 2061:  *     assert(value);\n 2062   *     (*value) ++;\n 2063   * }\n 2064   * @endcode\n 2065   *\n 2066:  * @see assert(3)\n 2067   * @see expect_assert_failure\n 2068   */\n 2069: void mock_assert(const int result, const char* const expression,\n 2070                   const char * const file, const int line);\n 2071  \n 2072  #ifdef DOXYGEN\n 2073  /**\n 2074:  * @brief Ensure that mock_assert() is called.\n 2075   *\n 2076:  * If mock_assert() is called the assert expression string is returned.\n 2077   *\n 2078:  * @param[in]  fn_call  The function will will call mock_assert().\n 2079   *\n 2080   * @code\n ....\n 2082   *\n 2083   * void showmessage(const char *message) {\n 2084:  *   assert(message);\n 2085   * }\n 2086   *\n ....\n 2176  } CheckParameterEvent;\n 2177  \n 2178: /* Used by expect_assert_failure() and mock_assert(). */\n 2179  extern int global_expecting_assert;\n 2180  extern jmp_buf global_expect_assert_env;\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\include\\cmocka_pbc.h:\n   38   * Checks caller responsibility against contract\n   39   */\n   40: #define REQUIRE(cond) assert(cond)\n   41  \n   42  /*\n   43   * Checks function reponsability against contract.\n   44   */\n   45: #define ENSURE(cond) assert(cond)\n   46  \n   47  /*\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\cmocka-1.1.5\\src\\cmocka.c:\n  284  \n  285  /* Keeps track of the calling context returned by setenv() so that */\n  286: /* mock_assert() can optionally jump back to expect_assert_failure(). */\n  287  jmp_buf global_expect_assert_env;\n  288  int global_expecting_assert = 0;\n  ...\n 1709  \n 1710  /* Replacement for assert. */\n 1711: void mock_assert(const int result, const char* const expression,\n 1712                   const char* const file, const int line) {\n 1713      if (!result) {\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\openlibm\\src\\e_j0.c:\n  280  \tGET_HIGH_WORD(ix,x);\n  281  \tix &= 0x7fffffff;\n  282:         assert(ix>=0x40000000 && ix<=0x48000000);\n  283  \tif(ix>=0x40200000)     {p = pR8; q= pS8;}\n  284  \telse if(ix>=0x40122E8B){p = pR5; q= pS5;}\n  ...\n  377  \tGET_HIGH_WORD(ix,x);\n  378  \tix &= 0x7fffffff;\n  379:         assert(ix>=0x40000000 && ix<=0x48000000);\n  380  \tif(ix>=0x40200000)     {p = qR8; q= qS8;}\n  381  \telse if(ix>=0x40122E8B){p = qR5; q= qS5;}\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\openlibm\\src\\e_j1.c:\n  274  \tGET_HIGH_WORD(ix,x);\n  275  \tix &= 0x7fffffff;\n  276:         assert(ix>=0x40000000 && ix<=0x48000000);\n  277          if(ix>=0x40200000)     {p = pr8; q= ps8;}\n  278          else if(ix>=0x40122E8B){p = pr5; q= ps5;}\n  ...\n  372  \tGET_HIGH_WORD(ix,x);\n  373  \tix &= 0x7fffffff;\n  374:         assert(ix>=0x40000000 && ix<=0x48000000);\n  375  \tif(ix>=0x40200000)     {p = qr8; q= qs8;}\n  376  \telse if(ix>=0x40122E8B){p = qr5; q= qs5;}\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\openlibm\\wasm32\\assert.h:\n    1: #define assert(x) ((void)0)\n    2  \n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\openlibm\\wasm32\\stdint.h:\n   14  typedef int                intptr_t;\n   15  \n   16: _Static_assert(sizeof (uint8_t)  == 1, \"invalid size\");\n   17: _Static_assert(sizeof (uint16_t) == 2, \"invalid size\");\n   18: _Static_assert(sizeof (uint32_t) == 4, \"invalid size\");\n   19: _Static_assert(sizeof (uint64_t) == 8, \"invalid size\");\n   20  \n   21: _Static_assert(sizeof (int8_t)  == 1, \"invalid size\");\n   22: _Static_assert(sizeof (int16_t) == 2, \"invalid size\");\n   23: _Static_assert(sizeof (int32_t) == 4, \"invalid size\");\n   24: _Static_assert(sizeof (int64_t) == 8, \"invalid size\");\n   25  \n   26: _Static_assert(sizeof (uintptr_t) == sizeof (intptr_t), \"invalid size\");\n   27: _Static_assert(sizeof (uintptr_t) == sizeof (void*), \"invalid size\");\n   28: _Static_assert(sizeof (uintptr_t) == 4, \"invalid size\");\n   29  \n   30  #define UINT8_MAX  0xFF\n\nC:\\code\\EA\\meson_build\\reference\\005-cross-compilation\\subprojects\\printf\\test\\catch.hpp:\n  927  \n  928  #if defined(CATCH_CPP17_OR_GREATER)\n  929: #define CATCH_INTERNAL_CHECK_UNIQUE_TYPES(...) static_assert(Catch::is_unique<__VA_ARGS__>,\"Duplicate type detected in declaration of template test case\");\n  930  #else\n  931: #define CATCH_INTERNAL_CHECK_UNIQUE_TYPES(...) static_assert(Catch::is_unique<__VA_ARGS__>::value,\"Duplicate type detected in declaration of template test case\");\n  932  #endif\n  933  \n  ...\n 1888          template<typename T>\n 1889          auto operator && ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1890:             static_assert(always_false<T>::value,\n 1891              \"chained comparisons are not supported inside assertions, \"\n 1892              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1895          template<typename T>\n 1896          auto operator || ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1897:             static_assert(always_false<T>::value,\n 1898              \"chained comparisons are not supported inside assertions, \"\n 1899              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1902          template<typename T>\n 1903          auto operator == ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1904:             static_assert(always_false<T>::value,\n 1905              \"chained comparisons are not supported inside assertions, \"\n 1906              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1909          template<typename T>\n 1910          auto operator != ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1911:             static_assert(always_false<T>::value,\n 1912              \"chained comparisons are not supported inside assertions, \"\n 1913              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1916          template<typename T>\n 1917          auto operator > ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1918:             static_assert(always_false<T>::value,\n 1919              \"chained comparisons are not supported inside assertions, \"\n 1920              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1923          template<typename T>\n 1924          auto operator < ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1925:             static_assert(always_false<T>::value,\n 1926              \"chained comparisons are not supported inside assertions, \"\n 1927              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1930          template<typename T>\n 1931          auto operator >= ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1932:             static_assert(always_false<T>::value,\n 1933              \"chained comparisons are not supported inside assertions, \"\n 1934              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 1937          template<typename T>\n 1938          auto operator <= ( T ) const -> BinaryExpr<LhsT, RhsT const&> const {\n 1939:             static_assert(always_false<T>::value,\n 1940              \"chained comparisons are not supported inside assertions, \"\n 1941              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2022          template<typename RhsT>\n 2023          auto operator && ( RhsT const& ) -> BinaryExpr<LhsT, RhsT const&> const {\n 2024:             static_assert(always_false<RhsT>::value,\n 2025              \"operator&& is not supported inside assertions, \"\n 2026              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 2029          template<typename RhsT>\n 2030          auto operator || ( RhsT const& ) -> BinaryExpr<LhsT, RhsT const&> const {\n 2031:             static_assert(always_false<RhsT>::value,\n 2032              \"operator|| is not supported inside assertions, \"\n 2033              \"wrap the expression inside parentheses, or decompose it\");\n ....\n 3705              m_target(target)\n 3706          {\n 3707:             assert(target != 0 && \"Empty generators are not allowed\");\n 3708          }\n 3709          T const& get() const override {\n ....\n 3782              m_target_repeats(repeats)\n 3783          {\n 3784:             assert(m_target_repeats > 0 && \"Repeat generator must repeat at least once\");\n 3785          }\n 3786  \n ....\n 4119          m_positive(m_step > T(0))\n 4120      {\n 4121:         assert(m_current != m_end && \"Range start and end cannot be equal\");\n 4122:         assert(m_step != T(0) && \"Step size cannot be zero\");\n 4123:         assert(((m_positive && m_current <= m_end) || (!m_positive && m_current >= m_end)) && \"Step moves away from end\");\n 4124      }\n 4125  \n ....\n 4140  template <typename T>\n 4141  GeneratorWrapper<T> range(T const& start, T const& end, T const& step) {\n 4142:     static_assert(std::is_integral<T>::value && !std::is_same<T, bool>::value, \"Type must be an integer\");\n 4143      return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end, step));\n 4144  }\n ....\n 4146  template <typename T>\n 4147  GeneratorWrapper<T> range(T const& start, T const& end) {\n 4148:     static_assert(std::is_integral<T>::value && !std::is_same<T, bool>::value, \"Type must be an integer\");\n 4149      return GeneratorWrapper<T>(pf::make_unique<RangeGenerator<T>>(start, end));\n 4150  }\n ....\n 5251  \n 5252          bool assertionEnded(AssertionStats const& assertionStats) override {\n 5253:             assert(!m_sectionStack.empty());\n 5254              // AssertionResult holds a pointer to a temporary DecomposedExpression,\n 5255              // which getExpandedExpression() calls to build the expression string.\n ....\n 5263          }\n 5264          void sectionEnded(SectionStats const& sectionStats) override {\n 5265:             assert(!m_sectionStack.empty());\n 5266              SectionNode& node = *m_sectionStack.back();\n 5267              node.stats = sectionStats;\n ....\n 5270          void testCaseEnded(TestCaseStats const& testCaseStats) override {\n 5271              auto node = std::make_shared<TestCaseNode>(testCaseStats);\n 5272:             assert(m_sectionStack.size() == 0);\n 5273              node->children.push_back(m_rootSection);\n 5274              m_testCases.push_back(node);\n 5275              m_rootSection.reset();\n 5276  \n 5277:             assert(m_deepestSection);\n 5278              m_deepestSection->stdOut = testCaseStats.stdOut;\n 5279              m_deepestSection->stdErr = testCaseStats.stdErr;\n ....\n 6603  \n 6604  \t\tauto isBoundary(size_t at) const -> bool {\n 6605: \t\t\tassert(at > 0);\n 6606: \t\t\tassert(at <= line().size());\n 6607  \n 6608  \t\t\treturn at == line().size() ||\n ....\n 6613  \n 6614  \t\tvoid calcLength() {\n 6615: \t\t\tassert(m_stringIndex < m_column.m_strings.size());\n 6616  \n 6617  \t\t\tm_suffix = false;\n ....\n 6656  \n 6657  \t\texplicit iterator(Column const& column) : m_column(column) {\n 6658: \t\t\tassert(m_column.m_width > m_column.m_indent);\n 6659: \t\t\tassert(m_column.m_initialIndent == std::string::npos || m_column.m_width > m_column.m_initialIndent);\n 6660  \t\t\tcalcLength();\n 6661  \t\t\tif (m_len == 0)\n ....\n 6664  \n 6665  \t\tauto operator *() const -> std::string {\n 6666: \t\t\tassert(m_stringIndex < m_column.m_strings.size());\n 6667: \t\t\tassert(m_pos <= m_end);\n 6668  \t\t\treturn addIndentAndSuffix(line().substr(m_pos, m_len));\n 6669  \t\t}\n ....\n 6706  \n 6707  \tauto width(size_t newWidth) -> Column& {\n 6708: \t\tassert(newWidth > 0);\n 6709  \t\tm_width = newWidth;\n 6710  \t\treturn *this;\n ....\n 6998  \n 6999          auto operator*() const -> Token {\n 7000:             assert( !m_tokenBuffer.empty() );\n 7001              return m_tokenBuffer.front();\n 7002          }\n 7003  \n 7004          auto operator->() const -> Token const * {\n 7005:             assert( !m_tokenBuffer.empty() );\n 7006              return &m_tokenBuffer.front();\n 7007          }\n ....\n 7087              m_errorMessage( other.errorMessage() )\n 7088          {\n 7089:             assert( type() != ResultBase::Ok );\n 7090          }\n 7091  \n ....\n 7105              // Errors shouldn't reach this point, but if they do\n 7106              // the actual error message will be in m_errorMessage\n 7107:             assert( m_type != ResultBase::LogicError );\n 7108:             assert( m_type != ResultBase::RuntimeError );\n 7109              if( m_type != ResultBase::Ok )\n 7110                  std::abort();\n ....\n 7117              m_errorMessage(message)\n 7118          {\n 7119:             assert( m_type != ResultBase::Ok );\n 7120          }\n 7121  \n ....\n 7251      template<typename ReturnType>\n 7252      struct LambdaInvoker {\n 7253:         static_assert( std::is_same<ReturnType, ParserResult>::value, \"Lambda must return void or clara::ParserResult\" );\n 7254  \n 7255          template<typename L, typename ArgType>\n ....\n 7281          L m_lambda;\n 7282  \n 7283:         static_assert( UnaryLambdaTraits<L>::isValid, \"Supplied lambda must take exactly one argument\" );\n 7284          explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}\n 7285  \n ....\n 7293          L m_lambda;\n 7294  \n 7295:         static_assert( UnaryLambdaTraits<L>::isValid, \"Supplied lambda must take exactly one argument\" );\n 7296:         static_assert( std::is_same<typename UnaryLambdaTraits<L>::ArgType, bool>::value, \"flags must be boolean\" );\n 7297  \n 7298          explicit BoundFlagLambda( L const &lambda ) : m_lambda( lambda ) {}\n ....\n 7438                  return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, remainingTokens ) );\n 7439  \n 7440:             assert( !m_ref->isFlag() );\n 7441              auto valueRef = static_cast<detail::BoundValueRefBase*>( m_ref.get() );\n 7442  \n ....\n 7689              };\n 7690              const size_t totalParsers = m_options.size() + m_args.size();\n 7691:             assert( totalParsers < 512 );\n 7692              // ParserInfo parseInfos[totalParsers]; // <-- this is what we really want to do\n 7693              ParserInfo parseInfos[512];\n ....\n 9305  template <>\n 9306  struct Converter<float> {\n 9307:     static_assert(sizeof(float) == sizeof(int32_t), \"Important ULP matcher assumption violated\");\n 9308      Converter(float f) {\n 9309          std::memcpy(&i, &f, sizeof(f));\n ....\n 9314  template <>\n 9315  struct Converter<double> {\n 9316:     static_assert(sizeof(double) == sizeof(int64_t), \"Important ULP matcher assumption violated\");\n 9317      Converter(double d) {\n 9318          std::memcpy(&i, &d, sizeof(d));\n ....\n 9629              }\n 9630          }\n 9631:         assert(openings.size() == 0 && \"Mismatched openings\");\n 9632          m_messages.emplace_back(macroName, lineInfo, resultType);\n 9633          m_messages.back().message = trimmed(start, names.size() - 1);\n ....\n 9636      Capturer::~Capturer() {\n 9637          if ( !uncaught_exceptions() ){\n 9638:             assert( m_captured == m_messages.size() );\n 9639              for( size_t i = 0; i < m_captured; ++i  )\n 9640                  m_resultCapture.popScopedMessage( m_messages[i] );\n ....\n 9643  \n 9644      void Capturer::captureValue( size_t index, std::string const& value ) {\n 9645:         assert( index < m_messages.size() );\n 9646          m_messages[index].message += value;\n 9647          m_resultCapture.pushScopedMessage( m_messages[index] );\n ....\n 10257                  ITracker& currentTracker = ctx.currentTracker();\n 10258                  if( TestCaseTracking::ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {\n 10259:                     assert( childTracker );\n 10260:                     assert( childTracker->isGeneratorTracker() );\n 10261                      tracker = std::static_pointer_cast<GeneratorTracker>( childTracker );\n 10262                  }\n .....\n 10337  \n 10338          ITracker& rootTracker = m_trackerContext.startRun();\n 10339:         assert(rootTracker.isSectionTracker());\n 10340          static_cast<SectionTracker&>(rootTracker).addInitialFilters(m_config->getSectionsToRun());\n 10341          do {\n .....\n 10420          using namespace Generators;\n 10421          GeneratorTracker& tracker = GeneratorTracker::acquire( m_trackerContext, TestCaseTracking::NameAndLocation( \"generator\", lineInfo ) );\n 10422:         assert( tracker.isOpen() );\n 10423          m_lastAssertionInfo.lineInfo = lineInfo;\n 10424          return tracker;\n .....\n 11954      }\n 11955      ITracker& TrackerBase::parent() {\n 11956:         assert( m_parent ); // Should always be non-null except for root\n 11957          return *m_parent;\n 11958      }\n .....\n 12017  \n 12018      void TrackerBase::moveToParent() {\n 12019:         assert( m_parent );\n 12020          m_ctx.setCurrentTracker( m_parent );\n 12021      }\n .....\n 12054          ITracker& currentTracker = ctx.currentTracker();\n 12055          if( ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {\n 12056:             assert( childTracker );\n 12057:             assert( childTracker->isSectionTracker() );\n 12058              section = std::static_pointer_cast<SectionTracker>( childTracker );\n 12059          }\n .....\n 13785  }\n 13786  void ConsoleReporter::printTestCaseAndSectionHeader() {\n 13787:     assert(!m_sectionStack.empty());\n 13788      printOpenHeader(currentTestCaseInfo->name);\n 13789  \n .....\n 14071          // All test cases have exactly one section - which represents the\n 14072          // test case itself. That section may have 0-n nested sections\n 14073:         assert( testCaseNode.children.size() == 1 );\n 14074          SectionNode const& rootSection = *testCaseNode.children.front();\n 14075  \n .....\n 14195  \n 14196      void ListeningReporter::addReporter(IStreamingReporterPtr&& reporter) {\n 14197:         assert(!m_reporter && \"Listening reporter can wrap only 1 real reporter\");\n 14198          m_reporter = std::move( reporter );\n 14199          m_preferences.shouldRedirectStdOut = m_reporter->getPreferences().shouldRedirectStdOut;\n .....\n 14649  \n 14650  #if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)\n 14651: #define CATCH_STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__ ,      #__VA_ARGS__ );     CATCH_SUCCEED( #__VA_ARGS__ )\n 14652: #define CATCH_STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); CATCH_SUCCEED( #__VA_ARGS__ )\n 14653  #else\n 14654  #define CATCH_STATIC_REQUIRE( ... )       CATCH_REQUIRE( __VA_ARGS__ )\n .....\n 14729  \n 14730  #if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)\n 14731: #define STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )\n 14732: #define STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); SUCCEED( \"!(\" #__VA_ARGS__ \")\" )\n 14733  #else\n 14734  #define STATIC_REQUIRE( ... )       REQUIRE( __VA_ARGS__ )\n\nC:\\code\\EA\\meson_build\\reference\\Starting Point\\libc-skeleton\\include\\assert.h:\n    7  \n    8  #ifdef NDEBUG\n    9: #define assert(x) (void)0\n   10  #else\n   11: #define assert(x) ((void)((x) || (__assert_fail(#x, __FILE__, __LINE__, __func__), 0)))\n   12  #endif\n   13  \n\nC:\\code\\EA\\meson_build\\reference\\Starting Point\\libc-skeleton\\src\\gdtoa\\include\\gdtoaimp.h:\n  187  #else\n  188  #include <assert.h>\n  189: #define Bug(x) assert(!(x))\n  190  #endif // GDTOA_NO_ASSET\n  191  #endif // GDTOA_HOST_DEBUG\n\nC:\\code\\EA\\meson_build\\reference\\Starting Point\\libc-skeleton\\src\\locale\\langinfo.c:\n   70  \tif(item == CODESET)\n   71  \t{\n   72: \t\tassert(0 /*\"Codeset langinfo not implemented\"*/);\n   73  \t\t// return loc->cat[LC_CTYPE] ? \"UTF-8\" : \"ASCII\";\n   74  \t}\n   ..\n   77  \tif(idx == 65535 && cat < LC_ALL)\n   78  \t{\n   79: \t\tassert(0 /*\"LOCALE_NAME langinfo not implemented\"*/);\n   80  \t\t// return loc->cat[cat] ? (char *)loc->cat[cat]->name : \"C\";\n   81  \t}\n\nC:\\code\\EA\\meson_build\\reference\\Starting Point\\libc-skeleton\\src\\string\\strerror_r.c:\n    9  \tsize_t length = strlen(err_msg);\n   10  \n   11: \tassert(buffer);\n   12  \n   13  \tif(length >= buffer_size)\n\nC:\\code\\EA\\meson_build\\reference\\Starting Point\\libc-skeleton\\src\\time\\asctime_r.c:\n   18  \t\t * on other implementations (e.g. stack smashing..).\n   19  \t\t */\n   20: \t\tassert(0 && \"tm fields are too large for buffer\");\n   21  \t}\n   22  \treturn buf;\n\n284 matches across 58 files\n",
			"settings":
			{
				"buffer_size": 56406,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "libc-skeleton/subprojects/cmocka-1.1.7/meson.build",
			"settings":
			{
				"buffer_size": 5771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAB7FgAAIyBDb3B5cmlnaHQgwqkgMjAxOCBJbnRlbCBDb3Jwb3JhdGlvbgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQojIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiMgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiMgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAojIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKcHJvamVjdCgKICAnY21vY2thJywKICAnYycsCiAgdmVyc2lvbjogJzEuMS43JywKICBsaWNlbnNlOiAnQVBMdjInLAogIG1lc29uX3ZlcnNpb246ICc+PSAwLjU0LjEnLAogIGRlZmF1bHRfb3B0aW9uczogWydjX3N0ZD1jOTknLCAnYnVpbGR0eXBlPWRlYnVnb3B0aW1pemVkJ10sCikKCmxpYl92ZXJzaW9uID0gJzAuOC4wJwoKaW5jX2luY2x1ZGUgPSBpbmNsdWRlX2RpcmVjdG9yaWVzKCdpbmNsdWRlJykKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIENvbmZpZyBHZW5lcmF0aW9uICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjY19kaWN0ID0gewogICdjb21waWxlcic6IG1lc29uLmdldF9jb21waWxlcignYycpLAogICdtYWNoaW5lJzogaG9zdF9tYWNoaW5lLAogICduYXRpdmUnOiBmYWxzZSwKfQoKY2NfbmF0aXZlX2RpY3QgPSB7CiAgJ2NvbXBpbGVyJzogbWVzb24uZ2V0X2NvbXBpbGVyKCdjJywgbmF0aXZlOiB0cnVlKSwKICAnbWFjaGluZSc6IGJ1aWxkX21hY2hpbmUsCiAgJ25hdGl2ZSc6IHRydWUsCn0KCmVudHJ5ID0gY2NfZGljdApjb21waWxlciA9IGVudHJ5LmdldCgnY29tcGlsZXInKQppc19uYXRpdmUgPSBlbnRyeS5nZXQoJ25hdGl2ZScpCm1hY2hpbmUgPSBlbnRyeS5nZXQoJ21hY2hpbmUnKQoKY29uZmlnID0gY29uZmlndXJhdGlvbl9kYXRhKCkKCmlmIGNvbXBpbGVyLmdldF9hcmd1bWVudF9zeW50YXgoKSA9PSAnZ2NjJwogIGFkZF9wcm9qZWN0X2FyZ3VtZW50cygKICAgICMgSSd2ZSBleHBsaWNpdGx5IHNraXBwZWQgdGhlIGR1cGxpY2F0ZWQgLVcgdmVyc2lvbnMgd2hlbiB0aGV5IGFsc28gdGVzdAogICAgIyBmb3IgdGhlIC1XZXJyb3IgdmVyc2lvbgogICAgY29tcGlsZXIuZ2V0X3N1cHBvcnRlZF9hcmd1bWVudHMoCiAgICAgICctV3NoYWRvdycsCiAgICAgICctV21pc3NpbmctcHJvdG90eXBlcycsCiAgICAgICctV2Nhc3QtYWxpZ24nLAogICAgICAnLVdlcnJvcj1hZGRyZXNzJywKICAgICAgJy1XZXJyb3I9c3RyaWN0LXByb3RvdHlwZXMnLAogICAgICAnLVdlcnJvcj13cml0ZS1zdHJpbmdzJywKICAgICAgJy1XZXJyb3I9aW1wbGljaXQtZnVuY3Rpb24tZGVjbGFyYXRpb24nLAogICAgICAnLVdlcnJvcj1wb2ludGVyLWFyaXRoJywKICAgICAgJy1XZXJyb3I9ZGVjbGFyYXRpb24tYWZ0ZXItc3RhdGVtZW50JywKICAgICAgJy1XZXJyb3I9cmV0dXJuLXR5cGUnLAogICAgICAnLVdlcnJvcj11bmluaXRpYWxpemVkJywKICAgICAgJy1XaW1wbGljaXQtZmFsbHRocm91Z2gnLAogICAgICAnLVdlcnJvcj1zdHJpY3Qtb3ZlcmZsb3cnLAogICAgICAnLVdzdHJpY3Qtb3ZlcmZsb3c9MicsCiAgICAgICctV25vLWZvcm1hdC16ZXJvLWxlbmd0aCcsCiAgICAgICctV2Zvcm1hdCcsCiAgICAgICctV2Vycm9yPWZvcm1hdC1zZWN1cml0eScsCiAgICAgICctV25vLWdudS16ZXJvLXZhcmlhZGljLW1hY3JvLWFyZ3VtZW50cycsCiAgICAgICctRF9HTlVfU09VUkNFJywKICAgICksCiAgICBsYW5ndWFnZTogJ2MnLAogICAgbmF0aXZlOiBpc19uYXRpdmUsCiAgKQogICMgV2UgY2FuJ3QgdGVzdCB0aGUgYnVpbGQgdHlwZSwgc28gd2UgY2FuJyBhZGQgLURfRk9SVElGWV9TT1VSQ0U9MiBoZXJlCiAgaWYgbWFjaGluZS5zeXN0ZW0oKSA9PSAnZGFyd2luJwogICAgYWRkX3Byb2plY3RfYXJndW1lbnRzKAogICAgICBjb21waWxlci5nZXRfc3VwcG9ydGVkX2FyZ3VtZW50cygnLVduby1kZXByZWNhdGVkLWRlY2xhcmF0aW9ucycpLAogICAgICBsYW5ndWFnZTogJ2MnLAogICAgICBuYXRpdmU6IGlzX25hdGl2ZSwKICAgICkKICBlbmRpZgplbHNlCiAgYWRkX3Byb2plY3RfYXJndW1lbnRzKAogICAgJy9EX0NSVF9TRUNVUkVfQ1BQX09WRVJMT0FEX1NUQU5EQVJEX05BTUVTPTEnLAogICAgJy9EX0NSVF9TRUNVUkVfQ1BQX09WRVJMT0FEX1NUQU5EQVJEX05BTUVTX0NPVU5UPTEnLAogICAgJy9EX0NSVF9OT05TVERDX05PX1dBUk5JTkdTPTEnLAogICAgJy9EX0NSVF9TRUNVUkVfTk9fV0FSTklOR1M9MScsCiAgICBsYW5ndWFnZTogJ2MnLAogICAgbmF0aXZlOiBpc19uYXRpdmUsCiAgKQplbmRpZgoKIyBUT0RPOiBzb2xhcmlzIGV4dGVuc2lvbnMKCmZvcmVhY2ggaCA6IFsKICAnYXNzZXJ0LmgnLAogICdkbGZjbi5oJywKICAnaW50dHlwZXMuaCcsCiAgJ2lvLmgnLAogICdtYWxsb2MuaCcsCiAgJ21lbW9yeS5oJywKICAnc2V0am1wLmgnLAogICdzaWduYWwuaCcsCiAgJ3N0ZGFyZy5oJywKICAnc3RkZGVmLmgnLAogICdzdGRpbnQuaCcsCiAgJ3N0ZGlvLmgnLAogICdzdGRsaWIuaCcsCiAgJ3N0cmluZy5oJywKICAnc3RyaW5ncy5oJywKICAnc3lzL3N0YXQuaCcsCiAgJ3N5cy90eXBlcy5oJywKICAndGltZS5oJywKICAndW5pc3RkLmgnLApdCiAgaWYgY29tcGlsZXIuY2hlY2tfaGVhZGVyKGgpCiAgICBjb25maWcuc2V0KCdIQVZFX0AwQCcuZm9ybWF0KGgudW5kZXJzY29yaWZ5KCkudG9fdXBwZXIoKSksIDEpCiAgZW5kaWYKZW5kZm9yZWFjaAoKaWYgY29tcGlsZXIuaGFzX21lbWJlcignc3RydWN0IHRpbWVzcGVjJywgJ3R2X3NlYycsIHByZWZpeDogJyNpbmNsdWRlIDx0aW1lLmg+JykKICBjb25maWcuc2V0KCdIQVZFX1NUUlVDVF9USU1FU1BFQycsIDEpCmVuZGlmCgpmb3JlYWNoIGYgOiBbCiAgJ2NhbGxvYycsCiAgJ2Nsb2NrX2dldHRpbWUnLAogICdleGl0JywKICAnZnJlZScsCiAgJ2xvbmdqbXAnLAogICdtYWxsb2MnLAogICdtZW1jcHknLAogICdtZW1zZXQnLAogICdzZXRqbXAnLAogICdzaWdsb25nam1wJywKICAnc2lnbmFsJywKICAnc3Ryc2lnbmFsJywKICAnc3RyY21wJywKXQogIGlmIGNvbXBpbGVyLmhhc19mdW5jdGlvbihmKQogICAgY29uZmlnLnNldCgnSEFWRV9AMEAnLmZvcm1hdChmLnVuZGVyc2NvcmlmeSgpLnRvX3VwcGVyKCkpLCAxKQogIGVuZGlmCmVuZGZvcmVhY2gKCmZvcmVhY2ggZiA6IFsnZnByaW50ZicsICdwcmludGYnLCAnc25wcmludGYnLCAndnNucHJpbnRmJ10KICBpZiBjb21waWxlci5oYXNfaGVhZGVyX3N5bWJvbCgnc3RkaW8uaCcsIGYpCiAgICBjb25maWcuc2V0KCdIQVZFX0AwQCcuZm9ybWF0KGYudW5kZXJzY29yaWZ5KCkudG9fdXBwZXIoKSksIDEpCiAgZW5kaWYKZW5kZm9yZWFjaAoKdGhyZWFkc19kZXAgPSBbXQppZiBub3QgY29uZmlnLmhhcygnSEFWRV9DTE9DS19HRVRUSU1FJykKICBpZiBjb21waWxlci5oYXNfZnVuY3Rpb24oJ2Nsb2NrX2dldHRpbWUnLCBkZXBlbmRlbmNpZXM6IGRlcGVuZGVuY3koJ3RocmVhZHMnKSkKICAgIGNvbmZpZy5zZXQoJ0hBVkVfQDBAJy5mb3JtYXQoZi51bmRlcnNjb3JpZnkoKS50b191cHBlcigpKSwgMSkKICAgIHRocmVhZHNfZGVwID0gZGVwZW5kZW5jeSgndGhyZWFkcycpCiAgZW5kaWYKZW5kaWYKCmlmIGNvbXBpbGVyLmdldF9hcmd1bWVudF9zeW50YXgoKSA9PSAnbXN2YycKICBjb25maWcuc2V0KCdIQVZFX01TVkNfVEhSRUFEX0xPQ0FMX1NUT1JBR0UnLCBjb21waWxlci5jb21waWxlcygnX19kZWNsc3BlYyh0aHJlYWQpIGludCB0bHM7JykpCmVsc2UKICBjb25maWcuc2V0MTAoJ0hBVkVfR0NDX1RIUkVBRF9MT0NBTF9TVE9SQUdFJywgY29tcGlsZXIuY29tcGlsZXMoJ19fdGhyZWFkIGludCB0bHM7JykpCmVuZGlmCgpjb25maWcuc2V0KCdXT1JEU19TSVpFT0ZfVk9JRF9QJywgY29tcGlsZXIuc2l6ZW9mKCd2b2lkKicpKQppZiBtYWNoaW5lLmVuZGlhbigpID09ICdiaWcnCiAgY29uZmlnLnNldCgnV09SRFNfQklHRU5ESUFOJywgMSkKZW5kaWYKCmNmaWxlID0gY29uZmlndXJlX2ZpbGUoCiAgaW5wdXQ6ICdjb25maWcuaC5jbWFrZScsCiAgb3V0cHV0OiAnY29uZmlnLmgnLAogIGZvcm1hdDogJ2NtYWtlJywKICBjb25maWd1cmF0aW9uOiBjb25maWcsCikKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIFN1YmRpcmVjdG9yeSBQcm9jZXNzaW5nICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpsaWJjbW9ja2EgPSBsaWJyYXJ5KAogICdjbW9ja2EnLAogICdzcmMvY21vY2thLmMnLAogIGNfYXJnczogJy1ESEFWRV9DT05GSUdfSD0xJywKICBpbmNsdWRlX2RpcmVjdG9yaWVzOiBpbmNfaW5jbHVkZSwKICB2c19tb2R1bGVfZGVmczogJ3NyYy9jbW9ja2EuZGVmJywKICBzb3ZlcnNpb246IGhvc3RfbWFjaGluZS5zeXN0ZW0oKSAhPSAnd2luZG93cycgPyBsaWJfdmVyc2lvbi5zcGxpdCgnLicpWzBdIDogJycsCiAgdmVyc2lvbjogbGliX3ZlcnNpb24sCiAgZGVwZW5kZW5jaWVzOiB0aHJlYWRzX2RlcCwKICBpbnN0YWxsOiBmYWxzZSwKICBidWlsZF9ieV9kZWZhdWx0OiBmYWxzZSwKKQoKbGliY21vY2thX25hdGl2ZSA9IGxpYnJhcnkoCiAgJ2Ntb2NrYV9uYXRpdmUnLAogICdzcmMvY21vY2thLmMnLAogIGNfYXJnczogJy1ESEFWRV9DT05GSUdfSD0xJywKICBpbmNsdWRlX2RpcmVjdG9yaWVzOiBpbmNfaW5jbHVkZSwKICB2c19tb2R1bGVfZGVmczogJ3NyYy9jbW9ja2EuZGVmJywKICBzb3ZlcnNpb246IGJ1aWxkX21hY2hpbmUuc3lzdGVtKCkgIT0gJ3dpbmRvd3MnID8gbGliX3ZlcnNpb24uc3BsaXQoJy4nKVswXSA6ICcnLAogIHZlcnNpb246IGxpYl92ZXJzaW9uLAogIGRlcGVuZGVuY2llczogdGhyZWFkc19kZXAsCiAgaW5zdGFsbDogZmFsc2UsICMgQ2Fubm90IGluc3RhbGwgbmF0aXZlIHRhcmdldHMgaW4gY3Jvc3MgYnVpbGRzCiAgbmF0aXZlOiB0cnVlLAogIGJ1aWxkX2J5X2RlZmF1bHQ6IGZhbHNlLAopCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMgRGVwZW5kZW5jeSBUYXJnZXRzICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyBUT0RPOiBkb2MsIGluY2x1ZGUsIHRlc3RzLCBleGFtcGxlCiMgU2luY2Ugd2UncmUgdXNpbmcgdGhpcyBhcyBhIHdyYXAsIGFuZCBpdCdzIGEgdW5pdCB0ZXN0IGZyYW1ld29yayB3ZSdyZSBub3QKIyBnb2luZyB0byBpbnN0YWxsIGl0LgoKY21vY2thX2RlcCA9IGRlY2xhcmVfZGVwZW5kZW5jeSgKICBsaW5rX3dpdGg6IGxpYmNtb2NrYSwKICBpbmNsdWRlX2RpcmVjdG9yaWVzOiBpbmNfaW5jbHVkZSwKICB2ZXJzaW9uOiBtZXNvbi5wcm9qZWN0X3ZlcnNpb24oKSwKKQoKY21vY2thX25hdGl2ZV9kZXAgPSBkZWNsYXJlX2RlcGVuZGVuY3koCiAgbGlua193aXRoOiBsaWJjbW9ja2FfbmF0aXZlLAogIGluY2x1ZGVfZGlyZWN0b3JpZXM6IGluY19pbmNsdWRlLAogIHZlcnNpb246IG1lc29uLnByb2plY3RfdmVyc2lvbigpLAopCgAAAAAAAAAAdQgAAAAAAAAAAAAAAAAAAAAAAAB6FgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPESAAAAAAAA8hIAAAAAAAAAAAAA8hIAAAAAAAD0EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RIAAAAAAADxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "native:"
					},
					"BwAAAPQSAAAAAAAA9RIAAAAAAAAAAAAA9RIAAAAAAAD2EgAAAAAAAAAAAAD2EgAAAAAAAPcSAAAAAAAAAAAAAPcSAAAAAAAA+BIAAAAAAAAAAAAA+BIAAAAAAAD5EgAAAAAAAAAAAAD5EgAAAAAAAPoSAAAAAAAAAAAAAPoSAAAAAAAA+xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BIAAAAAAAD0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " false,"
					},
					"BwAAAPsSAAAAAAAA/BIAAAAAAAAAAAAA/BIAAAAAAAD9EgAAAAAAAAAAAAD9EgAAAAAAAP4SAAAAAAAAAAAAAP4SAAAAAAAA/xIAAAAAAAAAAAAA/xIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAETAAAAAAAAAAAAAAETAAAAAAAAAhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xIAAAAAAAD7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"swap_line_up",
					null,
					"AgAAAIgUAAAAAAAAiBQAAAAAAAAbAAAAICBidWlsZF9ieV9kZWZhdWx0OiBmYWxzZSwKeBQAAAAAAACTFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBQAAAAAAACgFAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/buildresults/compile_commands.json",
			"settings":
			{
				"buffer_size": 290237,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "libc-skeleton/src/meson.build",
			"settings":
			{
				"buffer_size": 6548,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAwEAAAAAAAADQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "gdtoa_compiler"
					},
					"DgAAAA0EAAAAAAAADgQAAAAAAAAAAAAADgQAAAAAAAAPBAAAAAAAAAAAAAAPBAAAAAAAABAEAAAAAAAAAAAAABAEAAAAAAAAEQQAAAAAAAAAAAAAEQQAAAAAAAASBAAAAAAAAAAAAAASBAAAAAAAABMEAAAAAAAAAAAAABMEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAVBAAAAAAAAAAAAAAVBAAAAAAAABYEAAAAAAAAAAAAABYEAAAAAAAAFwQAAAAAAAAAAAAAFwQAAAAAAAAYBAAAAAAAAAAAAAAYBAAAAAAAABkEAAAAAAAAAAAAABkEAAAAAAAAGgQAAAAAAAAAAAAAGgQAAAAAAAAbBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "_flags"
					},
					"BgAAABsEAAAAAAAAHAQAAAAAAAAAAAAAHAQAAAAAAAAdBAAAAAAAAAAAAAAdBAAAAAAAAB4EAAAAAAAAAAAAAB4EAAAAAAAAHwQAAAAAAAAAAAAAHwQAAAAAAAAgBAAAAAAAAAAAAAAgBAAAAAAAACEEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACEEAAAAAAAAIgQAAAAAAAAAAAAAIgQAAAAAAAAjBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACMEAAAAAAAAJAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					19,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACQEAAAAAAAAJgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACUEAAAAAAAAJgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACYEAAAAAAAAJwQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"reindent",
					null,
					"AQAAACYEAAAAAAAAJwQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACcEAAAAAAAAKQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAACgEAAAAAAAAKQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "DNO_ERRNO"
					},
					"CQAAACkEAAAAAAAAKgQAAAAAAAAAAAAAKgQAAAAAAAArBAAAAAAAAAAAAAArBAAAAAAAACwEAAAAAAAAAAAAACwEAAAAAAAALQQAAAAAAAAAAAAALQQAAAAAAAAuBAAAAAAAAAAAAAAuBAAAAAAAAC8EAAAAAAAAAAAAAC8EAAAAAAAAMAQAAAAAAAAAAAAAMAQAAAAAAAAxBAAAAAAAAAAAAAAxBAAAAAAAADIEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADMEAAAAAAAANAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADQEAAAAAAAANQQAAAAAAAAAAAAANQQAAAAAAAA2BAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADYEAAAAAAAAOAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "-DIFNAN"
					},
					"BwAAADcEAAAAAAAAOAQAAAAAAAAAAAAAOAQAAAAAAAA5BAAAAAAAAAAAAAA5BAAAAAAAADoEAAAAAAAAAAAAADoEAAAAAAAAOwQAAAAAAAAAAAAAOwQAAAAAAAA8BAAAAAAAAAAAAAA8BAAAAAAAAD0EAAAAAAAAAAAAAD0EAAAAAAAAPgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "_CHECK;"
					},
					"BwAAAD4EAAAAAAAAPwQAAAAAAAAAAAAAPwQAAAAAAABABAAAAAAAAAAAAABABAAAAAAAAEEEAAAAAAAAAAAAAEEEAAAAAAAAQgQAAAAAAAAAAAAAQgQAAAAAAABDBAAAAAAAAAAAAABDBAAAAAAAAEQEAAAAAAAAAAAAAEQEAAAAAAAARQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"left_delete",
					null,
					"AQAAAEQEAAAAAAAARAQAAAAAAAABAAAAOw",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEUEAAAAAAAARgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEYEAAAAAAAARwQAAAAAAAAAAAAARwQAAAAAAABIBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEgEAAAAAAAASgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "-D"
					},
					"AgAAAEkEAAAAAAAASgQAAAAAAAAAAAAASgQAAAAAAABLBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "G"
					},
					"AQAAAEsEAAAAAAAATAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAEwEAAAAAAAATQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "TOA_NO_AS"
					},
					"CQAAAE0EAAAAAAAATgQAAAAAAAAAAAAATgQAAAAAAABPBAAAAAAAAAAAAABPBAAAAAAAAFAEAAAAAAAAAAAAAFAEAAAAAAAAUQQAAAAAAAAAAAAAUQQAAAAAAABSBAAAAAAAAAAAAABSBAAAAAAAAFMEAAAAAAAAAAAAAFMEAAAAAAAAVAQAAAAAAAAAAAAAVAQAAAAAAABVBAAAAAAAAAAAAABVBAAAAAAAAFYEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "SERT"
					},
					"BAAAAFYEAAAAAAAAVwQAAAAAAAAAAAAAVwQAAAAAAABYBAAAAAAAAAAAAABYBAAAAAAAAFkEAAAAAAAAAAAAAFkEAAAAAAAAWgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFsEAAAAAAAAXAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFwEAAAAAAAAXQQAAAAAAAAAAAAAXQQAAAAAAABeBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAF4EAAAAAAAAYAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "-DNO_FEN"
					},
					"CAAAAF8EAAAAAAAAYAQAAAAAAAAAAAAAYAQAAAAAAABhBAAAAAAAAAAAAABhBAAAAAAAAGIEAAAAAAAAAAAAAGIEAAAAAAAAYwQAAAAAAAAAAAAAYwQAAAAAAABkBAAAAAAAAAAAAABkBAAAAAAAAGUEAAAAAAAAAAAAAGUEAAAAAAAAZgQAAAAAAAAAAAAAZgQAAAAAAABnBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAGcEAAAAAAAAaAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAGgEAAAAAAAAaQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAGkEAAAAAAAAagQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAG0EAAAAAAAAbgQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAMcEAAAAAAAAyAQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAMgEAAAAAAAAyQQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "args:"
					},
					"BQAAAMkEAAAAAAAAygQAAAAAAAAAAAAAygQAAAAAAADLBAAAAAAAAAAAAADLBAAAAAAAAMwEAAAAAAAAAAAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " gdtoa_compi"
					},
					"DAAAAM4EAAAAAAAAzwQAAAAAAAAAAAAAzwQAAAAAAADQBAAAAAAAAAAAAADQBAAAAAAAANEEAAAAAAAAAAAAANEEAAAAAAAA0gQAAAAAAAAAAAAA0gQAAAAAAADTBAAAAAAAAAAAAADTBAAAAAAAANQEAAAAAAAAAAAAANQEAAAAAAAA1QQAAAAAAAAAAAAA1QQAAAAAAADWBAAAAAAAAAAAAADWBAAAAAAAANcEAAAAAAAAAAAAANcEAAAAAAAA2AQAAAAAAAAAAAAA2AQAAAAAAADZBAAAAAAAAAAAAADZBAAAAAAAANoEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "ler_flags"
					},
					"CQAAANoEAAAAAAAA2wQAAAAAAAAAAAAA2wQAAAAAAADcBAAAAAAAAAAAAADcBAAAAAAAAN0EAAAAAAAAAAAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA3gQAAAAAAADfBAAAAAAAAAAAAADfBAAAAAAAAOAEAAAAAAAAAAAAAOAEAAAAAAAA4QQAAAAAAAAAAAAA4QQAAAAAAADiBAAAAAAAAAAAAADiBAAAAAAAAOMEAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					8,
					1,
					"cut",
					null,
					"AQAAAFQRAAAAAAAAVBEAAAAAAABGAAAAYXJjaF9zcGVjaWZpY19pbmNsdWRlcyA9IGluY2x1ZGVfZGlyZWN0b3JpZXMoJy4uL2FyY2gveDg2XzY0L2luY2x1ZGUnKQ",
					"AQAAAAAAAAABAAAAmhEAAAAAAABUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAFMRAAAAAAAAUxEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVBEAAAAAAABUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "host_machine_"
					},
					"DQAAANUUAAAAAAAA1hQAAAAAAAAAAAAA1hQAAAAAAADXFAAAAAAAAAAAAADXFAAAAAAAANgUAAAAAAAAAAAAANgUAAAAAAAA2RQAAAAAAAAAAAAA2RQAAAAAAADaFAAAAAAAAAAAAADaFAAAAAAAANsUAAAAAAAAAAAAANsUAAAAAAAA3BQAAAAAAAAAAAAA3BQAAAAAAADdFAAAAAAAAAAAAADdFAAAAAAAAN4UAAAAAAAAAAAAAN4UAAAAAAAA3xQAAAAAAAAAAAAA3xQAAAAAAADgFAAAAAAAAAAAAADgFAAAAAAAAOEUAAAAAAAAAAAAAOEUAAAAAAAA4hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RQAAAAAAADVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "build_machine_"
					},
					"DgAAAI4VAAAAAAAAjxUAAAAAAAAAAAAAjxUAAAAAAACQFQAAAAAAAAAAAACQFQAAAAAAAJEVAAAAAAAAAAAAAJEVAAAAAAAAkhUAAAAAAAAAAAAAkhUAAAAAAACTFQAAAAAAAAAAAACTFQAAAAAAAJQVAAAAAAAAAAAAAJQVAAAAAAAAlRUAAAAAAAAAAAAAlRUAAAAAAACWFQAAAAAAAAAAAACWFQAAAAAAAJcVAAAAAAAAAAAAAJcVAAAAAAAAmBUAAAAAAAAAAAAAmBUAAAAAAACZFQAAAAAAAAAAAACZFQAAAAAAAJoVAAAAAAAAAAAAAJoVAAAAAAAAmxUAAAAAAAAAAAAAmxUAAAAAAACcFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhUAAAAAAACOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAABYWAAAAAAAAFxYAAAAAAAAAAAAAFxYAAAAAAAAYFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhYAAAAAAAAWFgAAAAAAAAAAAAAAwGlA"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "libc"
					},
					"BAAAABgWAAAAAAAAGRYAAAAAAAAAAAAAGRYAAAAAAAAaFgAAAAAAAAAAAAAaFgAAAAAAABsWAAAAAAAAAAAAABsWAAAAAAAAHBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBYAAAAAAAAYFgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABwWAAAAAAAAHRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBYAAAAAAAAcFgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAB0WAAAAAAAAHhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHRYAAAAAAAAdFgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " static_library"
					},
					"DwAAAB4WAAAAAAAAHxYAAAAAAAAAAAAAHxYAAAAAAAAgFgAAAAAAAAAAAAAgFgAAAAAAACEWAAAAAAAAAAAAACEWAAAAAAAAIhYAAAAAAAAAAAAAIhYAAAAAAAAjFgAAAAAAAAAAAAAjFgAAAAAAACQWAAAAAAAAAAAAACQWAAAAAAAAJRYAAAAAAAAAAAAAJRYAAAAAAAAmFgAAAAAAAAAAAAAmFgAAAAAAACcWAAAAAAAAAAAAACcWAAAAAAAAKBYAAAAAAAAAAAAAKBYAAAAAAAApFgAAAAAAAAAAAAApFgAAAAAAACoWAAAAAAAAAAAAACoWAAAAAAAAKxYAAAAAAAAAAAAAKxYAAAAAAAAsFgAAAAAAAAAAAAAsFgAAAAAAAC0WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhYAAAAAAAAeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC0WAAAAAAAALxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRYAAAAAAAAtFgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC4WAAAAAAAALxYAAAAAAAAAAAAALxYAAAAAAAAwFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhYAAAAAAAAuFgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAAC8WAAAAAAAALxYAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAAMBYAAAAAAAAwFgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC8WAAAAAAAAMBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxYAAAAAAAAvFgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"reindent",
					null,
					"AQAAAC8WAAAAAAAAMBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxYAAAAAAAAvFgAAAAAAAAAAAAAAAAAA"
				],
				[
					81,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADAWAAAAAAAAMhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMBYAAAAAAAAwFgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "libc"
					},
					"BAAAADEWAAAAAAAAMhYAAAAAAAAAAAAAMhYAAAAAAAAzFgAAAAAAAAAAAAAzFgAAAAAAADQWAAAAAAAAAAAAADQWAAAAAAAANRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMRYAAAAAAAAxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADYWAAAAAAAANxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhYAAAAAAAA2FgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADcWAAAAAAAAOBYAAAAAAAAAAAAAOBYAAAAAAAA5FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxYAAAAAAAA3FgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADkWAAAAAAAAOxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORYAAAAAAAA5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAADkWAAAAAAAAORYAAAAAAAABAAAAJzkWAAAAAAAAORYAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAOhYAAAAAAAA6FgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "libc_common_"
					},
					"DAAAADkWAAAAAAAAOhYAAAAAAAAAAAAAOhYAAAAAAAA7FgAAAAAAAAAAAAA7FgAAAAAAADwWAAAAAAAAAAAAADwWAAAAAAAAPRYAAAAAAAAAAAAAPRYAAAAAAAA+FgAAAAAAAAAAAAA+FgAAAAAAAD8WAAAAAAAAAAAAAD8WAAAAAAAAQBYAAAAAAAAAAAAAQBYAAAAAAABBFgAAAAAAAAAAAABBFgAAAAAAAEIWAAAAAAAAAAAAAEIWAAAAAAAAQxYAAAAAAAAAAAAAQxYAAAAAAABEFgAAAAAAAAAAAABEFgAAAAAAAEUWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORYAAAAAAAA5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "files"
					},
					"BQAAAEUWAAAAAAAARhYAAAAAAAAAAAAARhYAAAAAAABHFgAAAAAAAAAAAABHFgAAAAAAAEgWAAAAAAAAAAAAAEgWAAAAAAAASRYAAAAAAAAAAAAASRYAAAAAAABKFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRYAAAAAAABFFgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAEoWAAAAAAAASxYAAAAAAAAAAAAASxYAAAAAAABMFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShYAAAAAAABKFgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " libc_standalo"
					},
					"DgAAAEwWAAAAAAAATRYAAAAAAAAAAAAATRYAAAAAAABOFgAAAAAAAAAAAABOFgAAAAAAAE8WAAAAAAAAAAAAAE8WAAAAAAAAUBYAAAAAAAAAAAAAUBYAAAAAAABRFgAAAAAAAAAAAABRFgAAAAAAAFIWAAAAAAAAAAAAAFIWAAAAAAAAUxYAAAAAAAAAAAAAUxYAAAAAAABUFgAAAAAAAAAAAABUFgAAAAAAAFUWAAAAAAAAAAAAAFUWAAAAAAAAVhYAAAAAAAAAAAAAVhYAAAAAAABXFgAAAAAAAAAAAABXFgAAAAAAAFgWAAAAAAAAAAAAAFgWAAAAAAAAWRYAAAAAAAAAAAAAWRYAAAAAAABaFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBYAAAAAAABMFgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "ne_files"
					},
					"CAAAAFoWAAAAAAAAWxYAAAAAAAAAAAAAWxYAAAAAAABcFgAAAAAAAAAAAABcFgAAAAAAAF0WAAAAAAAAAAAAAF0WAAAAAAAAXhYAAAAAAAAAAAAAXhYAAAAAAABfFgAAAAAAAAAAAABfFgAAAAAAAGAWAAAAAAAAAAAAAGAWAAAAAAAAYRYAAAAAAAAAAAAAYRYAAAAAAABiFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhYAAAAAAABaFgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGIWAAAAAAAAYxYAAAAAAAAAAAAAYxYAAAAAAABkFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhYAAAAAAABiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAGQWAAAAAAAAZRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBYAAAAAAABkFgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAGUWAAAAAAAAZhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRYAAAAAAABlFgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "args:"
					},
					"BQAAAGYWAAAAAAAAZxYAAAAAAAAAAAAAZxYAAAAAAABoFgAAAAAAAAAAAABoFgAAAAAAAGkWAAAAAAAAAAAAAGkWAAAAAAAAahYAAAAAAAAAAAAAahYAAAAAAABrFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhYAAAAAAABmFgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": " libc_comopi"
					},
					"DAAAAGsWAAAAAAAAbBYAAAAAAAAAAAAAbBYAAAAAAABtFgAAAAAAAAAAAABtFgAAAAAAAG4WAAAAAAAAAAAAAG4WAAAAAAAAbxYAAAAAAAAAAAAAbxYAAAAAAABwFgAAAAAAAAAAAABwFgAAAAAAAHEWAAAAAAAAAAAAAHEWAAAAAAAAchYAAAAAAAAAAAAAchYAAAAAAABzFgAAAAAAAAAAAABzFgAAAAAAAHQWAAAAAAAAAAAAAHQWAAAAAAAAdRYAAAAAAAAAAAAAdRYAAAAAAAB2FgAAAAAAAAAAAAB2FgAAAAAAAHcWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxYAAAAAAABrFgAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					3,
					"left_delete",
					null,
					"AwAAAHYWAAAAAAAAdhYAAAAAAAABAAAAaXUWAAAAAAAAdRYAAAAAAAABAAAAcHQWAAAAAAAAdBYAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAdxYAAAAAAAB3FgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "pile_flags"
					},
					"CgAAAHQWAAAAAAAAdRYAAAAAAAAAAAAAdRYAAAAAAAB2FgAAAAAAAAAAAAB2FgAAAAAAAHcWAAAAAAAAAAAAAHcWAAAAAAAAeBYAAAAAAAAAAAAAeBYAAAAAAAB5FgAAAAAAAAAAAAB5FgAAAAAAAHoWAAAAAAAAAAAAAHoWAAAAAAAAexYAAAAAAAAAAAAAexYAAAAAAAB8FgAAAAAAAAAAAAB8FgAAAAAAAH0WAAAAAAAAAAAAAH0WAAAAAAAAfhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBYAAAAAAAB0FgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH4WAAAAAAAAfxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhYAAAAAAAB+FgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGIWAAAAAAAAYxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhYAAAAAAABiFgAAAAAAAP///////+9/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIAWAAAAAAAAgRYAAAAAAAAAAAAAgRYAAAAAAACCFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBYAAAAAAACAFgAAAAAAAAAAAAAA4HVA"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "build"
					},
					"BwAAAI4VAAAAAAAAjxUAAAAAAAAAAAAAjxUAAAAAAACPFQAAAAAAAAUAAABidWlsZH0WAAAAAAAAfRYAAAAAAAABAAAACY8VAAAAAAAAkBUAAAAAAAAAAAAAkBUAAAAAAACRFQAAAAAAAAAAAACRFQAAAAAAAJIVAAAAAAAAAAAAAJIVAAAAAAAAkxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxUAAAAAAACOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "build"
					},
					"BgAAANUUAAAAAAAA1hQAAAAAAAAAAAAA1hQAAAAAAADWFAAAAAAAAAQAAABob3N01hQAAAAAAADXFAAAAAAAAAAAAADXFAAAAAAAANgUAAAAAAAAAAAAANgUAAAAAAAA2RQAAAAAAAAAAAAA2RQAAAAAAADaFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2RQAAAAAAADVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIEWAAAAAAAAghYAAAAAAAAAAAAAghYAAAAAAACDFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRYAAAAAAACBFgAAAAAAAAAAAAAA4HVA"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "include_director"
					},
					"EAAAAIMWAAAAAAAAhBYAAAAAAAAAAAAAhBYAAAAAAACFFgAAAAAAAAAAAACFFgAAAAAAAIYWAAAAAAAAAAAAAIYWAAAAAAAAhxYAAAAAAAAAAAAAhxYAAAAAAACIFgAAAAAAAAAAAACIFgAAAAAAAIkWAAAAAAAAAAAAAIkWAAAAAAAAihYAAAAAAAAAAAAAihYAAAAAAACLFgAAAAAAAAAAAACLFgAAAAAAAIwWAAAAAAAAAAAAAIwWAAAAAAAAjRYAAAAAAAAAAAAAjRYAAAAAAACOFgAAAAAAAAAAAACOFgAAAAAAAI8WAAAAAAAAAAAAAI8WAAAAAAAAkBYAAAAAAAAAAAAAkBYAAAAAAACRFgAAAAAAAAAAAACRFgAAAAAAAJIWAAAAAAAAAAAAAJIWAAAAAAAAkxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxYAAAAAAACDFgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": "ies:"
					},
					"BAAAAJMWAAAAAAAAlBYAAAAAAAAAAAAAlBYAAAAAAACVFgAAAAAAAAAAAACVFgAAAAAAAJYWAAAAAAAAAAAAAJYWAAAAAAAAlxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxYAAAAAAACTFgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcWAAAAAAAAmBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxYAAAAAAACXFgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJgWAAAAAAAAmhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBYAAAAAAACYFgAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "libc_includes,"
					},
					"DgAAAJkWAAAAAAAAmhYAAAAAAAAAAAAAmhYAAAAAAACbFgAAAAAAAAAAAACbFgAAAAAAAJwWAAAAAAAAAAAAAJwWAAAAAAAAnRYAAAAAAAAAAAAAnRYAAAAAAACeFgAAAAAAAAAAAACeFgAAAAAAAJ8WAAAAAAAAAAAAAJ8WAAAAAAAAoBYAAAAAAAAAAAAAoBYAAAAAAAChFgAAAAAAAAAAAAChFgAAAAAAAKIWAAAAAAAAAAAAAKIWAAAAAAAAoxYAAAAAAAAAAAAAoxYAAAAAAACkFgAAAAAAAAAAAACkFgAAAAAAAKUWAAAAAAAAAAAAAKUWAAAAAAAAphYAAAAAAAAAAAAAphYAAAAAAACnFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRYAAAAAAACZFgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": " host_machien"
					},
					"DQAAAKcWAAAAAAAAqBYAAAAAAAAAAAAAqBYAAAAAAACpFgAAAAAAAAAAAACpFgAAAAAAAKoWAAAAAAAAAAAAAKoWAAAAAAAAqxYAAAAAAAAAAAAAqxYAAAAAAACsFgAAAAAAAAAAAACsFgAAAAAAAK0WAAAAAAAAAAAAAK0WAAAAAAAArhYAAAAAAAAAAAAArhYAAAAAAACvFgAAAAAAAAAAAACvFgAAAAAAALAWAAAAAAAAAAAAALAWAAAAAAAAsRYAAAAAAAAAAAAAsRYAAAAAAACyFgAAAAAAAAAAAACyFgAAAAAAALMWAAAAAAAAAAAAALMWAAAAAAAAtBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxYAAAAAAACnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					2,
					"left_delete",
					null,
					"AgAAALMWAAAAAAAAsxYAAAAAAAABAAAAbrIWAAAAAAAAshYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAtBYAAAAAAAC0FgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "ne_arch"
					},
					"BwAAALIWAAAAAAAAsxYAAAAAAAAAAAAAsxYAAAAAAAC0FgAAAAAAAAAAAAC0FgAAAAAAALUWAAAAAAAAAAAAALUWAAAAAAAAthYAAAAAAAAAAAAAthYAAAAAAAC3FgAAAAAAAAAAAAC3FgAAAAAAALgWAAAAAAAAAAAAALgWAAAAAAAAuRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshYAAAAAAACyFgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "_specific_inc"
					},
					"DQAAALkWAAAAAAAAuhYAAAAAAAAAAAAAuhYAAAAAAAC7FgAAAAAAAAAAAAC7FgAAAAAAALwWAAAAAAAAAAAAALwWAAAAAAAAvRYAAAAAAAAAAAAAvRYAAAAAAAC+FgAAAAAAAAAAAAC+FgAAAAAAAL8WAAAAAAAAAAAAAL8WAAAAAAAAwBYAAAAAAAAAAAAAwBYAAAAAAADBFgAAAAAAAAAAAADBFgAAAAAAAMIWAAAAAAAAAAAAAMIWAAAAAAAAwxYAAAAAAAAAAAAAwxYAAAAAAADEFgAAAAAAAAAAAADEFgAAAAAAAMUWAAAAAAAAAAAAAMUWAAAAAAAAxhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuRYAAAAAAAC5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "ludes"
					},
					"BQAAAMYWAAAAAAAAxxYAAAAAAAAAAAAAxxYAAAAAAADIFgAAAAAAAAAAAADIFgAAAAAAAMkWAAAAAAAAAAAAAMkWAAAAAAAAyhYAAAAAAAAAAAAAyhYAAAAAAADLFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhYAAAAAAADGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMwWAAAAAAAAzRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBYAAAAAAADMFgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAM0WAAAAAAAAzhYAAAAAAAAAAAAAzhYAAAAAAADPFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRYAAAAAAADNFgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "dependencies:"
					},
					"DQAAAM8WAAAAAAAA0BYAAAAAAAAAAAAA0BYAAAAAAADRFgAAAAAAAAAAAADRFgAAAAAAANIWAAAAAAAAAAAAANIWAAAAAAAA0xYAAAAAAAAAAAAA0xYAAAAAAADUFgAAAAAAAAAAAADUFgAAAAAAANUWAAAAAAAAAAAAANUWAAAAAAAA1hYAAAAAAAAAAAAA1hYAAAAAAADXFgAAAAAAAAAAAADXFgAAAAAAANgWAAAAAAAAAAAAANgWAAAAAAAA2RYAAAAAAAAAAAAA2RYAAAAAAADaFgAAAAAAAAAAAADaFgAAAAAAANsWAAAAAAAAAAAAANsWAAAAAAAA3BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzxYAAAAAAADPFgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANwWAAAAAAAA3RYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BYAAAAAAADcFgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAN0WAAAAAAAA3xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RYAAAAAAADdFgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "libprintf_dep"
					},
					"DQAAAN4WAAAAAAAA3xYAAAAAAAAAAAAA3xYAAAAAAADgFgAAAAAAAAAAAADgFgAAAAAAAOEWAAAAAAAAAAAAAOEWAAAAAAAA4hYAAAAAAAAAAAAA4hYAAAAAAADjFgAAAAAAAAAAAADjFgAAAAAAAOQWAAAAAAAAAAAAAOQWAAAAAAAA5RYAAAAAAAAAAAAA5RYAAAAAAADmFgAAAAAAAAAAAADmFgAAAAAAAOcWAAAAAAAAAAAAAOcWAAAAAAAA6BYAAAAAAAAAAAAA6BYAAAAAAADpFgAAAAAAAAAAAADpFgAAAAAAAOoWAAAAAAAAAAAAAOoWAAAAAAAA6xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hYAAAAAAADeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"left_delete",
					null,
					"AQAAAOsWAAAAAAAA6xYAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAA7BYAAAAAAADsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOsWAAAAAAAA7BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xYAAAAAAADrFgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " openlibm_"
					},
					"CgAAAOwWAAAAAAAA7RYAAAAAAAAAAAAA7RYAAAAAAADuFgAAAAAAAAAAAADuFgAAAAAAAO8WAAAAAAAAAAAAAO8WAAAAAAAA8BYAAAAAAAAAAAAA8BYAAAAAAADxFgAAAAAAAAAAAADxFgAAAAAAAPIWAAAAAAAAAAAAAPIWAAAAAAAA8xYAAAAAAAAAAAAA8xYAAAAAAAD0FgAAAAAAAAAAAAD0FgAAAAAAAPUWAAAAAAAAAAAAAPUWAAAAAAAA9hYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7BYAAAAAAADsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "dep],"
					},
					"BQAAAPYWAAAAAAAA9xYAAAAAAAAAAAAA9xYAAAAAAAD4FgAAAAAAAAAAAAD4FgAAAAAAAPkWAAAAAAAAAAAAAPkWAAAAAAAA+hYAAAAAAAAAAAAA+hYAAAAAAAD7FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hYAAAAAAAD2FgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPsWAAAAAAAA/BYAAAAAAAAAAAAA/BYAAAAAAAD9FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xYAAAAAAAD7FgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "native:"
					},
					"BwAAAP0WAAAAAAAA/hYAAAAAAAAAAAAA/hYAAAAAAAD/FgAAAAAAAAAAAAD/FgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAARcAAAAAAAAAAAAAARcAAAAAAAACFwAAAAAAAAAAAAACFwAAAAAAAAMXAAAAAAAAAAAAAAMXAAAAAAAABBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RYAAAAAAAD9FgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " false,"
					},
					"BwAAAAQXAAAAAAAABRcAAAAAAAAAAAAABRcAAAAAAAAGFwAAAAAAAAAAAAAGFwAAAAAAAAcXAAAAAAAAAAAAAAcXAAAAAAAACBcAAAAAAAAAAAAACBcAAAAAAAAJFwAAAAAAAAAAAAAJFwAAAAAAAAoXAAAAAAAAAAAAAAoXAAAAAAAACxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBcAAAAAAAAEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"left_delete",
					null,
					"AQAAAAsXAAAAAAAACxcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAADBcAAAAAAAAMFwAAAAAAAAAAAAAAIGFA"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA0XAAAAAAAADhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRcAAAAAAAANFwAAAAAAAAAAAAAAIGFA"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA4XAAAAAAAADxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhcAAAAAAAAOFwAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "libc_"
					},
					"BQAAAA8XAAAAAAAAEBcAAAAAAAAAAAAAEBcAAAAAAAARFwAAAAAAAAAAAAARFwAAAAAAABIXAAAAAAAAAAAAABIXAAAAAAAAExcAAAAAAAAAAAAAExcAAAAAAAAUFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxcAAAAAAAAPFwAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "dep"
					},
					"AwAAABQXAAAAAAAAFRcAAAAAAAAAAAAAFRcAAAAAAAAWFwAAAAAAAAAAAAAWFwAAAAAAABcXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBcAAAAAAAAUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABcXAAAAAAAAGBcAAAAAAAAAAAAAGBcAAAAAAAAZFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxcAAAAAAAAXFwAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " declare"
					},
					"CAAAABkXAAAAAAAAGhcAAAAAAAAAAAAAGhcAAAAAAAAbFwAAAAAAAAAAAAAbFwAAAAAAABwXAAAAAAAAAAAAABwXAAAAAAAAHRcAAAAAAAAAAAAAHRcAAAAAAAAeFwAAAAAAAAAAAAAeFwAAAAAAAB8XAAAAAAAAAAAAAB8XAAAAAAAAIBcAAAAAAAAAAAAAIBcAAAAAAAAhFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGRcAAAAAAAAZFwAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": "_dependency"
					},
					"CwAAACEXAAAAAAAAIhcAAAAAAAAAAAAAIhcAAAAAAAAjFwAAAAAAAAAAAAAjFwAAAAAAACQXAAAAAAAAAAAAACQXAAAAAAAAJRcAAAAAAAAAAAAAJRcAAAAAAAAmFwAAAAAAAAAAAAAmFwAAAAAAACcXAAAAAAAAAAAAACcXAAAAAAAAKBcAAAAAAAAAAAAAKBcAAAAAAAApFwAAAAAAAAAAAAApFwAAAAAAACoXAAAAAAAAAAAAACoXAAAAAAAAKxcAAAAAAAAAAAAAKxcAAAAAAAAsFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRcAAAAAAAAhFwAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACwXAAAAAAAALhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBcAAAAAAAAsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAC0XAAAAAAAALhcAAAAAAAAAAAAALhcAAAAAAAAvFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRcAAAAAAAAtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"left_delete",
					null,
					"AQAAAC4XAAAAAAAALhcAAAAAAAABAAAACQ",
					"AQAAAAAAAAABAAAALxcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC4XAAAAAAAALxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhcAAAAAAAAuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"reindent",
					null,
					"AQAAAC4XAAAAAAAALxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhcAAAAAAAAuFwAAAAAAAAAAAAAAAAAA"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "include:"
					},
					"CAAAAC8XAAAAAAAAMBcAAAAAAAAAAAAAMBcAAAAAAAAxFwAAAAAAAAAAAAAxFwAAAAAAADIXAAAAAAAAAAAAADIXAAAAAAAAMxcAAAAAAAAAAAAAMxcAAAAAAAA0FwAAAAAAAAAAAAA0FwAAAAAAADUXAAAAAAAAAAAAADUXAAAAAAAANhcAAAAAAAAAAAAANhcAAAAAAAA3FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"left_delete",
					null,
					"AQAAADYXAAAAAAAANhcAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAANxcAAAAAAAA3FwAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "_directoreis"
					},
					"DAAAADYXAAAAAAAANxcAAAAAAAAAAAAANxcAAAAAAAA4FwAAAAAAAAAAAAA4FwAAAAAAADkXAAAAAAAAAAAAADkXAAAAAAAAOhcAAAAAAAAAAAAAOhcAAAAAAAA7FwAAAAAAAAAAAAA7FwAAAAAAADwXAAAAAAAAAAAAADwXAAAAAAAAPRcAAAAAAAAAAAAAPRcAAAAAAAA+FwAAAAAAAAAAAAA+FwAAAAAAAD8XAAAAAAAAAAAAAD8XAAAAAAAAQBcAAAAAAAAAAAAAQBcAAAAAAABBFwAAAAAAAAAAAABBFwAAAAAAAEIXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhcAAAAAAAA2FwAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					3,
					"left_delete",
					null,
					"AwAAAEEXAAAAAAAAQRcAAAAAAAABAAAAc0AXAAAAAAAAQBcAAAAAAAABAAAAaT8XAAAAAAAAPxcAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAQhcAAAAAAABCFwAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "ies:"
					},
					"BAAAAD8XAAAAAAAAQBcAAAAAAAAAAAAAQBcAAAAAAABBFwAAAAAAAAAAAABBFwAAAAAAAEIXAAAAAAAAAAAAAEIXAAAAAAAAQxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxcAAAAAAAA/FwAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMXAAAAAAAARBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQxcAAAAAAABDFwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEQXAAAAAAAARhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBcAAAAAAABEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "libc_"
					},
					"BQAAAEUXAAAAAAAARhcAAAAAAAAAAAAARhcAAAAAAABHFwAAAAAAAAAAAABHFwAAAAAAAEgXAAAAAAAAAAAAAEgXAAAAAAAASRcAAAAAAAAAAAAASRcAAAAAAABKFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRcAAAAAAABFFwAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "includes,"
					},
					"CQAAAEoXAAAAAAAASxcAAAAAAAAAAAAASxcAAAAAAABMFwAAAAAAAAAAAABMFwAAAAAAAE0XAAAAAAAAAAAAAE0XAAAAAAAAThcAAAAAAAAAAAAAThcAAAAAAABPFwAAAAAAAAAAAABPFwAAAAAAAFAXAAAAAAAAAAAAAFAXAAAAAAAAURcAAAAAAAAAAAAAURcAAAAAAABSFwAAAAAAAAAAAABSFwAAAAAAAFMXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShcAAAAAAABKFwAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": " host_mac"
					},
					"CQAAAFMXAAAAAAAAVBcAAAAAAAAAAAAAVBcAAAAAAABVFwAAAAAAAAAAAABVFwAAAAAAAFYXAAAAAAAAAAAAAFYXAAAAAAAAVxcAAAAAAAAAAAAAVxcAAAAAAABYFwAAAAAAAAAAAABYFwAAAAAAAFkXAAAAAAAAAAAAAFkXAAAAAAAAWhcAAAAAAAAAAAAAWhcAAAAAAABbFwAAAAAAAAAAAABbFwAAAAAAAFwXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUxcAAAAAAABTFwAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert_completion",
					{
						"completion": "host_machine_arch_specific_includes",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "host_machine_arch_specific_includes"
					},
					"AgAAAFQXAAAAAAAAVBcAAAAAAAAIAAAAaG9zdF9tYWNUFwAAAAAAAHcXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXBcAAAAAAABcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHcXAAAAAAAAeBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxcAAAAAAAB3FwAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": " printf_includes"
					},
					"EAAAAHgXAAAAAAAAeRcAAAAAAAAAAAAAeRcAAAAAAAB6FwAAAAAAAAAAAAB6FwAAAAAAAHsXAAAAAAAAAAAAAHsXAAAAAAAAfBcAAAAAAAAAAAAAfBcAAAAAAAB9FwAAAAAAAAAAAAB9FwAAAAAAAH4XAAAAAAAAAAAAAH4XAAAAAAAAfxcAAAAAAAAAAAAAfxcAAAAAAACAFwAAAAAAAAAAAACAFwAAAAAAAIEXAAAAAAAAAAAAAIEXAAAAAAAAghcAAAAAAAAAAAAAghcAAAAAAACDFwAAAAAAAAAAAACDFwAAAAAAAIQXAAAAAAAAAAAAAIQXAAAAAAAAhRcAAAAAAAAAAAAAhRcAAAAAAACGFwAAAAAAAAAAAACGFwAAAAAAAIcXAAAAAAAAAAAAAIcXAAAAAAAAiBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBcAAAAAAAB4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIgXAAAAAAAAiRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBcAAAAAAACIFwAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": " openlib"
					},
					"CAAAAIkXAAAAAAAAihcAAAAAAAAAAAAAihcAAAAAAACLFwAAAAAAAAAAAACLFwAAAAAAAIwXAAAAAAAAAAAAAIwXAAAAAAAAjRcAAAAAAAAAAAAAjRcAAAAAAACOFwAAAAAAAAAAAACOFwAAAAAAAI8XAAAAAAAAAAAAAI8XAAAAAAAAkBcAAAAAAAAAAAAAkBcAAAAAAACRFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRcAAAAAAACJFwAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert_completion",
					{
						"completion": "openlibm_includes",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "openlibm_includes"
					},
					"AgAAAIoXAAAAAAAAihcAAAAAAAAHAAAAb3BlbmxpYooXAAAAAAAAmxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRcAAAAAAACRFwAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJwXAAAAAAAAnRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBcAAAAAAACcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ0XAAAAAAAAnhcAAAAAAAAAAAAAnhcAAAAAAACfFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRcAAAAAAACdFwAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "compile_args:"
					},
					"DQAAAJ8XAAAAAAAAoBcAAAAAAAAAAAAAoBcAAAAAAAChFwAAAAAAAAAAAAChFwAAAAAAAKIXAAAAAAAAAAAAAKIXAAAAAAAAoxcAAAAAAAAAAAAAoxcAAAAAAACkFwAAAAAAAAAAAACkFwAAAAAAAKUXAAAAAAAAAAAAAKUXAAAAAAAAphcAAAAAAAAAAAAAphcAAAAAAACnFwAAAAAAAAAAAACnFwAAAAAAAKgXAAAAAAAAAAAAAKgXAAAAAAAAqRcAAAAAAAAAAAAAqRcAAAAAAACqFwAAAAAAAAAAAACqFwAAAAAAAKsXAAAAAAAAAAAAAKsXAAAAAAAArBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxcAAAAAAACfFwAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " libc_"
					},
					"BgAAAKwXAAAAAAAArRcAAAAAAAAAAAAArRcAAAAAAACuFwAAAAAAAAAAAACuFwAAAAAAAK8XAAAAAAAAAAAAAK8XAAAAAAAAsBcAAAAAAAAAAAAAsBcAAAAAAACxFwAAAAAAAAAAAACxFwAAAAAAALIXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBcAAAAAAACsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert_completion",
					{
						"completion": "libc_compile_flags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "libc_compile_flags"
					},
					"AgAAAK0XAAAAAAAArRcAAAAAAAAFAAAAbGliY1+tFwAAAAAAAL8XAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshcAAAAAAACyFwAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAL8XAAAAAAAAwBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxcAAAAAAAC/FwAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMAXAAAAAAAAwRcAAAAAAAAAAAAAwRcAAAAAAADCFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBcAAAAAAADAFwAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "link_with:"
					},
					"CgAAAMIXAAAAAAAAwxcAAAAAAAAAAAAAwxcAAAAAAADEFwAAAAAAAAAAAADEFwAAAAAAAMUXAAAAAAAAAAAAAMUXAAAAAAAAxhcAAAAAAAAAAAAAxhcAAAAAAADHFwAAAAAAAAAAAADHFwAAAAAAAMgXAAAAAAAAAAAAAMgXAAAAAAAAyRcAAAAAAAAAAAAAyRcAAAAAAADKFwAAAAAAAAAAAADKFwAAAAAAAMsXAAAAAAAAAAAAAMsXAAAAAAAAzBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhcAAAAAAADCFwAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": " libc"
					},
					"BQAAAMwXAAAAAAAAzRcAAAAAAAAAAAAAzRcAAAAAAADOFwAAAAAAAAAAAADOFwAAAAAAAM8XAAAAAAAAAAAAAM8XAAAAAAAA0BcAAAAAAAAAAAAA0BcAAAAAAADRFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBcAAAAAAADMFwAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANEXAAAAAAAA0hcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RcAAAAAAADRFwAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAAGoRAAAAAAAAaxEAAAAAAAAAAAAAaxEAAAAAAABsEQAAAAAAAAAAAABsEQAAAAAAAG0RAAAAAAAAAAAAAG0RAAAAAAAAbhEAAAAAAAAAAAAAbhEAAAAAAABvEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahEAAAAAAABqEQAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAAJcTAAAAAAAAmBMAAAAAAAAAAAAAmBMAAAAAAACZEwAAAAAAAAAAAACZEwAAAAAAAJoTAAAAAAAAAAAAAJoTAAAAAAAAmxMAAAAAAAAAAAAAmxMAAAAAAACcEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxMAAAAAAACXEwAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAAAgUAAAAAAAACRQAAAAAAAAAAAAACRQAAAAAAAAKFAAAAAAAAAAAAAAKFAAAAAAAAAsUAAAAAAAAAAAAAAsUAAAAAAAADBQAAAAAAAAAAAAADBQAAAAAAAANFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBQAAAAAAAAIFAAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"left_delete",
					null,
					"AQAAAEEWAAAAAAAAQRYAAAAAAAADAAAAbGli",
					"AQAAAAAAAAABAAAARBYAAAAAAABBFgAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAFkRAAAAAAAAWhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWREAAAAAAABZEQAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAAFoRAAAAAAAAWxEAAAAAAAAAAAAAWxEAAAAAAABcEQAAAAAAAAAAAABcEQAAAAAAAF0RAAAAAAAAAAAAAF0RAAAAAAAAXhEAAAAAAAAAAAAAXhEAAAAAAABfEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhEAAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"left_delete",
					null,
					"AQAAAF4RAAAAAAAAXhEAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAXxEAAAAAAABfEQAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPARAAAAAAAA8REAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BEAAAAAAADwEQAAAAAAAAAAAAAAACBA"
				],
				[
					387,
					1,
					"paste",
					null,
					"AQAAAPERAAAAAAAAixIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8REAAAAAAADxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "native"
					},
					"BwAAAPYRAAAAAAAA9xEAAAAAAAAAAAAA9xEAAAAAAAD3EQAAAAAAAAQAAABob3N09xEAAAAAAAD4EQAAAAAAAAAAAAD4EQAAAAAAAPkRAAAAAAAAAAAAAPkRAAAAAAAA+hEAAAAAAAAAAAAA+hEAAAAAAAD7EQAAAAAAAAAAAAD7EQAAAAAAAPwRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hEAAAAAAAD2EQAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "native"
					},
					"BwAAAA0SAAAAAAAADhIAAAAAAAAAAAAADhIAAAAAAAAOEgAAAAAAAAQAAABob3N0DhIAAAAAAAAPEgAAAAAAAAAAAAAPEgAAAAAAABASAAAAAAAAAAAAABASAAAAAAAAERIAAAAAAAAAAAAAERIAAAAAAAASEgAAAAAAAAAAAAASEgAAAAAAABMSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERIAAAAAAAANEgAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAACkUAAAAAAAAKhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRQAAAAAAAApFAAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					1,
					"insert",
					{
						"characters": "host"
					},
					"BAAAACoUAAAAAAAAKxQAAAAAAAAAAAAAKxQAAAAAAAAsFAAAAAAAAAAAAAAsFAAAAAAAAC0UAAAAAAAAAAAAAC0UAAAAAAAALhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhQAAAAAAAAqFAAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHYUAAAAAAAAdxQAAAAAAAAAAAAAdxQAAAAAAAB4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdhQAAAAAAAB2FAAAAAAAAP///////+9/"
				],
				[
					431,
					1,
					"paste",
					null,
					"AQAAAHgUAAAAAAAAyRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBQAAAAAAAB4FAAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": "native"
					},
					"DgAAAJMUAAAAAAAAlBQAAAAAAAAAAAAAlBQAAAAAAACUFAAAAAAAAAQAAABob3N0fRQAAAAAAAB+FAAAAAAAAAAAAAB+FAAAAAAAAH4UAAAAAAAABAAAAGhvc3SRFAAAAAAAAJIUAAAAAAAAAAAAAH4UAAAAAAAAfxQAAAAAAAAAAAAAkxQAAAAAAACUFAAAAAAAAAAAAAB/FAAAAAAAAIAUAAAAAAAAAAAAAJUUAAAAAAAAlhQAAAAAAAAAAAAAgBQAAAAAAACBFAAAAAAAAAAAAACXFAAAAAAAAJgUAAAAAAAAAAAAAIEUAAAAAAAAghQAAAAAAAAAAAAAmRQAAAAAAACaFAAAAAAAAAAAAACCFAAAAAAAAIMUAAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAAfRQAAAAAAACBFAAAAAAAAAAAAAAAAPC/kxQAAAAAAACXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAPcUAAAAAAAA+BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xQAAAAAAAD3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAAPgUAAAAAAAA+RQAAAAAAAAAAAAA+RQAAAAAAAD6FAAAAAAAAAAAAAD6FAAAAAAAAPsUAAAAAAAAAAAAAPsUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAD9FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BQAAAAAAAD4FAAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					6,
					"left_delete",
					null,
					"BgAAAPwUAAAAAAAA/BQAAAAAAAABAAAAX/sUAAAAAAAA+xQAAAAAAAABAAAAdPoUAAAAAAAA+hQAAAAAAAABAAAAc/kUAAAAAAAA+RQAAAAAAAABAAAAb/gUAAAAAAAA+BQAAAAAAAABAAAAaPcUAAAAAAAA9xQAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA/RQAAAAAAAD9FAAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "host_"
					},
					"BQAAAPcUAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD5FAAAAAAAAAAAAAD5FAAAAAAAAPoUAAAAAAAAAAAAAPoUAAAAAAAA+xQAAAAAAAAAAAAA+xQAAAAAAAD8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9xQAAAAAAAD3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAAEsVAAAAAAAATBUAAAAAAAAAAAAATBUAAAAAAABNFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxUAAAAAAABLFQAAAAAAAP///////+9/"
				],
				[
					461,
					1,
					"paste",
					null,
					"AQAAAE0VAAAAAAAAphUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRUAAAAAAABNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"insert",
					{
						"characters": "native"
					},
					"DgAAAGgVAAAAAAAAaRUAAAAAAAAAAAAAaRUAAAAAAABpFQAAAAAAAAQAAABob3N0UhUAAAAAAABTFQAAAAAAAAAAAABTFQAAAAAAAFMVAAAAAAAABAAAAGhvc3RmFQAAAAAAAGcVAAAAAAAAAAAAAFMVAAAAAAAAVBUAAAAAAAAAAAAAaBUAAAAAAABpFQAAAAAAAAAAAABUFQAAAAAAAFUVAAAAAAAAAAAAAGoVAAAAAAAAaxUAAAAAAAAAAAAAVRUAAAAAAABWFQAAAAAAAAAAAABsFQAAAAAAAG0VAAAAAAAAAAAAAFYVAAAAAAAAVxUAAAAAAAAAAAAAbhUAAAAAAABvFQAAAAAAAAAAAABXFQAAAAAAAFgVAAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAAUhUAAAAAAABWFQAAAAAAAAAAAAAAAPC/aBUAAAAAAABsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAA4WAAAAAAAADxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhYAAAAAAAAOFgAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACEWAAAAAAAAIhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRYAAAAAAAAhFgAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": " ["
					},
					"AgAAACIWAAAAAAAAIxYAAAAAAAAAAAAAIxYAAAAAAAAkFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhYAAAAAAAAiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"left_delete",
					null,
					"AQAAACMWAAAAAAAAIxYAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAJBYAAAAAAAAkFgAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAACMWAAAAAAAAJBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxYAAAAAAAAjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": "libc_native"
					},
					"CwAAACMWAAAAAAAAJBYAAAAAAAAAAAAAJBYAAAAAAAAlFgAAAAAAAAAAAAAlFgAAAAAAACYWAAAAAAAAAAAAACYWAAAAAAAAJxYAAAAAAAAAAAAAJxYAAAAAAAAoFgAAAAAAAAAAAAAoFgAAAAAAACkWAAAAAAAAAAAAACkWAAAAAAAAKhYAAAAAAAAAAAAAKhYAAAAAAAArFgAAAAAAAAAAAAArFgAAAAAAACwWAAAAAAAAAAAAACwWAAAAAAAALRYAAAAAAAAAAAAALRYAAAAAAAAuFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxYAAAAAAAAjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					488,
					1,
					"insert",
					{
						"characters": "_compile_flags"
					},
					"DgAAAC4WAAAAAAAALxYAAAAAAAAAAAAALxYAAAAAAAAwFgAAAAAAAAAAAAAwFgAAAAAAADEWAAAAAAAAAAAAADEWAAAAAAAAMhYAAAAAAAAAAAAAMhYAAAAAAAAzFgAAAAAAAAAAAAAzFgAAAAAAADQWAAAAAAAAAAAAADQWAAAAAAAANRYAAAAAAAAAAAAANRYAAAAAAAA2FgAAAAAAAAAAAAA2FgAAAAAAADcWAAAAAAAAAAAAADcWAAAAAAAAOBYAAAAAAAAAAAAAOBYAAAAAAAA5FgAAAAAAAAAAAAA5FgAAAAAAADoWAAAAAAAAAAAAADoWAAAAAAAAOxYAAAAAAAAAAAAAOxYAAAAAAAA8FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhYAAAAAAAAuFgAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"insert",
					{
						"characters": "["
					},
					"AQAAAPsXAAAAAAAA/BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xcAAAAAAAD7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA4YAAAAAAAADxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhgAAAAAAAAOGAAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": " libc_"
					},
					"BgAAAA8YAAAAAAAAEBgAAAAAAAAAAAAAEBgAAAAAAAARGAAAAAAAAAAAAAARGAAAAAAAABIYAAAAAAAAAAAAABIYAAAAAAAAExgAAAAAAAAAAAAAExgAAAAAAAAUGAAAAAAAAAAAAAAUGAAAAAAAABUYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxgAAAAAAAAPGAAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": "host_compi"
					},
					"CgAAABUYAAAAAAAAFhgAAAAAAAAAAAAAFhgAAAAAAAAXGAAAAAAAAAAAAAAXGAAAAAAAABgYAAAAAAAAAAAAABgYAAAAAAAAGRgAAAAAAAAAAAAAGRgAAAAAAAAaGAAAAAAAAAAAAAAaGAAAAAAAABsYAAAAAAAAAAAAABsYAAAAAAAAHBgAAAAAAAAAAAAAHBgAAAAAAAAdGAAAAAAAAAAAAAAdGAAAAAAAAB4YAAAAAAAAAAAAAB4YAAAAAAAAHxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRgAAAAAAAAVGAAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert_completion",
					{
						"completion": "libc_host_compile_flags",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "libc_host_compile_flags"
					},
					"AgAAABAYAAAAAAAAEBgAAAAAAAAPAAAAbGliY19ob3N0X2NvbXBpEBgAAAAAAAAnGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxgAAAAAAAAfGAAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "[]"
					},
					"AgAAACcYAAAAAAAAKBgAAAAAAAAAAAAAKBgAAAAAAAApGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxgAAAAAAAAnGAAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					2,
					"left_delete",
					null,
					"AgAAACgYAAAAAAAAKBgAAAAAAAABAAAAXScYAAAAAAAAJxgAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAKRgAAAAAAAApGAAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": "]["
					},
					"AgAAACcYAAAAAAAAKBgAAAAAAAAAAAAAKBgAAAAAAAApGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxgAAAAAAAAnGAAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					2,
					"left_delete",
					null,
					"AgAAACgYAAAAAAAAKBgAAAAAAAABAAAAWycYAAAAAAAAJxgAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAKRgAAAAAAAApGAAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAACcYAAAAAAAAKBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxgAAAAAAAAnGAAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"left_delete",
					null,
					"AQAAACcYAAAAAAAAJxgAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAKBgAAAAAAAAoGAAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"left_delete",
					null,
					"AQAAAPsXAAAAAAAA+xcAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAA/BcAAAAAAAD7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAA0YAAAAAAAADhgAAAAAAAAAAAAADhgAAAAAAAAOGAAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAADhgAAAAAAAANGAAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAA4YAAAAAAAADxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhgAAAAAAAAOGAAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACEWAAAAAAAAIhYAAAAAAAAAAAAAIhYAAAAAAAAiFgAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAIhYAAAAAAAAhFgAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAACIWAAAAAAAAIxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhYAAAAAAAAiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"right_delete",
					null,
					"AQAAACMWAAAAAAAAIxYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAIxYAAAAAAAAjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACMWAAAAAAAAJBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxYAAAAAAAAjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"left_delete",
					null,
					"AQAAAD0WAAAAAAAAPRYAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAPhYAAAAAAAA+FgAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"left_delete",
					null,
					"AQAAAA4WAAAAAAAADhYAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAADhYAAAAAAAAPFgAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFQRAAAAAAAAVREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBEAAAAAAABUEQAAAAAAAAAAAAAAAAAA"
				],
				[
					566,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFURAAAAAAAAVhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVREAAAAAAABVEQAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "libc_compile_"
					},
					"DQAAAFURAAAAAAAAVhEAAAAAAAAAAAAAVhEAAAAAAABXEQAAAAAAAAAAAABXEQAAAAAAAFgRAAAAAAAAAAAAAFgRAAAAAAAAWREAAAAAAAAAAAAAWREAAAAAAABaEQAAAAAAAAAAAABaEQAAAAAAAFsRAAAAAAAAAAAAAFsRAAAAAAAAXBEAAAAAAAAAAAAAXBEAAAAAAABdEQAAAAAAAAAAAABdEQAAAAAAAF4RAAAAAAAAAAAAAF4RAAAAAAAAXxEAAAAAAAAAAAAAXxEAAAAAAABgEQAAAAAAAAAAAABgEQAAAAAAAGERAAAAAAAAAAAAAGERAAAAAAAAYhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVREAAAAAAABVEQAAAAAAAAAAAAAAAAAA"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": "flags"
					},
					"BQAAAGIRAAAAAAAAYxEAAAAAAAAAAAAAYxEAAAAAAABkEQAAAAAAAAAAAABkEQAAAAAAAGURAAAAAAAAAAAAAGURAAAAAAAAZhEAAAAAAAAAAAAAZhEAAAAAAABnEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhEAAAAAAABiEQAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGcRAAAAAAAAaBEAAAAAAAAAAAAAaBEAAAAAAABpEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxEAAAAAAABnEQAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkRAAAAAAAAahEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaREAAAAAAABpEQAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAGoRAAAAAAAAbBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahEAAAAAAABqEQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "libc-skeleton/test/string/memcmp.c",
			"settings":
			{
				"buffer_size": 901,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "libc-skeleton/subprojects/cmocka.wrap",
			"settings":
			{
				"buffer_size": 446,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA+AgAAAAAAAMQBAABbd3JhcC1maWxlXQpkaXJlY3RvcnkgPSBjbW9ja2EtMS4xLjUKCnNvdXJjZV91cmwgPSBodHRwczovL2Ntb2NrYS5vcmcvZmlsZXMvMS4xL2Ntb2NrYS0xLjEuNS50YXIueHoKc291cmNlX2ZpbGVuYW1lID0gY21vY2thLTEuMS41LnRhci54egpzb3VyY2VfaGFzaCA9IGYwY2NkODI0MmQ1NWUyZmQ3NGIxNmJhNTE4MzU5MTUxZjZmODM4M2ZmOGFlZjQ5NzZlNDgzOTNmNzdiYmE4YjYKCnBhdGNoX3VybCA9IGh0dHBzOi8vd3JhcGRiLm1lc29uYnVpbGQuY29tL3YxL3Byb2plY3RzL2Ntb2NrYS8xLjEuNS8zL2dldF96aXAKcGF0Y2hfZmlsZW5hbWUgPSBjbW9ja2EtMS4xLjUtMy13cmFwLnppcApwYXRjaF9oYXNoID0gODFjZTQ4NjEzNjgwZDNjM2EwYjM5NmFjNTcwYzg1MmIyOTBhZGNkMTgyMDJmYjE2YWFmNzAzYTk0OTNmNDM0OAoKW3Byb3ZpZGVdCmNtb2NrYSA9IGNtb2NrYV9uYXRpdmVfZGVwCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "native_"
					},
					"BwAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA8AgAAAAAAAD0CAAAAAAAAAAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAEACAAAAAAAAQQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AwAAACACAAAAAAAAIAIAAAAAAAAkAAAAW3Byb3ZpZGVdCmNtb2NrYSA9IGNtb2NrYV9uYXRpdmVfZGVwHwIAAAAAAAAfAgAAAAAAAAEAAAAKHgIAAAAAAAAeAgAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABEAgAAAAAAACACAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAAYCAAAAAAAABgIAAAAAAAAYAAAAd3JhcGRiX3ZlcnNpb24gPSAxLjEuNy0y",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeAgAAAAAAAAYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAJYBAAAAAAAAlgEAAAAAAABwAAAAc291cmNlX2ZhbGxiYWNrX3VybCA9IGh0dHBzOi8vZ2l0aHViLmNvbS9tZXNvbmJ1aWxkL3dyYXBkYi9yZWxlYXNlcy9kb3dubG9hZC9jbW9ja2FfMS4xLjctMi9jbW9ja2EtMS4xLjcudGFyLnh6Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAgAAAAAAAJYBAAAAAAAAAAAAAAAAAAA"
				],
				[
					29,
					1,
					"paste",
					null,
					"AgAAAFUBAAAAAAAAlQEAAAAAAAAAAAAAlQEAAAAAAACVAQAAAAAAAEAAAAA2ZTk2YTFhMzFhOTUyMjcwYTU3MWZkOWFiZjljYTliMDllZjcxNjg2MDQyNTA0ZjczMTZkY2FjNmU1ZDFkMTRl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVAQAAAAAAAJUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAPYAAAAAAAAA9gAAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AAAAAAAAAPcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2AAAAAAAAAPYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"paste",
					null,
					"AgAAAA4BAAAAAAAAhwEAAAAAAAAAAAAAhwEAAAAAAACHAQAAAAAAADkAAABodHRwczovL3dyYXBkYi5tZXNvbmJ1aWxkLmNvbS92Mi9jbW9ja2FfMS4xLjctMi9nZXRfcGF0Y2g",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAQAAAAAAAEcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"paste",
					null,
					"AgAAAA4BAAAAAAAAgwEAAAAAAAAAAAAAgwEAAAAAAACDAQAAAAAAAHkAAABodHRwczovL2Rvd25naXQuZ2l0aHViLmlvLyMvaG9tZT91cmw9aHR0cHM6Ly9naXRodWIuY29tL2RvbnRibGluay9jbW9ja2EtMS4xLjdfMy1wYXRjaC9ibG9iL21haW4vY21vY2thLTEuMS43LTNfcGF0Y2guemlw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAQAAAAAAAIcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAIMBAAAAAAAAhAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDAQAAAAAAAIMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": "fileName"
					},
					"CAAAAIQBAAAAAAAAhQEAAAAAAAAAAAAAhQEAAAAAAACGAQAAAAAAAAAAAACGAQAAAAAAAIcBAAAAAAAAAAAAAIcBAAAAAAAAiAEAAAAAAAAAAAAAiAEAAAAAAACJAQAAAAAAAAAAAACJAQAAAAAAAIoBAAAAAAAAAAAAAIoBAAAAAAAAiwEAAAAAAAAAAAAAiwEAAAAAAACMAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEAQAAAAAAAIQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIwBAAAAAAAAjQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAQAAAAAAAIwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "cmocka-"
					},
					"BwAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAACSAQAAAAAAAJMBAAAAAAAAAAAAAJMBAAAAAAAAlAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAQAAAAAAAI0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJQBAAAAAAAAlQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAQAAAAAAAJQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"left_delete",
					null,
					"AQAAAJQBAAAAAAAAlAEAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVAQAAAAAAAJUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"left_delete",
					null,
					"AQAAAJMBAAAAAAAAkwEAAAAAAAABAAAALQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAQAAAAAAAJQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAQAAAAAAAJMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					158,
					1,
					"insert",
					{
						"characters": "1.1.7"
					},
					"BQAAAJQBAAAAAAAAlQEAAAAAAAAAAAAAlQEAAAAAAACWAQAAAAAAAAAAAACWAQAAAAAAAJcBAAAAAAAAAAAAAJcBAAAAAAAAmAEAAAAAAAAAAAAAmAEAAAAAAACZAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAQAAAAAAAJQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "-3pa"
					},
					"BAAAAJkBAAAAAAAAmgEAAAAAAAAAAAAAmgEAAAAAAACbAQAAAAAAAAAAAACbAQAAAAAAAJwBAAAAAAAAAAAAAJwBAAAAAAAAnQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAQAAAAAAAJkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "tch"
					},
					"AwAAAJ0BAAAAAAAAngEAAAAAAAAAAAAAngEAAAAAAACfAQAAAAAAAAAAAACfAQAAAAAAAKABAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAQAAAAAAAJ0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAKABAAAAAAAAoQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAQAAAAAAAKABAAAAAAAAAAAAAAAA8L8"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "rootDirector"
					},
					"DAAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAACmAQAAAAAAAKcBAAAAAAAAAAAAAKcBAAAAAAAAqAEAAAAAAAAAAAAAqAEAAAAAAACpAQAAAAAAAAAAAACpAQAAAAAAAKoBAAAAAAAAAAAAAKoBAAAAAAAAqwEAAAAAAAAAAAAAqwEAAAAAAACsAQAAAAAAAAAAAACsAQAAAAAAAK0BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAQAAAAAAAKEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "y="
					},
					"AgAAAK0BAAAAAAAArgEAAAAAAAAAAAAArgEAAAAAAACvAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAQAAAAAAAK0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "cmocka-1.1"
					},
					"CgAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAACxAQAAAAAAALIBAAAAAAAAAAAAALIBAAAAAAAAswEAAAAAAAAAAAAAswEAAAAAAAC0AQAAAAAAAAAAAAC0AQAAAAAAALUBAAAAAAAAAAAAALUBAAAAAAAAtgEAAAAAAAAAAAAAtgEAAAAAAAC3AQAAAAAAAAAAAAC3AQAAAAAAALgBAAAAAAAAAAAAALgBAAAAAAAAuQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAQAAAAAAAK8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": ".7"
					},
					"AgAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AQAAAAAAALkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAQAAAAAAAJsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					1,
					"paste",
					null,
					"AgAAAMoBAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKAgAAAAAAAEAAAAAzNmU1MThmYzI1MTkyZmM2NzljYmUzMjc5MjA1ZDljMjVhNzdjMDkwOTc1NTZjYzRlYWU1ZTRmMTZlNzM2Mzc3",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKAQAAAAAAAAoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					274,
					1,
					"paste",
					null,
					"AgAAAA4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABvAQAAAAAAAK4AAABodHRwczovL2Rvd25naXQuZ2l0aHViLmlvLyMvaG9tZT91cmw9aHR0cHM6Ly9naXRodWIuY29tL2RvbnRibGluay9jbW9ja2EtMS4xLjdfMy1wYXRjaC90cmVlL21haW4vY21vY2thLTEuMS43LTNfcGF0Y2gmZmlsZU5hbWU9Y21vY2thXzEuMS43LTNfcGF0Y2gmcm9vdERpcmVjdG9yeT1jbW9ja2EtMS4xLjc",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAQAAAAAAALwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL0BAAAAAAAAvgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9AQAAAAAAAL0BAAAAAAAAAAAAAADwiUA"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AQAAAAAAAL4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					387,
					1,
					"paste",
					null,
					"AQAAAL8BAAAAAAAA/QMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/AQAAAAAAAL8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					390,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"DAAAAOkDAAAAAAAA6wMAAAAAAAAAAAAA3wMAAAAAAADhAwAAAAAAAAAAAADFAwAAAAAAAMcDAAAAAAAAAAAAAFUDAAAAAAAAVwMAAAAAAAAAAAAABwMAAAAAAAAJAwAAAAAAAAAAAADBAgAAAAAAAMMCAAAAAAAAAAAAAJcCAAAAAAAAmQIAAAAAAAAAAAAASAIAAAAAAABKAgAAAAAAAAAAAAAiAgAAAAAAACQCAAAAAAAAAAAAAOQBAAAAAAAA5gEAAAAAAAAAAAAAywEAAAAAAADNAQAAAAAAAAAAAAC/AQAAAAAAAMEBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AwAAAAAAAL8BAAAAAAAAAAAAAAAAAAA"
				],
				[
					427,
					1,
					"left_delete",
					null,
					"AQAAAL8BAAAAAAAAvwEAAAAAAABYAgAAOyBbd3JhcC1maWxlXQo7IGRpcmVjdG9yeSA9IGNtb2NrYS0xLjEuNwo7IHNvdXJjZV91cmwgPSBodHRwczovL2Ntb2NrYS5vcmcvZmlsZXMvMS4xL2Ntb2NrYS0xLjEuNy50YXIueHoKOyBzb3VyY2VfZmlsZW5hbWUgPSBjbW9ja2EtMS4xLjcudGFyLnh6Cjsgc291cmNlX2hhc2ggPSA4MTA1NzBlYjBiOGQ2NDgwNDMzMWY4MmIyOWZmNDdjNzkwY2U5Y2Q2YjE2M2U5OGQ0N2E0ODA3MDQ3ZWNhZDgyCjsgcGF0Y2hfZmlsZW5hbWUgPSBjbW9ja2FfMS4xLjctMl9wYXRjaC56aXAKOyBwYXRjaF91cmwgPSBodHRwczovL3dyYXBkYi5tZXNvbmJ1aWxkLmNvbS92Mi9jbW9ja2FfMS4xLjctMi9nZXRfcGF0Y2gKOyBwYXRjaF9oYXNoID0gNmU5NmExYTMxYTk1MjI3MGE1NzFmZDlhYmY5Y2E5YjA5ZWY3MTY4NjA0MjUwNGY3MzE2ZGNhYzZlNWQxZDE0ZQo7IHNvdXJjZV9mYWxsYmFja191cmwgPSBodHRwczovL2dpdGh1Yi5jb20vbWVzb25idWlsZC93cmFwZGIvcmVsZWFzZXMvZG93bmxvYWQvY21vY2thXzEuMS43LTIvY21vY2thLTEuMS43LnRhci54ego7IHdyYXBkYl92ZXJzaW9uID0gMS4xLjctMgoKOyBbcHJvdmlkZV0KOyBjbW9ja2EgPSBjbW9ja2FfZGVwCgoK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXBAAAAAAAAL8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					429,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAL4BAAAAAAAAvgEAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/AQAAAAAAAL8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"paste",
					null,
					"AgAAAH0BAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC9AQAAAAAAAEAAAAAyY2Y2OGQwZDY5OTM0NzU3NmI4NjFiNGI5ZmM5NTFjOWUzMTM1MDVmZGEwYjVkZjU4YTE4OTdhZmUwMGQ5OWQy",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9AQAAAAAAAL0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					552,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+AQAAAAAAAL4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					554,
					1,
					"paste",
					null,
					"AQAAAL8BAAAAAAAA/QMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/AQAAAAAAAL8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					557,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"DAAAAOkDAAAAAAAA6wMAAAAAAAAAAAAA3wMAAAAAAADhAwAAAAAAAAAAAADFAwAAAAAAAMcDAAAAAAAAAAAAAFUDAAAAAAAAVwMAAAAAAAAAAAAABwMAAAAAAAAJAwAAAAAAAAAAAADBAgAAAAAAAMMCAAAAAAAAAAAAAJcCAAAAAAAAmQIAAAAAAAAAAAAASAIAAAAAAABKAgAAAAAAAAAAAAAiAgAAAAAAACQCAAAAAAAAAAAAAOQBAAAAAAAA5gEAAAAAAAAAAAAAywEAAAAAAADNAQAAAAAAAAAAAAC/AQAAAAAAAMEBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AwAAAAAAAL8BAAAAAAAAAAAAAAAAAAA"
				],
				[
					616,
					1,
					"left_delete",
					null,
					"AQAAAL4BAAAAAAAAvgEAAAAAAABXAgAACjsgW3dyYXAtZmlsZV0KOyBkaXJlY3RvcnkgPSBjbW9ja2EtMS4xLjcKOyBzb3VyY2VfdXJsID0gaHR0cHM6Ly9jbW9ja2Eub3JnL2ZpbGVzLzEuMS9jbW9ja2EtMS4xLjcudGFyLnh6Cjsgc291cmNlX2ZpbGVuYW1lID0gY21vY2thLTEuMS43LnRhci54ego7IHNvdXJjZV9oYXNoID0gODEwNTcwZWIwYjhkNjQ4MDQzMzFmODJiMjlmZjQ3Yzc5MGNlOWNkNmIxNjNlOThkNDdhNDgwNzA0N2VjYWQ4Mgo7IHBhdGNoX2ZpbGVuYW1lID0gY21vY2thXzEuMS43LTJfcGF0Y2guemlwCjsgcGF0Y2hfdXJsID0gaHR0cHM6Ly93cmFwZGIubWVzb25idWlsZC5jb20vdjIvY21vY2thXzEuMS43LTIvZ2V0X3BhdGNoCjsgcGF0Y2hfaGFzaCA9IDZlOTZhMWEzMWE5NTIyNzBhNTcxZmQ5YWJmOWNhOWIwOWVmNzE2ODYwNDI1MDRmNzMxNmRjYWM2ZTVkMWQxNGUKOyBzb3VyY2VfZmFsbGJhY2tfdXJsID0gaHR0cHM6Ly9naXRodWIuY29tL21lc29uYnVpbGQvd3JhcGRiL3JlbGVhc2VzL2Rvd25sb2FkL2Ntb2NrYV8xLjEuNy0yL2Ntb2NrYS0xLjEuNy50YXIueHoKOyB3cmFwZGJfdmVyc2lvbiA9IDEuMS43LTIKCjsgW3Byb3ZpZGVdCjsgY21vY2thID0gY21vY2thX2RlcAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVBAAAAAAAAL4BAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "libc-skeleton/subprojects/openlibm.wrap",
			"settings":
			{
				"buffer_size": 135,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "",
			"file": "/C/Users/Marc/AppData/Local/Temp/7zE846BE53E/meson.build",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Windows",
				"unsaved": true
			}
		},
		{
			"file": "/C/Users/Marc/Desktop/meson.build",
			"settings":
			{
				"buffer_size": 5754,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "reference/005-cross-compilation/subprojects/cmocka-1.1.5/src/meson.build",
			"settings":
			{
				"buffer_size": 1586,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				],
				[
					"Packages/User/cmake.sublime-build",
					"new sublime build"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"Packages/User/cmake.sublime-build",
				""
			]
		],
		[
			[
				[
					"testNucleo - all",
					""
				],
				[
					"testNucleo - clean",
					""
				],
				[
					"testNucleo - edit_cache",
					""
				],
				[
					"testNucleo - rebuild_cache",
					""
				],
				[
					"testNucleo - testNucleo",
					""
				],
				[
					"testNucleo - testNucleo.bin",
					""
				],
				[
					"testNucleo - testNucleo.hex",
					""
				],
				[
					"testNucleo - testNucleo/fast",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"testNucleo - all",
				""
			]
		],
		[
			[
				[
					"testNucleo - all",
					""
				],
				[
					"testNucleo - clean",
					""
				],
				[
					"testNucleo - edit_cache",
					""
				],
				[
					"testNucleo - rebuild_cache",
					""
				],
				[
					"testNucleo - testNucleo",
					""
				],
				[
					"testNucleo - testNucleo.bin",
					""
				],
				[
					"testNucleo - testNucleo.hex",
					""
				],
				[
					"testNucleo - testNucleo/fast",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					""
				],
				[
					"Packages/User/cmake.sublime-build",
					"clean"
				]
			],
			[
				"testNucleo - all",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"open panel",
				"Meson: Toggle Panel"
			],
			[
				"terminus",
				"Terminus: List Shells"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pya",
				"PyYapf: Format Selection"
			],
			[
				"debugger open",
				"Debugger: Open"
			],
			[
				"open debu",
				"Debugger: Open"
			],
			[
				"debugger configurat",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger settin",
				"Preferences: Debugger Settings"
			],
			[
				"build ",
				"Build With: Python"
			],
			[
				"debugger ",
				"Debugger: Open"
			],
			[
				"debug",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger setting",
				"Preferences: Debugger Settings"
			],
			[
				"debugger",
				"Debugger: Install Adapters"
			],
			[
				"doxyge",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"todo",
				"TodoReview: Project and Open Files"
			],
			[
				"doxygen",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"lsp form",
				"LSP: Format Selection"
			],
			[
				"lsp format",
				"LSP: Format Selection"
			],
			[
				"format",
				"LSP: Format Selection"
			],
			[
				"lsp",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp trou",
				"LSP: Troubleshoot Server"
			],
			[
				"clangd",
				"Preferences: LSP-clangd Settings"
			],
			[
				"lsp troub",
				"LSP: Troubleshoot Server"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"package control ",
				"Package Control: Satisfy Dependencies"
			],
			[
				"package control upd",
				"Package Control: Upgrade Package"
			],
			[
				"clangd ",
				"Preferences: LSP-clangd Settings"
			],
			[
				"lsp server",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp enable",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp ser",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp rest",
				"LSP: Restart Server"
			],
			[
				"lsp forma",
				"LSP: Format Selection"
			],
			[
				"debugger com",
				"Debugger: Input Command"
			],
			[
				"debugger configu",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger confi",
				"Debugger: Add or Select Configuration"
			],
			[
				"debugger adapter",
				"Debugger: Install Adapters"
			],
			[
				"debugger adap",
				"Debugger: Install Adapters"
			],
			[
				"debugger adapt",
				"Debugger: Install Adapters"
			],
			[
				"debugger sett",
				"Preferences: Debugger Settings"
			],
			[
				"debugger add",
				"Debugger: Add Configuration"
			],
			[
				"doxy build",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"doxy buil",
				"DoxyDoxygen: Build Documentation"
			],
			[
				"doxygen key",
				"Preferences: DoxyDoxygen Key Bindings"
			],
			[
				"doxy",
				"DoxyDoxygen: Select Comments (interactive)..."
			],
			[
				"do",
				"DoxyDoxygen: Comment All"
			],
			[
				"lsp format file",
				"LSP: Format File"
			],
			[
				"format file",
				"LSP: Format File"
			],
			[
				"for",
				"LSP: Format File"
			],
			[
				"inlay",
				"LSP: Toggle Inlay Hints"
			],
			[
				"lsp file",
				"LSP: Format File"
			],
			[
				"forma",
				"LSP: Format File"
			],
			[
				"snake",
				"Convert Case: snake_case"
			],
			[
				"lsp re",
				"LSP: Restart Server"
			],
			[
				"lsp res",
				"LSP: Restart Server"
			],
			[
				"lsp restar",
				"LSP: Restart Server"
			],
			[
				"clangd sett",
				"Preferences: LSP-clangd Settings"
			],
			[
				"lsp serv",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp setting",
				"Preferences: LSP Settings"
			],
			[
				"lsp restart",
				"LSP: Restart Server"
			],
			[
				"lsp dia",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp log",
				"LSP: Toggle Log Panel"
			],
			[
				"restart",
				"LSP: Restart Server"
			],
			[
				"lsp settin",
				"Preferences: LSP Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"lsp key",
				"Preferences: LSP Key Bindings"
			],
			[
				"origami reorde",
				"Preferences: Origami Key Bindings"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"preference set",
				"Preferences: Settings"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"preferen",
				"Preferences: LSP Settings"
			],
			[
				"settin",
				"Preferences: Settings"
			],
			[
				"dia",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"refere",
				"LSP: Find References"
			],
			[
				"re",
				"LSP: Restart Server"
			],
			[
				"referen",
				"LSP: Find References"
			],
			[
				"reference",
				"LSP: Find References"
			],
			[
				"rest",
				"LSP: Restart Server"
			],
			[
				"lsp rese",
				"LSP: Restart Server"
			],
			[
				"clang form",
				"Clang Format: Format Selection"
			],
			[
				"lsp settings",
				"Preferences: LSP Settings"
			],
			[
				"lsp setti",
				"Preferences: LSP Settings"
			],
			[
				"restar",
				"LSP: Restart Server"
			],
			[
				"index",
				"Help: Indexing Status"
			],
			[
				"diagn",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp d",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"refer",
				"LSP: Find References"
			],
			[
				"lsp rename",
				"LSP: Rename"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"trouble",
				"LSP: Troubleshoot Server"
			],
			[
				"inde",
				"Help: Indexing Status"
			],
			[
				"log",
				"LSP: Toggle Log Panel"
			],
			[
				"lsp sett",
				"Preferences: LSP Settings"
			],
			[
				"lsp diagnostic",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp goto symb",
				"LSP: Goto Symbol In Project…"
			],
			[
				"log panel",
				"LSP: Toggle Log Panel"
			],
			[
				"referenc",
				"LSP: Find References"
			],
			[
				"lsp pane",
				"LSP: Toggle Log Panel"
			],
			[
				"lsp find",
				"LSP: Find References"
			],
			[
				"package control up",
				"Package Control: Upgrade Package"
			],
			[
				"lsb trou",
				"LSP: Troubleshoot Server"
			],
			[
				"lsp:",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsb",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp diagn",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp diag",
				"LSP: Toggle Diagnostics Panel"
			],
			[
				"lsp ",
				"Preferences: LSP Key Bindings"
			],
			[
				"switchhea",
				"LSP-clangd: Switch to Source/Header"
			],
			[
				"select ",
				"UI: Select Color Scheme"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"sele",
				"UI: Select Color Scheme"
			],
			[
				"color",
				"UI: Customize Color Scheme"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"debugger install",
				"Debugger: Install Adapters"
			],
			[
				"code lens",
				"LSP: Run Code Lens"
			],
			[
				"switch",
				"LSP-clangd: Switch to Source/Header"
			],
			[
				"file rename",
				"File: Rename"
			],
			[
				"rename ",
				"LSP: Rename"
			],
			[
				"lsp renam",
				"LSP: Rename"
			],
			[
				"rename",
				"File: Rename"
			],
			[
				"scope",
				"Selection: Expand to Scope"
			],
			[
				"type",
				"LSP: Show Type Hierarchy"
			],
			[
				"",
				"LSP: Toggle Log Panel"
			],
			[
				"clang",
				"Preferences: LSP Language ID Mapping Overrides"
			],
			[
				"ls",
				"LSP: Restart Server"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"gitgutter",
				"Preferences: GitGutter Settings"
			],
			[
				"blame",
				"Git: Blame"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"git",
				"Git Blame: Show"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 172.0,
		"history":
		[
			"bash",
			"quit",
			"quit()",
			"exit()",
			"exit",
			"pip install compiledb",
			"py -m ensurepip --upgrade",
			"pip",
			"python -m ensurepip --upgrade",
			"ensurepip",
			"pip",
			"sublime.log_indexing",
			"docker build -t nirve/armenv:v1"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/code/EA/meson_build",
		"/C/code/EA/meson_build/libc-skeleton"
	],
	"file_history":
	[
		"/C/code/EA/meson_build/libc-skeleton/test/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.7/meson.build",
		"/C/Users/Marc/AppData/Local/Temp/7zE0CAB4BAF/meson.build",
		"/C/Users/Marc/Desktop/meson.build",
		"/C/Users/Marc/AppData/Local/Temp/7zE4ABA2A47/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.7/tests/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/src/meson.build",
		"/C/Users/Marc/AppData/Local/Temp/MicrosoftEdgeDownloads/ffac27c3-cfd1-4abc-91fc-db8576c7c666/cmocka.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.5/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/cmocka.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.5/src/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/packagefiles/printf/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/packagefiles/printf/test/meson.build",
		"/C/code/EA/meson_build/reference/004-options-and-flags/src/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/build/cross/nrf52840.txt",
		"/C/code/EA/meson_build/reference/003-run-targets/subprojects/packagefiles/printf/test/meson.build",
		"/C/code/EA/meson_build/reference/003-run-targets/subprojects/packagefiles/printf/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/subprojects/packagefiles/printf/meson.build",
		"/C/code/EA/meson_build/reference/005-cross-compilation/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/buildresults/compile_commands.json",
		"/C/code/EA/meson_build/libc-skeleton/buildresults/meson-logs/meson-log.txt",
		"/C/code/EA/meson_build/libc-skeleton/meson_options.txt",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/tools/clear_test_results.sh",
		"/C/code/EA/meson_build/.gitignore",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/openlibm.wrap",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/packagefiles/openlibm/meson.build",
		"/C/code/EA/meson_build/reference/001-printf-dep/subprojects/printf.wrap",
		"/C/Users/Marc/AppData/Local/Temp/MicrosoftEdgeDownloads/8cb9f270-2f9a-475f-9230-5d363813cd40/unity.wrap",
		"/C/code/EA/meson_build/libc-skeleton/tools/libc_tests_xml.sh",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/printf/test/meson.build",
		"/C/code/EA/meson_build/reference/001-printf-dep/meson.build",
		"/C/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.5/cmocka.pc.cmake",
		"/C/code/distributor-gui/legacyModbus.py",
		"/C/code/distributor-gui/modbusBase.py",
		"/C/code/distributor-gui/HoldingRegisters.py",
		"/C/code/distributor-gui/Coils.py",
		"/C/code/distributor-gui/fileLog.py",
		"/C/code/distributor-gui/gui.py",
		"/C/code/distributor-gui/modernModbus.py",
		"/C/code/distributor-gui/distributor-gui-project.sublime-project",
		"/C/code/distributor-gui/legacyCustomHandlers.py",
		"/C/code/distributor-gui/modbusHandler.py",
		"/C/Users/Marc/AppData/Local/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe/LocalState/settings.json",
		"/C/code/distributor-gui/config.ini",
		"/C/code/EA/Cmake/libc-skeleton/cmake/toolchains/cross/cortex-m7_hardfloat.cmake",
		"/C/code/EA/Cmake/libc-skeleton/cmake/toolchains/cross/cortex-m4_hardfloat.cmake",
		"/C/code/EA/Cmake/libc-skeleton/cmake/toolchains/cross/cortex-m3_softfloat.cmake",
		"/C/code/EA/Cmake/libc-skeleton/BuildOptions.cmake",
		"/C/code/EA/Cmake/libc-skeleton/buildresults/_deps/printf-src/README.md",
		"/C/code/EA/CMake reference/006-cross-compilation/test/CMakeLists.txt",
		"/C/code/EA/Cmake/libc-skeleton/test/CMakelists.txt",
		"/C/code/EA/reference testing/CMakeLists.txt",
		"/C/code/EA/006-cross-compilation/src/CMakeLists.txt",
		"/C/code/EA/005-build-options/src/CMakeLists.txt",
		"/C/code/Franger/src/Application/system.c",
		"/C/code/Franger/include/Drivers/interrupt.h",
		"/C/code/Franger/src/Device/Relay/relay_timer.c",
		"/C/code/Franger/include/Device/Relay/relay_timer.h",
		"/C/code/Franger/src/Application/self_test.c",
		"/C/code/Franger/include/Application/modbus/modbus.h",
		"/C/code/Franger/src/Drivers/interrupt.c",
		"/C/code/Franger/src/Device/runtime_flags.c",
		"/C/code/Franger/src/Device/TempHum/temphum.c",
		"/C/code/Franger/src/Application/tasks.c",
		"/C/code/Franger/src/main.c",
		"/C/code/Franger/src/Application/Signal/signal_avg.c",
		"/C/code/Franger/src/Application/serial.c",
		"/C/code/Franger/src/Application/inputs.c",
		"/C/code/Franger/src/Application/defrost.c",
		"/C/code/Franger/src/Application/Signal/signal_offset.c",
		"/C/code/Franger/src/Application/Signal/signal_dft.c",
		"/C/code/Franger/src/Application/modbus/mb_timers.c",
		"/C/code/Franger/src/Application/modbus/modbus.c",
		"/C/code/Franger/src/Application/Signal/signal_idx.c",
		"/C/code/Franger/src/Device/Proximity/proximity.c",
		"/C/code/Franger/src/Device/Proximity/proximity_i2c.c",
		"/C/code/Franger/src/Drivers/msp430_adc.c",
		"/C/code/Franger/include/Device/Proximity/proximity_i2c.h",
		"/C/code/Franger/src/Application/alarms.c",
		"/C/code/Franger/include/Misc.h",
		"/C/code/Franger/src/Application/faults.c",
		"/C/code/Franger/src/Application/records.c",
		"/C/code/Franger/include/Application/records.h",
		"/C/code/Franger/src/Device/mcu.c",
		"/C/code/Franger/include/Device/wdt.h",
		"/C/code/Franger/src/Device/wdt.c",
		"/C/code/Franger/src/Application/Signal/signal_uv.c",
		"/C/code/Franger/test/test_alarms.c",
		"/C/code/Franger/include/Application/system.h",
		"/C/code/Franger/include/Drivers/registers.h",
		"/C/code/Franger/src/Device/TempHum/temphumadc.c",
		"/C/code/Franger/src/Application/modbus/mb_holding_registers.c",
		"/C/code/Franger/src/Application/Mode/mode.c",
		"/C/code/Franger/src/Device/lamp.c",
		"/C/code/Franger/src/Device/Calendar/calendar_i2c.c",
		"/C/code/Franger/src/Device/TempHum/temphum_HTS221.c",
		"/C/code/Franger/src/Drivers/SPI_ADS1256.c",
		"/C/code/Franger/include/Device/mcu.h",
		"/C/code/Franger/test/support/msp430fr6989.h",
		"/C/code/Franger/buildtest/test/cache/signal_uv.h",
		"/C/code/Franger/src/Drivers/I2C.c",
		"/C/code/Franger/include/Application/faults.h",
		"/C/code/Franger/src/Device/adc.c",
		"/C/code/Franger/include/Device/lamp.h",
		"/C/code/Franger/include/Device/adc_types.h",
		"/C/code/Franger/include/Device/led.h",
		"/C/code/Franger/include/Device/runtime_flags.h",
		"/C/code/Franger/src/Device/Timer/timer.c",
		"/C/code/Franger/src/Device/Relay/relays.c",
		"/C/code/Franger/project.yml",
		"/C/code/Franger/include/Application/defrost.h",
		"/C/code/Franger/include/Device/Timer/timer.h",
		"/C/code/Franger/src/Application/Signal/signal_mv.c",
		"/C/code/Franger/src/Drivers/registers.c",
		"/C/code/Franger/test/test_signal2.c",
		"/C/code/Franger/src/Device/heater.c",
		"/C/code/Franger/test/test_timer.c",
		"/C/code/Franger/src/Drivers/AD5420_HART.c",
		"/C/code/Franger/include/Application/tasks.h",
		"/C/code/Franger/include/Drivers/SPI_ADS1256.h",
		"/C/code/Franger/include/Application/alarms.h",
		"/C/code/Franger/src/Application/Signal/sensitivity.c",
		"/C/code/Franger/test/support/in430.h",
		"/C/code/Franger/test/support/intrinsics.c"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 415.0,
		"where_history":
		[
			"",
			"*.build",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"assert(",
			"Wunused-parameter",
			"cmocka",
			"Wunused-parameter",
			"host",
			"c_compiler",
			"add_project_arguments",
			"add_project_arguments ",
			"arch_specific_includes",
			"libcmocka =",
			"native: true",
			"libcmocka",
			"cmocka_dep",
			"cc_native_dict",
			"project(",
			"project",
			"cmocka_dep",
			"cmocka_",
			"cmocka",
			"native",
			"cmocka",
			"libc_native_files",
			"_putchar",
			"libcmocka_native",
			"Wno-unknown-pragmas",
			"libc_common_files",
			"-wno-unknown",
			"assert.c",
			"libcmocka_native",
			"O2",
			"Og",
			"O0",
			"build_type_flags",
			"GDTOA_HOST_DEBUG",
			"O0",
			"libc_native_dep",
			"env",
			"_files",
			"files",
			"/",
			"printf_tests",
			"]'",
			"build_type_flags +=",
			"depends",
			"pkg-config",
			"packet",
			"get_response_pdu_size",
			"_tid",
			"slave",
			"processincomingpacket"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "libc-skeleton/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2982,
						"regions":
						{
						},
						"selection":
						[
							[
								1123,
								1123
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1147,
										1148
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/square_bracket.png",
										"region.bluish"
									]
								},
								"open":
								{
									"1":
									[
										1026,
										1027
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "libc-skeleton/test/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2165,
						"regions":
						{
						},
						"selection":
						[
							[
								1731,
								1731
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1790,
										1791
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1619,
										1620
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/test/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 994.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "libc-skeleton/src/string/memcmp.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 615,
						"regions":
						{
						},
						"selection":
						[
							[
								530,
								534
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										613,
										614
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										96,
										97
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/string/memcmp.c",
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56406,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "C:\\code\\EA\\meson_build\\libc-skeleton\\src\\string",
							"detect_indentation": false,
							"git_gutter_is_enabled": false,
							"line_numbers": false,
							"lsp_uri": "buffer:142",
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "libc-skeleton/subprojects/cmocka-1.1.7/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5771,
						"regions":
						{
						},
						"selection":
						[
							[
								5144,
								5144
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5283,
										5284
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										4896,
										4897
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/cmocka-1.1.7/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2603.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "libc-skeleton/buildresults/compile_commands.json",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 290237,
						"regions":
						{
						},
						"selection":
						[
							[
								3781,
								3797
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4297,
										4298
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										3750,
										3751
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/buildresults/compile_commands.json",
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 6,
					"file": "libc-skeleton/src/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6548,
						"regions":
						{
						},
						"selection":
						[
							[
								5516,
								5516
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/src/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3842.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "libc-skeleton/test/string/memcmp.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 901,
						"regions":
						{
						},
						"selection":
						[
							[
								732,
								732
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/test/string/memcmp.c",
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 124.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "libc-skeleton/test/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2165,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/test/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "libc-skeleton/subprojects/cmocka.wrap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 446,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/cmocka.wrap",
							"syntax": "Packages/INI/INI.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "libc-skeleton/subprojects/openlibm.wrap",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 135,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/subprojects/openlibm.wrap",
							"syntax": "Packages/INI/INI.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "libc-skeleton/buildresults/compile_commands.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 290237,
						"regions":
						{
						},
						"selection":
						[
							[
								2513,
								2521
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2534,
										2535
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2480,
										2481
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/libc-skeleton/buildresults/compile_commands.json",
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 10,
					"file": "/C/Users/Marc/AppData/Local/Temp/7zE846BE53E/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": false,
							"lsp_uri": "file:///C:/Users/Marc/AppData/Local/Temp/7zE846BE53E/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/C/Users/Marc/Desktop/meson.build",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5754,
						"regions":
						{
						},
						"selection":
						[
							[
								4849,
								4849
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4850,
										4851
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										4535,
										4536
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": false,
							"lsp_uri": "file:///C:/Users/Marc/Desktop/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "reference/005-cross-compilation/subprojects/cmocka-1.1.5/src/meson.build",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1586,
						"regions":
						{
						},
						"selection":
						[
							[
								1135,
								1140
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1142,
										1143
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										771,
										772
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///C:/code/EA/meson_build/reference/005-cross-compilation/subprojects/cmocka-1.1.5/src/meson.build",
							"syntax": "Packages/Meson/meson.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 141.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				2,
				2
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 532.0
	},
	"output.Debugger Console":
	{
		"height": 264.0
	},
	"output.Debugger Protocol":
	{
		"height": 264.0
	},
	"output.Debugger Terminal":
	{
		"height": 264.0
	},
	"output.LSP Log Panel":
	{
		"height": 603.0
	},
	"output.Meson":
	{
		"height": 114.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 156.0
	},
	"output.Terminus":
	{
		"height": 273.0
	},
	"output.diagnostics":
	{
		"height": 114.0
	},
	"output.exec":
	{
		"height": 156.0
	},
	"output.find_results":
	{
		"height": 212.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.mdpopups-dummy":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 138.0
	},
	"output.rename":
	{
		"height": 114.0
	},
	"pinned_build_system": "",
	"project": "meson_build.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"memcmp",
				"libc-skeleton\\test\\string\\memcmp.c"
			],
			[
				"test/meson.build",
				"libc-skeleton\\test\\meson.build"
			],
			[
				"tests/meson.build",
				"libc-skeleton\\subprojects\\cmocka-1.1.7\\tests\\meson.build"
			],
			[
				"src/meson.build",
				"libc-skeleton\\src\\meson.build"
			],
			[
				"test/meson",
				"libc-skeleton\\test\\meson.build"
			],
			[
				"mesonlog",
				"libc-skeleton\\buildresults\\meson-logs\\meson-log.txt"
			],
			[
				"meson-log.txt",
				"libc-skeleton\\buildresults\\meson-logs\\meson-log.txt"
			],
			[
				"nrf",
				"libc-skeleton\\build\\cross\\nrf52840.txt"
			],
			[
				"src/meson.buil",
				"libc-skeleton\\src\\meson.build"
			],
			[
				"printf.wrap",
				"reference\\001-printf-dep\\subprojects\\printf.wrap"
			],
			[
				"printf/test/meson",
				"libc-skeleton\\subprojects\\packagefiles\\printf\\test\\meson.build"
			],
			[
				"libc/test/meson",
				"libc-skeleton\\test\\meson.build"
			],
			[
				"log",
				"libc-skeleton\\buildresults\\meson-logs\\meson-log.txt"
			],
			[
				"transaction",
				"pymodbus\\transaction.py"
			],
			[
				"base",
				"pymodbus\\framer\\base.py"
			],
			[
				"rtu_framer",
				"pymodbus\\framer\\rtu_framer.py"
			],
			[
				"mod",
				"modbusBase.py"
			],
			[
				"gui",
				"gui.py"
			],
			[
				"modbus",
				"modbusBase.py"
			],
			[
				"modbusbase",
				"modbusBase.py"
			],
			[
				"modbu",
				"modbusHandler.py"
			],
			[
				"legacy",
				"legacyModbus.py"
			],
			[
				"coil",
				"Coils.py"
			],
			[
				"gui.py",
				"gui.py"
			],
			[
				"test/cmake",
				"test\\CMakelists.txt"
			],
			[
				"src/cmakelists",
				"src\\CMakelists.txt"
			],
			[
				"interrupt.h",
				"include\\Drivers\\interrupt.h"
			],
			[
				"system.c",
				"src\\Application\\system.c"
			],
			[
				"relay_timer.c",
				"src\\Device\\Relay\\relay_timer.c"
			],
			[
				"relay_timer.h",
				"include\\Device\\Relay\\relay_timer.h"
			],
			[
				"self_test.c",
				"src\\Application\\self_test.c"
			],
			[
				"mb_timers.c",
				"src\\Application\\modbus\\mb_timers.c"
			],
			[
				"main.c",
				"src\\main.c"
			],
			[
				"proximity_i2c.h",
				"include\\Device\\Proximity\\proximity_i2c.h"
			],
			[
				"proximity_i2c.c",
				"src\\Device\\Proximity\\proximity_i2c.c"
			],
			[
				"proximity.c",
				"src\\Device\\Proximity\\proximity.c"
			],
			[
				"msp430_adc.c",
				"src\\Drivers\\msp430_adc.c"
			],
			[
				"test_alarm",
				"test\\test_alarms.c"
			],
			[
				"inputs.c",
				"src\\Application\\inputs.c"
			],
			[
				"misc.h",
				"include\\Misc.h"
			],
			[
				"tasks.c",
				"src\\Application\\tasks.c"
			],
			[
				"records.c",
				"src\\Application\\records.c"
			],
			[
				"records.h",
				"include\\Application\\records.h"
			],
			[
				"signal_uv.h",
				"buildtest\\test\\cache\\signal_uv.h"
			],
			[
				"signal_uv.c",
				"src\\Application\\Signal\\signal_uv.c"
			],
			[
				"alarms.c",
				"src\\Application\\alarms.c"
			],
			[
				"mcu.c",
				"src\\Device\\mcu.c"
			],
			[
				"spi",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"registers.h",
				"include\\Drivers\\registers.h"
			],
			[
				"main",
				"src\\main.c"
			],
			[
				"wdt.h",
				"include\\Device\\wdt.h"
			],
			[
				"wdt.c",
				"src\\Device\\wdt.c"
			],
			[
				"system.h",
				"include\\Application\\system.h"
			],
			[
				"interrupt.c",
				"src\\Drivers\\interrupt.c"
			],
			[
				"faults.c",
				"src\\Application\\faults.c"
			],
			[
				"mcu.h",
				"include\\Device\\mcu.h"
			],
			[
				"led.h",
				"include\\Device\\led.h"
			],
			[
				"tasks",
				"src\\Application\\tasks.c"
			],
			[
				"lamp.c",
				"src\\Device\\lamp.c"
			],
			[
				"lamp.h",
				"include\\Device\\lamp.h"
			],
			[
				"reg.h",
				"include\\Drivers\\registers.h"
			],
			[
				"runtime_flags.h",
				"include\\Device\\runtime_flags.h"
			],
			[
				"runtime_flags.c",
				"src\\Device\\runtime_flags.c"
			],
			[
				"adc.c",
				"src\\Device\\adc.c"
			],
			[
				"timer.c",
				"src\\Device\\Timer\\timer.c"
			],
			[
				"adc_types",
				"include\\Device\\adc_types.h"
			],
			[
				"hts",
				"src\\Device\\TempHum\\temphum_HTS221.c"
			],
			[
				"faults",
				"include\\Application\\faults.h"
			],
			[
				"adc_types.h",
				"include\\Device\\adc_types.h"
			],
			[
				"mcu",
				"src\\Device\\mcu.c"
			],
			[
				"relays.c",
				"src\\Device\\Relay\\relays.c"
			],
			[
				"faults.h",
				"include\\Application\\faults.h"
			],
			[
				"signal_dft.c",
				"src\\Application\\Signal\\signal_dft.c"
			],
			[
				"signal_dft",
				"src\\Application\\Signal\\signal_dft.c"
			],
			[
				"alarms.",
				"src\\Application\\alarms.c"
			],
			[
				"uv",
				"src\\Application\\Signal\\signal_uv.c"
			],
			[
				"proximity",
				"src\\Device\\Proximity\\proximity.c"
			],
			[
				"i2c.c",
				"src\\Drivers\\I2C.c"
			],
			[
				"calendar_i2c.c",
				"src\\Device\\Calendar\\calendar_i2c.c"
			],
			[
				"temphum.c",
				"src\\Device\\TempHum\\temphum.c"
			],
			[
				"reg",
				"include\\Drivers\\registers.h"
			],
			[
				"defrost",
				"src\\Application\\defrost.c"
			],
			[
				"temphumadc.c",
				"src\\Device\\TempHum\\temphumadc.c"
			],
			[
				"defrost.c",
				"src\\Application\\defrost.c"
			],
			[
				"regisetrs.h",
				"include\\Drivers\\registers.h"
			],
			[
				"registers.c",
				"src\\Drivers\\registers.c"
			],
			[
				"dft.c",
				"src\\Application\\Signal\\signal_dft.c"
			],
			[
				"spi_a",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"signal2",
				"test\\test_signal2.c"
			],
			[
				"signal_avg.c",
				"src\\Application\\Signal\\signal_avg.c"
			],
			[
				"spiads",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"ads",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"test_signal2",
				"test\\test_signal2.c"
			],
			[
				"signal_mv.c",
				"src\\Application\\Signal\\signal_mv.c"
			],
			[
				"sensitivity.c",
				"src\\Application\\Signal\\sensitivity.c"
			],
			[
				"test_alarms.c",
				"test\\test_alarms.c"
			],
			[
				"alarms.h",
				"include\\Application\\alarms.h"
			],
			[
				"temphumhts",
				"src\\Device\\TempHum\\temphum_HTS221.c"
			],
			[
				"temphum",
				"src\\Device\\TempHum\\temphum.c"
			],
			[
				"runtime",
				"include\\Device\\runtime_flags.h"
			],
			[
				"heater.c",
				"src\\Device\\heater.c"
			],
			[
				"relay.c",
				"src\\Device\\Relay\\relays.c"
			],
			[
				"lamp",
				"src\\Device\\lamp.c"
			],
			[
				"heater",
				"src\\Device\\heater.c"
			],
			[
				"fault.c",
				"src\\Application\\faults.c"
			],
			[
				"ADC.C",
				"src\\Device\\adc.c"
			],
			[
				"spi_",
				"include\\Drivers\\SPI_ADS1256.h"
			],
			[
				"tasks.h",
				"include\\Application\\tasks.h"
			],
			[
				"timer.h",
				"include\\Device\\Timer\\timer.h"
			],
			[
				"test_timer",
				"test\\test_timer.c"
			],
			[
				"test_timer.c",
				"test\\test_timer.c"
			],
			[
				"timeobserver.h",
				"include\\Device\\Timer\\time_observer.h"
			],
			[
				"timerobserv",
				"include\\Device\\Timer\\time_observer.h"
			],
			[
				"led.c",
				"src\\Device\\led.c"
			],
			[
				"timer",
				"src\\Device\\Timer\\timer.c"
			],
			[
				"spi_ads",
				"src\\Drivers\\SPI_ADS1256.c"
			],
			[
				"modbus.c",
				"src\\Application\\modbus\\modbus.c"
			],
			[
				"modbusutil",
				"src\\Application\\modbus\\mb_utility.c"
			],
			[
				"self_test.h",
				"include\\Application\\self_test.h"
			],
			[
				"runtime_flag",
				"include\\Device\\runtime_flags.h"
			],
			[
				"proximity.h",
				"include\\Device\\Proximity\\proximity.h"
			],
			[
				"doxyfile",
				"Doxyfile"
			],
			[
				"modbus.h",
				"include\\Application\\modbus\\modbus.h"
			],
			[
				"calendar_typ",
				"include\\Device\\Calendar\\calendar_types.h"
			],
			[
				".clang",
				".clang-format"
			],
			[
				"ad5420_hart.c",
				"src\\Drivers\\AD5420_HART.c"
			],
			[
				"msp430_",
				"include\\Drivers\\msp430_adc.h"
			],
			[
				"adc.h",
				"include\\Device\\adc.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 161.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 580.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 227.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
